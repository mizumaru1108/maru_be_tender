/* tslint:disable */
/* eslint-disable */
/**
 * Tmra Raise
 * Tmra Raise API
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AdvertisementCreateDto
 */
export interface AdvertisementCreateDto {
    /**
     * 
     * @type {string}
     * @memberof AdvertisementCreateDto
     */
    'content': string;
    /**
     * 
     * @type {string}
     * @memberof AdvertisementCreateDto
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof AdvertisementCreateDto
     */
    'track_id'?: string;
    /**
     * description of the AdvertisementTypeEnum property
     * @type {string}
     * @memberof AdvertisementCreateDto
     */
    'type': AdvertisementCreateDtoTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof AdvertisementCreateDto
     */
    'date': string;
    /**
     * 
     * @type {string}
     * @memberof AdvertisementCreateDto
     */
    'start_time': string;
}

export const AdvertisementCreateDtoTypeEnum = {
    Internal: 'INTERNAL',
    External: 'EXTERNAL'
} as const;

export type AdvertisementCreateDtoTypeEnum = typeof AdvertisementCreateDtoTypeEnum[keyof typeof AdvertisementCreateDtoTypeEnum];

/**
 * 
 * @export
 * @interface AppearancenDto
 */
export interface AppearancenDto {
    /**
     * 
     * @type {string}
     * @memberof AppearancenDto
     */
    'ownerUserId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppearancenDto
     */
    'ownerRealmId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppearancenDto
     */
    'primaryColor'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppearancenDto
     */
    'secondaryColor'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppearancenDto
     */
    'logo'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppearancenDto
     */
    'themesColor'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AppearancenDto
     */
    'usePallete'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AppearancenDto
     */
    'headerAndFooter'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppearancenDto
     */
    'whyShouldWe'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppearancenDto
     */
    'accent'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppearancenDto
     */
    'lButton'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppearancenDto
     */
    'lText'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppearancenDto
     */
    'ourStory'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppearancenDto
     */
    'peopleSay'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppearancenDto
     */
    'mainImageUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppearancenDto
     */
    'secondaryImage'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppearancenDto
     */
    'eventImagesUrl1'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppearancenDto
     */
    'eventImagesUrl2'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppearancenDto
     */
    'eventImagesUrl3'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppearancenDto
     */
    'detailStory1'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppearancenDto
     */
    'detailStory2'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppearancenDto
     */
    'detailStory3'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppearancenDto
     */
    'videoUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppearancenDto
     */
    'whySupportUs1'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppearancenDto
     */
    'whySupportUs2'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppearancenDto
     */
    'whySupportUs3'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppearancenDto
     */
    'favIcon'?: string;
}
/**
 * 
 * @export
 * @interface AskAmandementRequestDto
 */
export interface AskAmandementRequestDto {
    /**
     * 
     * @type {string}
     * @memberof AskAmandementRequestDto
     */
    'notes': string;
    /**
     * 
     * @type {string}
     * @memberof AskAmandementRequestDto
     */
    'proposal_id': string;
}
/**
 * 
 * @export
 * @interface AskClosingReportDto
 */
export interface AskClosingReportDto {
    /**
     * 
     * @type {string}
     * @memberof AskClosingReportDto
     */
    'proposal_id': string;
    /**
     * 
     * @type {number}
     * @memberof AskClosingReportDto
     */
    'number_of_beneficiaries': number;
    /**
     * 
     * @type {string}
     * @memberof AskClosingReportDto
     */
    'target_beneficiaries': string;
    /**
     * 
     * @type {string}
     * @memberof AskClosingReportDto
     */
    'execution_place': string;
    /**
     * 
     * @type {string}
     * @memberof AskClosingReportDto
     */
    'gender': string;
    /**
     * 
     * @type {string}
     * @memberof AskClosingReportDto
     */
    'project_duration': string;
    /**
     * 
     * @type {string}
     * @memberof AskClosingReportDto
     */
    'project_repeated': string;
    /**
     * 
     * @type {number}
     * @memberof AskClosingReportDto
     */
    'number_of_volunteer': number;
    /**
     * 
     * @type {number}
     * @memberof AskClosingReportDto
     */
    'number_of_staff': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof AskClosingReportDto
     */
    'attachments': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AskClosingReportDto
     */
    'images': Array<string>;
}
/**
 * 
 * @export
 * @interface BankData
 */
export interface BankData {
    /**
     * 
     * @type {string}
     * @memberof BankData
     */
    'bank_account_name': string;
    /**
     * 
     * @type {string}
     * @memberof BankData
     */
    'bank_account_number': string;
    /**
     * 
     * @type {string}
     * @memberof BankData
     */
    'bank_id': string;
    /**
     * 
     * @type {TenderFilePayload}
     * @memberof BankData
     */
    'card_image': TenderFilePayload;
}
/**
 * 
 * @export
 * @interface BankListCreateDto
 */
export interface BankListCreateDto {
    /**
     * 
     * @type {string}
     * @memberof BankListCreateDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof BankListCreateDto
     */
    'bank_name': string;
}
/**
 * 
 * @export
 * @interface BaseNotificationDto
 */
export interface BaseNotificationDto {
    /**
     * 
     * @type {string}
     * @memberof BaseNotificationDto
     */
    'notificationId': string;
}
/**
 * 
 * @export
 * @interface CampaignApplyVendorDto
 */
export interface CampaignApplyVendorDto {
    /**
     * 
     * @type {string}
     * @memberof CampaignApplyVendorDto
     */
    'campaignId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CampaignApplyVendorDto
     */
    'organizationId'?: string;
}
/**
 * 
 * @export
 * @interface CampaignCreateDto
 */
export interface CampaignCreateDto {
    /**
     * 
     * @type {string}
     * @memberof CampaignCreateDto
     */
    'organizationId': string;
    /**
     * 
     * @type {string}
     * @memberof CampaignCreateDto
     */
    'projectId': string;
    /**
     * 
     * @type {string}
     * @memberof CampaignCreateDto
     */
    'campaignName': string;
    /**
     * 
     * @type {string}
     * @memberof CampaignCreateDto
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof CampaignCreateDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof CampaignCreateDto
     */
    'campaignType': string;
    /**
     * 
     * @type {string}
     * @memberof CampaignCreateDto
     */
    'isMoney': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CampaignCreateDto
     */
    'methods': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CampaignCreateDto
     */
    'currencyCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof CampaignCreateDto
     */
    'amountTarget'?: string;
    /**
     * 
     * @type {string}
     * @memberof CampaignCreateDto
     */
    'isPublished'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CampaignCreateDto
     */
    'milestone': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CampaignCreateDto
     */
    'creatorUserId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CampaignCreateDto
     */
    'islamCharityType'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CampaignCreateDto
     */
    'marketingPlanEnabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CampaignCreateDto
     */
    'marketingPlan'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CampaignCreateDto
     */
    'images': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CampaignCreateDto
     */
    'contentLanguage': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CampaignCreateDto
     */
    'purposeDonation'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CampaignCreateDto
     */
    'quickDonateEnabled'?: boolean;
}
/**
 * 
 * @export
 * @interface CampaignSetDeletedFlagDto
 */
export interface CampaignSetDeletedFlagDto {
    /**
     * 
     * @type {Array<string>}
     * @memberof CampaignSetDeletedFlagDto
     */
    'campaignIds': Array<string>;
}
/**
 * 
 * @export
 * @interface CampaignSetFavoriteDto
 */
export interface CampaignSetFavoriteDto {
    /**
     * 
     * @type {Array<string>}
     * @memberof CampaignSetFavoriteDto
     */
    'campaignIds': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CampaignSetFavoriteDto
     */
    'donorId': string;
}
/**
 * 
 * @export
 * @interface CampaignUpdateDto
 */
export interface CampaignUpdateDto {
    /**
     * 
     * @type {string}
     * @memberof CampaignUpdateDto
     */
    'organizationId': string;
    /**
     * 
     * @type {string}
     * @memberof CampaignUpdateDto
     */
    'projectId': string;
    /**
     * 
     * @type {string}
     * @memberof CampaignUpdateDto
     */
    'campaignName': string;
    /**
     * 
     * @type {string}
     * @memberof CampaignUpdateDto
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof CampaignUpdateDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof CampaignUpdateDto
     */
    'campaignType': string;
    /**
     * 
     * @type {string}
     * @memberof CampaignUpdateDto
     */
    'isMoney': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CampaignUpdateDto
     */
    'methods': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CampaignUpdateDto
     */
    'currencyCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof CampaignUpdateDto
     */
    'amountTarget'?: string;
    /**
     * 
     * @type {string}
     * @memberof CampaignUpdateDto
     */
    'isPublished'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CampaignUpdateDto
     */
    'milestone': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CampaignUpdateDto
     */
    'creatorUserId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CampaignUpdateDto
     */
    'islamCharityType'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CampaignUpdateDto
     */
    'marketingPlanEnabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CampaignUpdateDto
     */
    'marketingPlan'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CampaignUpdateDto
     */
    'updatedImage': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CampaignUpdateDto
     */
    'contentLanguage': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CampaignUpdateDto
     */
    'purposeDonation'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CampaignUpdateDto
     */
    'quickDonateEnabled'?: boolean;
}
/**
 * 
 * @export
 * @interface CeoChangeStatePayload
 */
export interface CeoChangeStatePayload {
    /**
     * 
     * @type {string}
     * @memberof CeoChangeStatePayload
     */
    'step_back_to'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CeoChangeStatePayload
     */
    'inclu_or_exclu'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CeoChangeStatePayload
     */
    'vat_percentage'?: number;
    /**
     * 
     * @type {string}
     * @memberof CeoChangeStatePayload
     */
    'support_goal_id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CeoChangeStatePayload
     */
    'vat'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CeoChangeStatePayload
     */
    'support_outputs'?: string;
    /**
     * 
     * @type {number}
     * @memberof CeoChangeStatePayload
     */
    'number_of_payments_by_supervisor'?: number;
    /**
     * 
     * @type {number}
     * @memberof CeoChangeStatePayload
     */
    'fsupport_by_supervisor'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CeoChangeStatePayload
     */
    'does_an_agreement'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CeoChangeStatePayload
     */
    'need_picture'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CeoChangeStatePayload
     */
    'closing_report'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CeoChangeStatePayload
     */
    'support_type'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CeoChangeStatePayload
     */
    'clause'?: string;
    /**
     * 
     * @type {string}
     * @memberof CeoChangeStatePayload
     */
    'clasification_field'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CeoChangeStatePayload
     */
    'created_proposal_budget'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CeoChangeStatePayload
     */
    'updated_proposal_budget'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CeoChangeStatePayload
     */
    'deleted_proposal_budget'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CeoChangeStatePayload
     */
    'accreditation_type_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CeoChangeStatePayload
     */
    'chairman_of_board_of_directors'?: string;
    /**
     * 
     * @type {string}
     * @memberof CeoChangeStatePayload
     */
    'most_clents_projects'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CeoChangeStatePayload
     */
    'been_supported_before'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CeoChangeStatePayload
     */
    'added_value'?: string;
    /**
     * 
     * @type {string}
     * @memberof CeoChangeStatePayload
     */
    'reasons_to_accept'?: string;
    /**
     * 
     * @type {number}
     * @memberof CeoChangeStatePayload
     */
    'target_group_num'?: number;
    /**
     * 
     * @type {string}
     * @memberof CeoChangeStatePayload
     */
    'target_group_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof CeoChangeStatePayload
     */
    'target_group_age'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CeoChangeStatePayload
     */
    'been_made_before'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CeoChangeStatePayload
     */
    'remote_or_insite'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CeoChangeStatePayload
     */
    'created_recommended_support'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CeoChangeStatePayload
     */
    'updated_recommended_support'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CeoChangeStatePayload
     */
    'deleted_recommended_support'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ChangeProposalStateDto
 */
export interface ChangeProposalStateDto {
    /**
     * 
     * @type {string}
     * @memberof ChangeProposalStateDto
     */
    'selectLang'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChangeProposalStateDto
     */
    'proposal_id': string;
    /**
     * 
     * @type {string}
     * @memberof ChangeProposalStateDto
     */
    'action': string;
    /**
     * 
     * @type {ModeratorChangeStatePayload}
     * @memberof ChangeProposalStateDto
     */
    'moderator_payload'?: ModeratorChangeStatePayload;
    /**
     * 
     * @type {SupervisorChangeStatePayload}
     * @memberof ChangeProposalStateDto
     */
    'supervisor_payload'?: SupervisorChangeStatePayload;
    /**
     * 
     * @type {ProjectManagerChangeStatePayload}
     * @memberof ChangeProposalStateDto
     */
    'project_manager_payload'?: ProjectManagerChangeStatePayload;
    /**
     * 
     * @type {CeoChangeStatePayload}
     * @memberof ChangeProposalStateDto
     */
    'ceo_payload'?: CeoChangeStatePayload;
    /**
     * 
     * @type {string}
     * @memberof ChangeProposalStateDto
     */
    'reject_reason'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChangeProposalStateDto
     */
    'notes'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChangeProposalStateDto
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ClientEditRequestFieldDto
 */
export interface ClientEditRequestFieldDto {
    /**
     * 
     * @type {string}
     * @memberof ClientEditRequestFieldDto
     */
    'selectLang'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientEditRequestFieldDto
     */
    'entity'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientEditRequestFieldDto
     */
    'authority'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientEditRequestFieldDto
     */
    'headquarters'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientEditRequestFieldDto
     */
    'date_of_esthablistmen'?: string;
    /**
     * 
     * @type {number}
     * @memberof ClientEditRequestFieldDto
     */
    'num_of_beneficiaries'?: number;
    /**
     * 
     * @type {number}
     * @memberof ClientEditRequestFieldDto
     */
    'num_of_employed_facility'?: number;
    /**
     * 
     * @type {string}
     * @memberof ClientEditRequestFieldDto
     */
    'governorate'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientEditRequestFieldDto
     */
    'region'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientEditRequestFieldDto
     */
    'entity_mobile'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientEditRequestFieldDto
     */
    'center_administration'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientEditRequestFieldDto
     */
    'twitter_acount'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientEditRequestFieldDto
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientEditRequestFieldDto
     */
    'website'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientEditRequestFieldDto
     */
    'license_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientEditRequestFieldDto
     */
    'license_expired'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientEditRequestFieldDto
     */
    'license_issue_date'?: string;
    /**
     * 
     * @type {object}
     * @memberof ClientEditRequestFieldDto
     */
    'license_file'?: object;
    /**
     * 
     * @type {Array<string>}
     * @memberof ClientEditRequestFieldDto
     */
    'board_ofdec_file'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ClientEditRequestFieldDto
     */
    'ceo_mobile'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientEditRequestFieldDto
     */
    'ceo_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientEditRequestFieldDto
     */
    'data_entry_mobile'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientEditRequestFieldDto
     */
    'data_entry_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientEditRequestFieldDto
     */
    'data_entry_mail'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientEditRequestFieldDto
     */
    'client_field'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientEditRequestFieldDto
     */
    'chairman_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientEditRequestFieldDto
     */
    'chairman_mobile'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ClientEditRequestFieldDto
     */
    'created_banks'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ClientEditRequestFieldDto
     */
    'updated_banks'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ClientEditRequestFieldDto
     */
    'deleted_banks'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ClientEditRequestFieldDto
     */
    'old_banks'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ClientEditRequestFieldDto
     */
    'bank_information'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ClientEditRequestFieldDto
     */
    'createdBanks'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ClientEditRequestFieldDto
     */
    'updatedBanks'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ClientEditRequestFieldDto
     */
    'deletedBanks'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CoordiateLocation
 */
export interface CoordiateLocation {
    /**
     * 
     * @type {number}
     * @memberof CoordiateLocation
     */
    'latitude': number;
    /**
     * 
     * @type {number}
     * @memberof CoordiateLocation
     */
    'longitude': number;
}
/**
 * 
 * @export
 * @interface CreateAppointmentDto
 */
export interface CreateAppointmentDto {
    /**
     * 
     * @type {string}
     * @memberof CreateAppointmentDto
     */
    'authCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateAppointmentDto
     */
    'selectLang'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateAppointmentDto
     */
    'date': string;
    /**
     * 
     * @type {string}
     * @memberof CreateAppointmentDto
     */
    'start_time': string;
    /**
     * 
     * @type {string}
     * @memberof CreateAppointmentDto
     */
    'end_time': string;
    /**
     * 
     * @type {string}
     * @memberof CreateAppointmentDto
     */
    'client_id': string;
}
/**
 * 
 * @export
 * @interface CreateBeneficiariesDto
 */
export interface CreateBeneficiariesDto {
    /**
     * 
     * @type {string}
     * @memberof CreateBeneficiariesDto
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface CreateChequeDto
 */
export interface CreateChequeDto {
    /**
     * 
     * @type {string}
     * @memberof CreateChequeDto
     */
    'deposit_date': string;
    /**
     * 
     * @type {string}
     * @memberof CreateChequeDto
     */
    'number': string;
    /**
     * 
     * @type {TenderFilePayload}
     * @memberof CreateChequeDto
     */
    'transfer_receipt': TenderFilePayload;
}
/**
 * 
 * @export
 * @interface CreateCommentDto
 */
export interface CreateCommentDto {
    /**
     * 
     * @type {string}
     * @memberof CreateCommentDto
     */
    'organizationId': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCommentDto
     */
    'parentCommentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCommentDto
     */
    'campaignId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCommentDto
     */
    'projectId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCommentDto
     */
    'itemId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCommentDto
     */
    'content': string;
}
/**
 * 
 * @export
 * @interface CreateHrDto
 */
export interface CreateHrDto {
    /**
     * 
     * @type {string}
     * @memberof CreateHrDto
     */
    'hrName': string;
}
/**
 * 
 * @export
 * @interface CreateMessageDto
 */
export interface CreateMessageDto {
    /**
     * 
     * @type {string}
     * @memberof CreateMessageDto
     */
    'selectLang'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateMessageDto
     */
    'content_type_id': string;
    /**
     * 
     * @type {string}
     * @memberof CreateMessageDto
     */
    'correspondence_type_id': string;
    /**
     * 
     * @type {string}
     * @memberof CreateMessageDto
     */
    'content'?: string;
    /**
     * 
     * @type {TenderFilePayload}
     * @memberof CreateMessageDto
     */
    'attachment'?: TenderFilePayload;
    /**
     * 
     * @type {string}
     * @memberof CreateMessageDto
     */
    'content_title'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateMessageDto
     */
    'reply_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateMessageDto
     */
    'partner_id': string;
    /**
     * 
     * @type {string}
     * @memberof CreateMessageDto
     */
    'partner_selected_role': string;
    /**
     * 
     * @type {string}
     * @memberof CreateMessageDto
     */
    'current_user_selected_role': string;
}
/**
 * 
 * @export
 * @interface CreateProposalFollowUpDto
 */
export interface CreateProposalFollowUpDto {
    /**
     * 
     * @type {string}
     * @memberof CreateProposalFollowUpDto
     */
    'proposal_id': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProposalFollowUpDto
     */
    'selectLang'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProposalFollowUpDto
     */
    'follow_up_type': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateProposalFollowUpDto
     */
    'follow_up_attachment'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CreateProposalFollowUpDto
     */
    'content'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateProposalFollowUpDto
     */
    'employee_only': boolean;
}
/**
 * 
 * @export
 * @interface CreateProposalInterceptorDto
 */
export interface CreateProposalInterceptorDto {
    /**
     * 
     * @type {string}
     * @memberof CreateProposalInterceptorDto
     */
    'project_name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProposalInterceptorDto
     */
    'project_idea': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProposalInterceptorDto
     */
    'project_location': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProposalInterceptorDto
     */
    'project_implement_date': string;
    /**
     * 
     * @type {number}
     * @memberof CreateProposalInterceptorDto
     */
    'execution_time': number;
    /**
     * 
     * @type {string}
     * @memberof CreateProposalInterceptorDto
     */
    'beneficiary_id': string;
    /**
     * 
     * @type {number}
     * @memberof CreateProposalInterceptorDto
     */
    'num_ofproject_binicficiaries'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateProposalInterceptorDto
     */
    'project_goals'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProposalInterceptorDto
     */
    'project_outputs'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProposalInterceptorDto
     */
    'project_strengths'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProposalInterceptorDto
     */
    'project_risks'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProposalInterceptorDto
     */
    'pm_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProposalInterceptorDto
     */
    'pm_mobile'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProposalInterceptorDto
     */
    'pm_email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProposalInterceptorDto
     */
    'region'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProposalInterceptorDto
     */
    'governorate'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateProposalInterceptorDto
     */
    'amount_required_fsupport'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateProposalInterceptorDto
     */
    'detail_project_budgets'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CreateProposalInterceptorDto
     */
    'proposal_bank_information_id'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateProposalInterceptorDto
     */
    'project_timeline'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CreateProposalPaymentDto
 */
export interface CreateProposalPaymentDto {
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateProposalPaymentDto
     */
    'payments': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CreateProposalPaymentDto
     */
    'proposal_id': string;
}
/**
 * 
 * @export
 * @interface CreateRoomChatDto
 */
export interface CreateRoomChatDto {
    /**
     * 
     * @type {string}
     * @memberof CreateRoomChatDto
     */
    'correspondance_type': string;
    /**
     * 
     * @type {string}
     * @memberof CreateRoomChatDto
     */
    'partner_id': string;
}
/**
 * 
 * @export
 * @interface CreateScheduleDto
 */
export interface CreateScheduleDto {
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateScheduleDto
     */
    'payload': Array<string>;
}
/**
 * 
 * @export
 * @interface CreateTicketDto
 */
export interface CreateTicketDto {
    /**
     * 
     * @type {string}
     * @memberof CreateTicketDto
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof CreateTicketDto
     */
    'department': string;
    /**
     * 
     * @type {string}
     * @memberof CreateTicketDto
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface CreateTrackBudgetDto
 */
export interface CreateTrackBudgetDto {
    /**
     * 
     * @type {string}
     * @memberof CreateTrackBudgetDto
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof CreateTrackBudgetDto
     */
    'budget': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateTrackBudgetDto
     */
    'track_ids': Array<string>;
}
/**
 * 
 * @export
 * @interface CreateTrackDto
 */
export interface CreateTrackDto {
    /**
     * 
     * @type {string}
     * @memberof CreateTrackDto
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateTrackDto
     */
    'with_consultation': boolean;
}
/**
 * 
 * @export
 * @interface DeleteCommentsDto
 */
export interface DeleteCommentsDto {
    /**
     * 
     * @type {string}
     * @memberof DeleteCommentsDto
     */
    'organizationId': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DeleteCommentsDto
     */
    'commentIds': Array<string>;
}
/**
 * 
 * @export
 * @interface DeleteProposalFollowUpDto
 */
export interface DeleteProposalFollowUpDto {
    /**
     * 
     * @type {Array<string>}
     * @memberof DeleteProposalFollowUpDto
     */
    'id': Array<string>;
}
/**
 * 
 * @export
 * @interface DeleteTrackBudgetDto
 */
export interface DeleteTrackBudgetDto {
    /**
     * 
     * @type {string}
     * @memberof DeleteTrackBudgetDto
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface DonorDonateDto
 */
export interface DonorDonateDto {
    /**
     * 
     * @type {string}
     * @memberof DonorDonateDto
     */
    'organizationId': string;
    /**
     * 
     * @type {string}
     * @memberof DonorDonateDto
     */
    'stripeSuccessUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof DonorDonateDto
     */
    'stripeCancelUrl'?: string;
    /**
     * 
     * @type {object}
     * @memberof DonorDonateDto
     */
    'user'?: object;
    /**
     * 
     * @type {Array<string>}
     * @memberof DonorDonateDto
     */
    'donationDetails': Array<string>;
}
/**
 * 
 * @export
 * @interface DonorDonateItemDto
 */
export interface DonorDonateItemDto {
    /**
     * 
     * @type {string}
     * @memberof DonorDonateItemDto
     */
    'organizationId': string;
    /**
     * 
     * @type {string}
     * @memberof DonorDonateItemDto
     */
    'itemId': string;
    /**
     * 
     * @type {number}
     * @memberof DonorDonateItemDto
     */
    'qty': number;
}
/**
 * 
 * @export
 * @interface DonorPaymentSubmitDto
 */
export interface DonorPaymentSubmitDto {
    /**
     * 
     * @type {string}
     * @memberof DonorPaymentSubmitDto
     */
    'organizationId': string;
    /**
     * 
     * @type {string}
     * @memberof DonorPaymentSubmitDto
     */
    'projectId': string;
    /**
     * 
     * @type {string}
     * @memberof DonorPaymentSubmitDto
     */
    'campaignId': string;
    /**
     * 
     * @type {string}
     * @memberof DonorPaymentSubmitDto
     */
    'donorId': string;
    /**
     * 
     * @type {string}
     * @memberof DonorPaymentSubmitDto
     */
    'itemId': string;
    /**
     * 
     * @type {string}
     * @memberof DonorPaymentSubmitDto
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof DonorPaymentSubmitDto
     */
    'paymentGatewayId': string;
    /**
     * 
     * @type {number}
     * @memberof DonorPaymentSubmitDto
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof DonorPaymentSubmitDto
     */
    'currency': string;
    /**
     * 
     * @type {string}
     * @memberof DonorPaymentSubmitDto
     */
    'ipAddress': string;
}
/**
 * 
 * @export
 * @interface DonorUpdateProfileDto
 */
export interface DonorUpdateProfileDto {
    /**
     * 
     * @type {boolean}
     * @memberof DonorUpdateProfileDto
     */
    'isAnonymous': boolean;
    /**
     * 
     * @type {string}
     * @memberof DonorUpdateProfileDto
     */
    'about': string;
    /**
     * 
     * @type {string}
     * @memberof DonorUpdateProfileDto
     */
    'city': string;
    /**
     * 
     * @type {string}
     * @memberof DonorUpdateProfileDto
     */
    'state': string;
    /**
     * 
     * @type {string}
     * @memberof DonorUpdateProfileDto
     */
    'zipcode': string;
    /**
     * 
     * @type {string}
     * @memberof DonorUpdateProfileDto
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof DonorUpdateProfileDto
     */
    'country': string;
    /**
     * 
     * @type {string}
     * @memberof DonorUpdateProfileDto
     */
    'facebook': string;
    /**
     * 
     * @type {string}
     * @memberof DonorUpdateProfileDto
     */
    'twitter': string;
    /**
     * 
     * @type {string}
     * @memberof DonorUpdateProfileDto
     */
    'linkedin': string;
    /**
     * 
     * @type {string}
     * @memberof DonorUpdateProfileDto
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof DonorUpdateProfileDto
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof DonorUpdateProfileDto
     */
    'gender': string;
    /**
     * 
     * @type {string}
     * @memberof DonorUpdateProfileDto
     */
    'mobile': string;
    /**
     * 
     * @type {string}
     * @memberof DonorUpdateProfileDto
     */
    'profilePic': string;
    /**
     * 
     * @type {boolean}
     * @memberof DonorUpdateProfileDto
     */
    'isEmailChecklist': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DonorUpdateProfileDto
     */
    'anonymous': boolean;
}
/**
 * 
 * @export
 * @interface EditRequestByIdDto
 */
export interface EditRequestByIdDto {
    /**
     * 
     * @type {string}
     * @memberof EditRequestByIdDto
     */
    'requestId': string;
}
/**
 * 
 * @export
 * @interface ForgotPasswordRequestDto
 */
export interface ForgotPasswordRequestDto {
    /**
     * 
     * @type {string}
     * @memberof ForgotPasswordRequestDto
     */
    'selectLang'?: string;
    /**
     * 
     * @type {string}
     * @memberof ForgotPasswordRequestDto
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface GSRegisterRequestDto
 */
export interface GSRegisterRequestDto {
    /**
     * 
     * @type {string}
     * @memberof GSRegisterRequestDto
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof GSRegisterRequestDto
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof GSRegisterRequestDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof GSRegisterRequestDto
     */
    'password': string;
    /**
     * 
     * @type {object}
     * @memberof GSRegisterRequestDto
     */
    'organizationId'?: object;
    /**
     * 
     * @type {object}
     * @memberof GSRegisterRequestDto
     */
    'organizationEmail'?: object;
    /**
     * 
     * @type {string}
     * @memberof GSRegisterRequestDto
     */
    'domainUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof GSRegisterRequestDto
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof GSRegisterRequestDto
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof GSRegisterRequestDto
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof GSRegisterRequestDto
     */
    'mobile'?: string;
}
/**
 * 
 * @export
 * @interface GSResetPassword
 */
export interface GSResetPassword {
    /**
     * 
     * @type {object}
     * @memberof GSResetPassword
     */
    'organization_id'?: object;
    /**
     * 
     * @type {string}
     * @memberof GSResetPassword
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof GSResetPassword
     */
    'domain_url': string;
}
/**
 * 
 * @export
 * @interface GSVerifyUser
 */
export interface GSVerifyUser {
    /**
     * 
     * @type {string}
     * @memberof GSVerifyUser
     */
    'token': string;
    /**
     * 
     * @type {object}
     * @memberof GSVerifyUser
     */
    'organization_id'?: object;
    /**
     * 
     * @type {string}
     * @memberof GSVerifyUser
     */
    'donor_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GSVerifyUser
     */
    'donor_email'?: string;
    /**
     * 
     * @type {string}
     * @memberof GSVerifyUser
     */
    'domain_url'?: string;
}
/**
 * 
 * @export
 * @interface GetByIdDto
 */
export interface GetByIdDto {
    /**
     * 
     * @type {string}
     * @memberof GetByIdDto
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface HandleGoogleCallbackDto
 */
export interface HandleGoogleCallbackDto {
    /**
     * 
     * @type {string}
     * @memberof HandleGoogleCallbackDto
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface InvitationResponseDto
 */
export interface InvitationResponseDto {
    /**
     * 
     * @type {string}
     * @memberof InvitationResponseDto
     */
    'authCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof InvitationResponseDto
     */
    'appointmentId': string;
    /**
     * 
     * @type {string}
     * @memberof InvitationResponseDto
     */
    'response': string;
    /**
     * 
     * @type {string}
     * @memberof InvitationResponseDto
     */
    'reject_reason'?: string;
}
/**
 * 
 * @export
 * @interface ItemSetDeletedFlagDto
 */
export interface ItemSetDeletedFlagDto {
    /**
     * 
     * @type {Array<string>}
     * @memberof ItemSetDeletedFlagDto
     */
    'itemIds': Array<string>;
}
/**
 * 
 * @export
 * @interface LoginRequestDto
 */
export interface LoginRequestDto {
    /**
     * 
     * @type {string}
     * @memberof LoginRequestDto
     */
    'loginId': string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequestDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequestDto
     */
    'organizationId'?: string;
}
/**
 * 
 * @export
 * @interface MessageDto
 */
export interface MessageDto {
    /**
     * 
     * @type {string}
     * @memberof MessageDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MessageDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof MessageDto
     */
    'help_message': string;
    /**
     * 
     * @type {object}
     * @memberof MessageDto
     */
    'organizationId'?: object;
    /**
     * 
     * @type {Array<string>}
     * @memberof MessageDto
     */
    'files'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ModeratorChangeStatePayload
 */
export interface ModeratorChangeStatePayload {
    /**
     * 
     * @type {string}
     * @memberof ModeratorChangeStatePayload
     */
    'track_id': string;
    /**
     * 
     * @type {string}
     * @memberof ModeratorChangeStatePayload
     */
    'supervisor_id'?: string;
}
/**
 * 
 * @export
 * @interface PaymentGateWayDto
 */
export interface PaymentGateWayDto {
    /**
     * 
     * @type {object}
     * @memberof PaymentGateWayDto
     */
    'organizationId': object;
    /**
     * 
     * @type {string}
     * @memberof PaymentGateWayDto
     */
    'defaultCurrency': string;
    /**
     * 
     * @type {string}
     * @memberof PaymentGateWayDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PaymentGateWayDto
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentGateWayDto
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentGateWayDto
     */
    'payementMethod'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentGateWayDto
     */
    'profileId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentGateWayDto
     */
    'profileName'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentGateWayDto
     */
    'apiKey': string;
    /**
     * 
     * @type {string}
     * @memberof PaymentGateWayDto
     */
    'clientKey': string;
    /**
     * 
     * @type {string}
     * @memberof PaymentGateWayDto
     */
    'serverKey': string;
    /**
     * 
     * @type {string}
     * @memberof PaymentGateWayDto
     */
    'isActive'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentGateWayDto
     */
    'isDeleted'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentGateWayDto
     */
    'isLiveMode'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentGateWayDto
     */
    'isTestMode'?: string;
}
/**
 * 
 * @export
 * @interface PaymentPaytabsCallbackDto
 */
export interface PaymentPaytabsCallbackDto {
    /**
     * 
     * @type {string}
     * @memberof PaymentPaytabsCallbackDto
     */
    'tran_ref': string;
    /**
     * 
     * @type {string}
     * @memberof PaymentPaytabsCallbackDto
     */
    'cart_id': string;
    /**
     * 
     * @type {string}
     * @memberof PaymentPaytabsCallbackDto
     */
    'cart_description': string;
    /**
     * 
     * @type {string}
     * @memberof PaymentPaytabsCallbackDto
     */
    'cart_currency': string;
    /**
     * 
     * @type {string}
     * @memberof PaymentPaytabsCallbackDto
     */
    'cart_amount': string;
    /**
     * 
     * @type {string}
     * @memberof PaymentPaytabsCallbackDto
     */
    'tran_currency': string;
    /**
     * 
     * @type {string}
     * @memberof PaymentPaytabsCallbackDto
     */
    'tran_total': string;
    /**
     * 
     * @type {object}
     * @memberof PaymentPaytabsCallbackDto
     */
    'payment_result'?: object;
    /**
     * 
     * @type {object}
     * @memberof PaymentPaytabsCallbackDto
     */
    'payment_info'?: object;
    /**
     * 
     * @type {object}
     * @memberof PaymentPaytabsCallbackDto
     */
    'customer_details'?: object;
    /**
     * 
     * @type {object}
     * @memberof PaymentPaytabsCallbackDto
     */
    'shipping_details'?: object;
}
/**
 * 
 * @export
 * @interface PaymentPaytabsDto
 */
export interface PaymentPaytabsDto {
    /**
     * 
     * @type {object}
     * @memberof PaymentPaytabsDto
     */
    'organizationId': object;
    /**
     * 
     * @type {string}
     * @memberof PaymentPaytabsDto
     */
    'currency': string;
    /**
     * 
     * @type {object}
     * @memberof PaymentPaytabsDto
     */
    'campaignId'?: object;
    /**
     * 
     * @type {string}
     * @memberof PaymentPaytabsDto
     */
    'donorId': string;
    /**
     * 
     * @type {string}
     * @memberof PaymentPaytabsDto
     */
    'type'?: string;
    /**
     * 
     * @type {number}
     * @memberof PaymentPaytabsDto
     */
    'total_amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaymentPaytabsDto
     */
    'success_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentPaytabsDto
     */
    'cancel_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentPaytabsDto
     */
    'price'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentPaytabsDto
     */
    'quantity'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PaymentPaytabsDto
     */
    'isAnonymous'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PaymentPaytabsDto
     */
    'isEmailChecklist'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PaymentPaytabsDto
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaymentPaytabsDto
     */
    'paymentMethodType'?: string;
    /**
     * 
     * @type {number}
     * @memberof PaymentPaytabsDto
     */
    'extraAmount'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof PaymentPaytabsDto
     */
    'zakatLogs'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PaymentPaytabsDto
     */
    'campaignTitle'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PaymentPaytabsDto
     */
    'data_basket'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ProjectCreateDto
 */
export interface ProjectCreateDto {
    /**
     * 
     * @type {string}
     * @memberof ProjectCreateDto
     */
    'organizationId': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectCreateDto
     */
    'operatorUserId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectCreateDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectCreateDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectCreateDto
     */
    'country': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectCreateDto
     */
    'city': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectCreateDto
     */
    'address': string;
    /**
     * 
     * @type {CoordiateLocation}
     * @memberof ProjectCreateDto
     */
    'coordinate': CoordiateLocation;
    /**
     * 
     * @type {number}
     * @memberof ProjectCreateDto
     */
    'diameterSize': number;
    /**
     * 
     * @type {number}
     * @memberof ProjectCreateDto
     */
    'prayerSize': number;
    /**
     * 
     * @type {number}
     * @memberof ProjectCreateDto
     */
    'toiletSize': number;
    /**
     * 
     * @type {string}
     * @memberof ProjectCreateDto
     */
    'hasAc': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectCreateDto
     */
    'hasClassroom': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectCreateDto
     */
    'hasParking': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectCreateDto
     */
    'hasGreenSpace': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectCreateDto
     */
    'hasFemaleSection': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProjectCreateDto
     */
    'nearByPlaces'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProjectCreateDto
     */
    'images': Array<string>;
}
/**
 * 
 * @export
 * @interface ProjectManagerChangeStatePayload
 */
export interface ProjectManagerChangeStatePayload {
    /**
     * 
     * @type {boolean}
     * @memberof ProjectManagerChangeStatePayload
     */
    'inclu_or_exclu'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ProjectManagerChangeStatePayload
     */
    'vat_percentage'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProjectManagerChangeStatePayload
     */
    'support_goal_id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ProjectManagerChangeStatePayload
     */
    'vat'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProjectManagerChangeStatePayload
     */
    'support_outputs'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProjectManagerChangeStatePayload
     */
    'number_of_payments_by_supervisor': number;
    /**
     * 
     * @type {number}
     * @memberof ProjectManagerChangeStatePayload
     */
    'fsupport_by_supervisor': number;
    /**
     * 
     * @type {boolean}
     * @memberof ProjectManagerChangeStatePayload
     */
    'does_an_agreement'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProjectManagerChangeStatePayload
     */
    'need_picture'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProjectManagerChangeStatePayload
     */
    'closing_report'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProjectManagerChangeStatePayload
     */
    'support_type'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProjectManagerChangeStatePayload
     */
    'clause'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectManagerChangeStatePayload
     */
    'clasification_field'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProjectManagerChangeStatePayload
     */
    'created_proposal_budget'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProjectManagerChangeStatePayload
     */
    'updated_proposal_budget'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProjectManagerChangeStatePayload
     */
    'deleted_proposal_budget'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProjectManagerChangeStatePayload
     */
    'accreditation_type_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectManagerChangeStatePayload
     */
    'chairman_of_board_of_directors'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectManagerChangeStatePayload
     */
    'most_clents_projects'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ProjectManagerChangeStatePayload
     */
    'been_supported_before'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProjectManagerChangeStatePayload
     */
    'added_value'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectManagerChangeStatePayload
     */
    'reasons_to_accept'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProjectManagerChangeStatePayload
     */
    'target_group_num'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProjectManagerChangeStatePayload
     */
    'target_group_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectManagerChangeStatePayload
     */
    'target_group_age'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ProjectManagerChangeStatePayload
     */
    'been_made_before'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProjectManagerChangeStatePayload
     */
    'remote_or_insite'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProjectManagerChangeStatePayload
     */
    'created_recommended_support'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProjectManagerChangeStatePayload
     */
    'updated_recommended_support'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProjectManagerChangeStatePayload
     */
    'deleted_recommended_support'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ProjectSetDeletedFlagDto
 */
export interface ProjectSetDeletedFlagDto {
    /**
     * 
     * @type {Array<string>}
     * @memberof ProjectSetDeletedFlagDto
     */
    'projectIds': Array<string>;
}
/**
 * 
 * @export
 * @interface ProjectStatusUpdateDto
 */
export interface ProjectStatusUpdateDto {
    /**
     * 
     * @type {string}
     * @memberof ProjectStatusUpdateDto
     */
    'organizationId': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectStatusUpdateDto
     */
    'projectId': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectStatusUpdateDto
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectStatusUpdateDto
     */
    'rejectReason'?: string;
}
/**
 * 
 * @export
 * @interface ProjectUpdateDto
 */
export interface ProjectUpdateDto {
    /**
     * 
     * @type {string}
     * @memberof ProjectUpdateDto
     */
    'organizationId': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectUpdateDto
     */
    'operatorUserId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectUpdateDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectUpdateDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectUpdateDto
     */
    'country': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectUpdateDto
     */
    'city': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectUpdateDto
     */
    'address': string;
    /**
     * 
     * @type {CoordiateLocation}
     * @memberof ProjectUpdateDto
     */
    'coordinate': CoordiateLocation;
    /**
     * 
     * @type {number}
     * @memberof ProjectUpdateDto
     */
    'diameterSize': number;
    /**
     * 
     * @type {number}
     * @memberof ProjectUpdateDto
     */
    'prayerSize': number;
    /**
     * 
     * @type {number}
     * @memberof ProjectUpdateDto
     */
    'toiletSize': number;
    /**
     * 
     * @type {string}
     * @memberof ProjectUpdateDto
     */
    'hasAc': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectUpdateDto
     */
    'hasClassroom': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectUpdateDto
     */
    'hasParking': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectUpdateDto
     */
    'hasGreenSpace': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectUpdateDto
     */
    'hasFemaleSection': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProjectUpdateDto
     */
    'nearByPlaces'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProjectUpdateDto
     */
    'updatedImage': Array<string>;
}
/**
 * 
 * @export
 * @interface ProposalDeleteDraftDto
 */
export interface ProposalDeleteDraftDto {
    /**
     * 
     * @type {string}
     * @memberof ProposalDeleteDraftDto
     */
    'proposal_id': string;
}
/**
 * 
 * @export
 * @interface ProposalSaveDraftInterceptorDto
 */
export interface ProposalSaveDraftInterceptorDto {
    /**
     * 
     * @type {string}
     * @memberof ProposalSaveDraftInterceptorDto
     */
    'proposal_id': string;
    /**
     * 
     * @type {string}
     * @memberof ProposalSaveDraftInterceptorDto
     */
    'project_name': string;
    /**
     * 
     * @type {string}
     * @memberof ProposalSaveDraftInterceptorDto
     */
    'project_idea': string;
    /**
     * 
     * @type {string}
     * @memberof ProposalSaveDraftInterceptorDto
     */
    'project_location': string;
    /**
     * 
     * @type {string}
     * @memberof ProposalSaveDraftInterceptorDto
     */
    'project_implement_date': string;
    /**
     * 
     * @type {number}
     * @memberof ProposalSaveDraftInterceptorDto
     */
    'execution_time': number;
    /**
     * 
     * @type {string}
     * @memberof ProposalSaveDraftInterceptorDto
     */
    'project_beneficiaries': string;
    /**
     * 
     * @type {object}
     * @memberof ProposalSaveDraftInterceptorDto
     */
    'letter_ofsupport_req'?: object;
    /**
     * 
     * @type {object}
     * @memberof ProposalSaveDraftInterceptorDto
     */
    'project_attachments'?: object;
    /**
     * 
     * @type {number}
     * @memberof ProposalSaveDraftInterceptorDto
     */
    'num_ofproject_binicficiaries'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProposalSaveDraftInterceptorDto
     */
    'project_goals'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProposalSaveDraftInterceptorDto
     */
    'project_outputs'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProposalSaveDraftInterceptorDto
     */
    'project_strengths'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProposalSaveDraftInterceptorDto
     */
    'project_risks'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProposalSaveDraftInterceptorDto
     */
    'pm_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProposalSaveDraftInterceptorDto
     */
    'pm_mobile'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProposalSaveDraftInterceptorDto
     */
    'pm_email'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProposalSaveDraftInterceptorDto
     */
    'region'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProposalSaveDraftInterceptorDto
     */
    'governorate'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProposalSaveDraftInterceptorDto
     */
    'amount_required_fsupport'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProposalSaveDraftInterceptorDto
     */
    'detail_project_budgets'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProposalSaveDraftInterceptorDto
     */
    'proposal_bank_information_id'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProposalSaveDraftInterceptorDto
     */
    'project_timeline'?: Array<string>;
}
/**
 * 
 * @export
 * @interface QaProposalCreateDto
 */
export interface QaProposalCreateDto {
    /**
     * 
     * @type {string}
     * @memberof QaProposalCreateDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof QaProposalCreateDto
     */
    'client_user_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof QaProposalCreateDto
     */
    'supervisor_id'?: string;
}
/**
 * 
 * @export
 * @interface QaProposalCreateSupervisorDto
 */
export interface QaProposalCreateSupervisorDto {
    /**
     * 
     * @type {string}
     * @memberof QaProposalCreateSupervisorDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof QaProposalCreateSupervisorDto
     */
    'client_user_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof QaProposalCreateSupervisorDto
     */
    'supervisor_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof QaProposalCreateSupervisorDto
     */
    'track_id'?: string;
}
/**
 * 
 * @export
 * @interface RegisterClient
 */
export interface RegisterClient {
    /**
     * 
     * @type {string}
     * @memberof RegisterClient
     */
    'selectLang'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterClient
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterClient
     */
    'license_number': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterClient
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterClient
     */
    'employee_name': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterClient
     */
    'employee_path'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterClient
     */
    'authority': string;
    /**
     * 
     * @type {TenderFilePayload}
     * @memberof RegisterClient
     */
    'board_ofdec_file': TenderFilePayload;
    /**
     * 
     * @type {string}
     * @memberof RegisterClient
     */
    'center_administration'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterClient
     */
    'ceo_mobile': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterClient
     */
    'ceo_name': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterClient
     */
    'chairman_mobile': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterClient
     */
    'chairman_name': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterClient
     */
    'date_of_esthablistmen': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterClient
     */
    'data_entry_mail': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterClient
     */
    'entity_mobile': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterClient
     */
    'governorate': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterClient
     */
    'headquarters': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterClient
     */
    'license_expired': string;
    /**
     * 
     * @type {TenderFilePayload}
     * @memberof RegisterClient
     */
    'license_file': TenderFilePayload;
    /**
     * 
     * @type {string}
     * @memberof RegisterClient
     */
    'license_issue_date': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterClient
     */
    'data_entry_mobile': string;
    /**
     * 
     * @type {number}
     * @memberof RegisterClient
     */
    'num_of_beneficiaries': number;
    /**
     * 
     * @type {number}
     * @memberof RegisterClient
     */
    'num_of_employed_facility': number;
    /**
     * 
     * @type {string}
     * @memberof RegisterClient
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterClient
     */
    'region': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterClient
     */
    'twitter_acount': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterClient
     */
    'website': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterClient
     */
    'entity': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterClient
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterClient
     */
    'data_entry_name': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterClient
     */
    'client_field': string;
    /**
     * 
     * @type {BankData}
     * @memberof RegisterClient
     */
    'bank_informations': BankData;
}
/**
 * 
 * @export
 * @interface RegisterFileUpload
 */
export interface RegisterFileUpload {
    /**
     * 
     * @type {string}
     * @memberof RegisterFileUpload
     */
    'base64Data': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterFileUpload
     */
    'fullName': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterFileUpload
     */
    'imageExtension': string;
    /**
     * 
     * @type {number}
     * @memberof RegisterFileUpload
     */
    'size': number;
}
/**
 * 
 * @export
 * @interface RegisterOrganizationDto
 */
export interface RegisterOrganizationDto {
    /**
     * 
     * @type {string}
     * @memberof RegisterOrganizationDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterOrganizationDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterOrganizationDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterOrganizationDto
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterOrganizationDto
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterOrganizationDto
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterOrganizationDto
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterOrganizationDto
     */
    'selectedIndustry'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterOrganizationDto
     */
    'organizationMission'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterOrganizationDto
     */
    'organizationName'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterOrganizationDto
     */
    'organizationWebsite'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterOrganizationDto
     */
    'locationOrganization'?: string;
    /**
     * 
     * @type {RegisterFileUpload}
     * @memberof RegisterOrganizationDto
     */
    'imageLogo'?: RegisterFileUpload;
    /**
     * 
     * @type {string}
     * @memberof RegisterOrganizationDto
     */
    'useCurrency'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterOrganizationDto
     */
    'paymentGateway'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterOrganizationDto
     */
    'timeZone'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterOrganizationDto
     */
    'domainUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterOrganizationDto
     */
    'ownerUserId'?: string;
}
/**
 * 
 * @export
 * @interface RegisterRequestDto
 */
export interface RegisterRequestDto {
    /**
     * 
     * @type {string}
     * @memberof RegisterRequestDto
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequestDto
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequestDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequestDto
     */
    'password': string;
    /**
     * 
     * @type {object}
     * @memberof RegisterRequestDto
     */
    'organizationId'?: object;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequestDto
     */
    'country': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequestDto
     */
    'state': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequestDto
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequestDto
     */
    'mobile': string;
}
/**
 * 
 * @export
 * @interface RegisterTenderDto
 */
export interface RegisterTenderDto {
    /**
     * 
     * @type {RegisterClient}
     * @memberof RegisterTenderDto
     */
    'data': RegisterClient;
}
/**
 * 
 * @export
 * @interface RejectEditRequestDto
 */
export interface RejectEditRequestDto {
    /**
     * 
     * @type {string}
     * @memberof RejectEditRequestDto
     */
    'requestId': string;
    /**
     * 
     * @type {string}
     * @memberof RejectEditRequestDto
     */
    'reject_reason': string;
}
/**
 * 
 * @export
 * @interface SendAmandementDto
 */
export interface SendAmandementDto {
    /**
     * 
     * @type {string}
     * @memberof SendAmandementDto
     */
    'selectLang'?: string;
    /**
     * 
     * @type {string}
     * @memberof SendAmandementDto
     */
    'proposal_id': string;
    /**
     * 
     * @type {string}
     * @memberof SendAmandementDto
     */
    'notes': string;
    /**
     * 
     * @type {string}
     * @memberof SendAmandementDto
     */
    'project_goals'?: string;
    /**
     * 
     * @type {string}
     * @memberof SendAmandementDto
     */
    'project_outputs'?: string;
    /**
     * 
     * @type {string}
     * @memberof SendAmandementDto
     */
    'project_strengths'?: string;
    /**
     * 
     * @type {string}
     * @memberof SendAmandementDto
     */
    'project_risks'?: string;
    /**
     * 
     * @type {string}
     * @memberof SendAmandementDto
     */
    'project_idea'?: string;
    /**
     * 
     * @type {string}
     * @memberof SendAmandementDto
     */
    'project_location'?: string;
    /**
     * 
     * @type {string}
     * @memberof SendAmandementDto
     */
    'project_implement_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof SendAmandementDto
     */
    'project_beneficiaries'?: string;
    /**
     * 
     * @type {string}
     * @memberof SendAmandementDto
     */
    'num_ofproject_binicficiaries'?: string;
    /**
     * 
     * @type {string}
     * @memberof SendAmandementDto
     */
    'amount_required_fsupport'?: string;
    /**
     * 
     * @type {string}
     * @memberof SendAmandementDto
     */
    'letter_ofsupport_req'?: string;
    /**
     * 
     * @type {string}
     * @memberof SendAmandementDto
     */
    'project_attachments'?: string;
    /**
     * 
     * @type {string}
     * @memberof SendAmandementDto
     */
    'timelines'?: string;
}
/**
 * 
 * @export
 * @interface SendClosingReportDto
 */
export interface SendClosingReportDto {
    /**
     * 
     * @type {string}
     * @memberof SendClosingReportDto
     */
    'id': string;
    /**
     * 
     * @type {boolean}
     * @memberof SendClosingReportDto
     */
    'send': boolean;
}
/**
 * 
 * @export
 * @interface SendEmailVerifDto
 */
export interface SendEmailVerifDto {
    /**
     * 
     * @type {string}
     * @memberof SendEmailVerifDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof SendEmailVerifDto
     */
    'selectLang'?: string;
}
/**
 * 
 * @export
 * @interface SendNewEmailDto
 */
export interface SendNewEmailDto {
    /**
     * 
     * @type {string}
     * @memberof SendNewEmailDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof SendNewEmailDto
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof SendNewEmailDto
     */
    'content': string;
    /**
     * 
     * @type {string}
     * @memberof SendNewEmailDto
     */
    'receiver_id': string;
}
/**
 * 
 * @export
 * @interface SendRevisionDto
 */
export interface SendRevisionDto {
    /**
     * 
     * @type {string}
     * @memberof SendRevisionDto
     */
    'proposal_id': string;
    /**
     * 
     * @type {string}
     * @memberof SendRevisionDto
     */
    'project_goals'?: string;
    /**
     * 
     * @type {string}
     * @memberof SendRevisionDto
     */
    'project_outputs'?: string;
    /**
     * 
     * @type {string}
     * @memberof SendRevisionDto
     */
    'project_strengths'?: string;
    /**
     * 
     * @type {string}
     * @memberof SendRevisionDto
     */
    'project_risks'?: string;
    /**
     * 
     * @type {string}
     * @memberof SendRevisionDto
     */
    'project_idea'?: string;
    /**
     * 
     * @type {string}
     * @memberof SendRevisionDto
     */
    'project_location'?: string;
    /**
     * 
     * @type {string}
     * @memberof SendRevisionDto
     */
    'project_implement_date'?: string;
    /**
     * 
     * @type {string}
     * @memberof SendRevisionDto
     */
    'project_beneficiaries'?: string;
    /**
     * 
     * @type {number}
     * @memberof SendRevisionDto
     */
    'num_ofproject_binicficiaries'?: number;
    /**
     * 
     * @type {number}
     * @memberof SendRevisionDto
     */
    'amount_required_fsupport'?: number;
    /**
     * 
     * @type {object}
     * @memberof SendRevisionDto
     */
    'letter_ofsupport_req'?: object;
    /**
     * 
     * @type {object}
     * @memberof SendRevisionDto
     */
    'project_attachments'?: object;
    /**
     * 
     * @type {Array<string>}
     * @memberof SendRevisionDto
     */
    'detail_project_budgets'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof SendRevisionDto
     */
    'project_timeline'?: Array<string>;
}
/**
 * 
 * @export
 * @interface SubmitChangePasswordDto
 */
export interface SubmitChangePasswordDto {
    /**
     * 
     * @type {string}
     * @memberof SubmitChangePasswordDto
     */
    'changePasswordId': string;
    /**
     * 
     * @type {string}
     * @memberof SubmitChangePasswordDto
     */
    'oldPassword'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubmitChangePasswordDto
     */
    'newPassword': string;
}
/**
 * 
 * @export
 * @interface SupervisorChangeStatePayload
 */
export interface SupervisorChangeStatePayload {
    /**
     * 
     * @type {boolean}
     * @memberof SupervisorChangeStatePayload
     */
    'inclu_or_exclu'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof SupervisorChangeStatePayload
     */
    'vat_percentage'?: number;
    /**
     * 
     * @type {string}
     * @memberof SupervisorChangeStatePayload
     */
    'support_goal_id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SupervisorChangeStatePayload
     */
    'vat'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SupervisorChangeStatePayload
     */
    'support_outputs'?: string;
    /**
     * 
     * @type {number}
     * @memberof SupervisorChangeStatePayload
     */
    'number_of_payments_by_supervisor'?: number;
    /**
     * 
     * @type {number}
     * @memberof SupervisorChangeStatePayload
     */
    'fsupport_by_supervisor'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof SupervisorChangeStatePayload
     */
    'does_an_agreement'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SupervisorChangeStatePayload
     */
    'need_picture'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SupervisorChangeStatePayload
     */
    'closing_report'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SupervisorChangeStatePayload
     */
    'support_type'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SupervisorChangeStatePayload
     */
    'clause'?: string;
    /**
     * 
     * @type {string}
     * @memberof SupervisorChangeStatePayload
     */
    'clasification_field'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SupervisorChangeStatePayload
     */
    'created_proposal_budget'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof SupervisorChangeStatePayload
     */
    'updated_proposal_budget'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof SupervisorChangeStatePayload
     */
    'deleted_proposal_budget'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SupervisorChangeStatePayload
     */
    'accreditation_type_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SupervisorChangeStatePayload
     */
    'chairman_of_board_of_directors'?: string;
    /**
     * 
     * @type {string}
     * @memberof SupervisorChangeStatePayload
     */
    'most_clents_projects'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SupervisorChangeStatePayload
     */
    'been_supported_before'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SupervisorChangeStatePayload
     */
    'added_value'?: string;
    /**
     * 
     * @type {string}
     * @memberof SupervisorChangeStatePayload
     */
    'reasons_to_accept'?: string;
    /**
     * 
     * @type {number}
     * @memberof SupervisorChangeStatePayload
     */
    'target_group_num'?: number;
    /**
     * 
     * @type {string}
     * @memberof SupervisorChangeStatePayload
     */
    'target_group_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof SupervisorChangeStatePayload
     */
    'target_group_age'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SupervisorChangeStatePayload
     */
    'been_made_before'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SupervisorChangeStatePayload
     */
    'remote_or_insite'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SupervisorChangeStatePayload
     */
    'created_recommended_support'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof SupervisorChangeStatePayload
     */
    'updated_recommended_support'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof SupervisorChangeStatePayload
     */
    'deleted_recommended_support'?: Array<string>;
}
/**
 * 
 * @export
 * @interface TenderCreateUserDto
 */
export interface TenderCreateUserDto {
    /**
     * 
     * @type {string}
     * @memberof TenderCreateUserDto
     */
    'selectLang'?: string;
    /**
     * 
     * @type {string}
     * @memberof TenderCreateUserDto
     */
    'employee_name': string;
    /**
     * 
     * @type {string}
     * @memberof TenderCreateUserDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof TenderCreateUserDto
     */
    'mobile_number': string;
    /**
     * 
     * @type {string}
     * @memberof TenderCreateUserDto
     */
    'email': string;
    /**
     * 
     * @type {boolean}
     * @memberof TenderCreateUserDto
     */
    'activate_user': boolean;
    /**
     * 
     * @type {string}
     * @memberof TenderCreateUserDto
     */
    'track_id': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof TenderCreateUserDto
     */
    'user_roles': Array<string>;
}
/**
 * 
 * @export
 * @interface TenderDeleteUserDto
 */
export interface TenderDeleteUserDto {
    /**
     * 
     * @type {string}
     * @memberof TenderDeleteUserDto
     */
    'user_id': string;
}
/**
 * 
 * @export
 * @interface TenderFilePayload
 */
export interface TenderFilePayload {
    /**
     * 
     * @type {string}
     * @memberof TenderFilePayload
     */
    'base64Data': string;
    /**
     * 
     * @type {string}
     * @memberof TenderFilePayload
     */
    'fullName': string;
    /**
     * 
     * @type {string}
     * @memberof TenderFilePayload
     */
    'fileExtension': string;
    /**
     * 
     * @type {number}
     * @memberof TenderFilePayload
     */
    'size': number;
}
/**
 * 
 * @export
 * @interface ToogleReadMessageDto
 */
export interface ToogleReadMessageDto {
    /**
     * 
     * @type {string}
     * @memberof ToogleReadMessageDto
     */
    'roomId': string;
    /**
     * 
     * @type {string}
     * @memberof ToogleReadMessageDto
     */
    'messageId'?: string;
}
/**
 * 
 * @export
 * @interface UpdateBeneficiaryDto
 */
export interface UpdateBeneficiaryDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateBeneficiaryDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateBeneficiaryDto
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateBeneficiaryDto
     */
    'is_deleted'?: boolean;
}
/**
 * 
 * @export
 * @interface UpdateCampaignStatusDto
 */
export interface UpdateCampaignStatusDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateCampaignStatusDto
     */
    'organizationId': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCampaignStatusDto
     */
    'campaignId': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCampaignStatusDto
     */
    'vendorId': string;
}
/**
 * 
 * @export
 * @interface UpdateHrDto
 */
export interface UpdateHrDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateHrDto
     */
    'hrName'?: string;
}
/**
 * 
 * @export
 * @interface UpdatePaymentDto
 */
export interface UpdatePaymentDto {
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentDto
     */
    'payment_id': string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentDto
     */
    'action': string;
    /**
     * 
     * @type {CreateChequeDto}
     * @memberof UpdatePaymentDto
     */
    'cheque'?: CreateChequeDto;
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentDto
     */
    'notes'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePaymentDto
     */
    'last_payment_receipt_url'?: string;
}
/**
 * 
 * @export
 * @interface UpdateProfileDto
 */
export interface UpdateProfileDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileDto
     */
    'employee_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileDto
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileDto
     */
    'mobile_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileDto
     */
    'new_password'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateProfileDto
     */
    'current_password': string;
}
/**
 * 
 * @export
 * @interface UpdateTrackBudgetDto
 */
export interface UpdateTrackBudgetDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateTrackBudgetDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateTrackBudgetDto
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof UpdateTrackBudgetDto
     */
    'budget': number;
}
/**
 * 
 * @export
 * @interface UpdateTrackDto
 */
export interface UpdateTrackDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateTrackDto
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateTrackDto
     */
    'with_consultation'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UpdateTrackDto
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface UpdateUserDto
 */
export interface UpdateUserDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'selectLang'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateUserDto
     */
    'activate_user': boolean;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'employee_name': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'track_id': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'mobile_number': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateUserDto
     */
    'user_roles': Array<string>;
}
/**
 * 
 * @export
 * @interface UpsertUserPermission
 */
export interface UpsertUserPermission {
    /**
     * 
     * @type {string}
     * @memberof UpsertUserPermission
     */
    'organizationId': string;
    /**
     * 
     * @type {string}
     * @memberof UpsertUserPermission
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface UserStatusUpdateDto
 */
export interface UserStatusUpdateDto {
    /**
     * 
     * @type {string}
     * @memberof UserStatusUpdateDto
     */
    'selectLang'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserStatusUpdateDto
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof UserStatusUpdateDto
     */
    'user_id': string;
}

/**
 * AdvertisementsApi - axios parameter creator
 * @export
 */
export const AdvertisementsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary creating advertisement either for internal or external
         * @param {AdvertisementCreateDto} advertisementCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (advertisementCreateDto: AdvertisementCreateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertisementCreateDto' is not null or undefined
            assertParamExists('create', 'advertisementCreateDto', advertisementCreateDto)
            const localVarPath = `/advertisements/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(advertisementCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMany: async (page?: number, limit?: number, sort?: string, sortingField?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/advertisements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updating advertisement either for internal or external
         * @param {AdvertisementCreateDto} advertisementCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (advertisementCreateDto: AdvertisementCreateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advertisementCreateDto' is not null or undefined
            assertParamExists('update', 'advertisementCreateDto', advertisementCreateDto)
            const localVarPath = `/advertisements/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(advertisementCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdvertisementsApi - functional programming interface
 * @export
 */
export const AdvertisementsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdvertisementsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary creating advertisement either for internal or external
         * @param {AdvertisementCreateDto} advertisementCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(advertisementCreateDto: AdvertisementCreateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(advertisementCreateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findMany(page?: number, limit?: number, sort?: string, sortingField?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findMany(page, limit, sort, sortingField, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updating advertisement either for internal or external
         * @param {AdvertisementCreateDto} advertisementCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(advertisementCreateDto: AdvertisementCreateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(advertisementCreateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdvertisementsApi - factory interface
 * @export
 */
export const AdvertisementsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdvertisementsApiFp(configuration)
    return {
        /**
         * 
         * @summary creating advertisement either for internal or external
         * @param {AdvertisementsApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: AdvertisementsApiCreateRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.create(requestParameters.advertisementCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AdvertisementsApiFindManyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMany(requestParameters: AdvertisementsApiFindManyRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.findMany(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updating advertisement either for internal or external
         * @param {AdvertisementsApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters: AdvertisementsApiUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.update(requestParameters.advertisementCreateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for create operation in AdvertisementsApi.
 * @export
 * @interface AdvertisementsApiCreateRequest
 */
export interface AdvertisementsApiCreateRequest {
    /**
     * 
     * @type {AdvertisementCreateDto}
     * @memberof AdvertisementsApiCreate
     */
    readonly advertisementCreateDto: AdvertisementCreateDto
}

/**
 * Request parameters for findMany operation in AdvertisementsApi.
 * @export
 * @interface AdvertisementsApiFindManyRequest
 */
export interface AdvertisementsApiFindManyRequest {
    /**
     * 
     * @type {number}
     * @memberof AdvertisementsApiFindMany
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AdvertisementsApiFindMany
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof AdvertisementsApiFindMany
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof AdvertisementsApiFindMany
     */
    readonly sortingField?: string
}

/**
 * Request parameters for update operation in AdvertisementsApi.
 * @export
 * @interface AdvertisementsApiUpdateRequest
 */
export interface AdvertisementsApiUpdateRequest {
    /**
     * 
     * @type {AdvertisementCreateDto}
     * @memberof AdvertisementsApiUpdate
     */
    readonly advertisementCreateDto: AdvertisementCreateDto
}

/**
 * AdvertisementsApi - object-oriented interface
 * @export
 * @class AdvertisementsApi
 * @extends {BaseAPI}
 */
export class AdvertisementsApi extends BaseAPI {
    /**
     * 
     * @summary creating advertisement either for internal or external
     * @param {AdvertisementsApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvertisementsApi
     */
    public create(requestParameters: AdvertisementsApiCreateRequest, options?: AxiosRequestConfig) {
        return AdvertisementsApiFp(this.configuration).create(requestParameters.advertisementCreateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AdvertisementsApiFindManyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvertisementsApi
     */
    public findMany(requestParameters: AdvertisementsApiFindManyRequest = {}, options?: AxiosRequestConfig) {
        return AdvertisementsApiFp(this.configuration).findMany(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updating advertisement either for internal or external
     * @param {AdvertisementsApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvertisementsApi
     */
    public update(requestParameters: AdvertisementsApiUpdateRequest, options?: AxiosRequestConfig) {
        return AdvertisementsApiFp(this.configuration).update(requestParameters.advertisementCreateDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CampaignApi - axios parameter creator
 * @export
 */
export const CampaignApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Operator/Manager approve for vendor request
         * @param {UpdateCampaignStatusDto} updateCampaignStatusDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveCampaign: async (updateCampaignStatusDto: UpdateCampaignStatusDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateCampaignStatusDto' is not null or undefined
            assertParamExists('approveCampaign', 'updateCampaignStatusDto', updateCampaignStatusDto)
            const localVarPath = `/campaign/operator/approve`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCampaignStatusDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CampaignCreateDto} campaignCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campaignCreate: async (campaignCreateDto: CampaignCreateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignCreateDto' is not null or undefined
            assertParamExists('campaignCreate', 'campaignCreateDto', campaignCreateDto)
            const localVarPath = `/campaign/campaignCreate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(campaignCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update campaign
         * @param {string} campaignId 
         * @param {CampaignUpdateDto} campaignUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campaignUpdate: async (campaignId: string, campaignUpdateDto: CampaignUpdateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('campaignUpdate', 'campaignId', campaignId)
            // verify required parameter 'campaignUpdateDto' is not null or undefined
            assertParamExists('campaignUpdate', 'campaignUpdateDto', campaignUpdateDto)
            const localVarPath = `/campaign/campaignUpdate/{campaignId}`
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(campaignUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list all campaign
         * @param {string} organizationId 
         * @param {string} isFinished 
         * @param {string} sortPublished 
         * @param {string} sortFinished 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll: async (organizationId: string, isFinished: string, sortPublished: string, sortFinished: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('findAll', 'organizationId', organizationId)
            // verify required parameter 'isFinished' is not null or undefined
            assertParamExists('findAll', 'isFinished', isFinished)
            // verify required parameter 'sortPublished' is not null or undefined
            assertParamExists('findAll', 'sortPublished', sortPublished)
            // verify required parameter 'sortFinished' is not null or undefined
            assertParamExists('findAll', 'sortFinished', sortFinished)
            const localVarPath = `/campaign/getListAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (organizationId !== undefined) {
                localVarQueryParameter['organizationId'] = organizationId;
            }

            if (isFinished !== undefined) {
                localVarQueryParameter['isFinished'] = isFinished;
            }

            if (sortPublished !== undefined) {
                localVarQueryParameter['sortPublished'] = sortPublished;
            }

            if (sortFinished !== undefined) {
                localVarQueryParameter['sortFinished'] = sortFinished;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list all campaign by operatorID
         * @param {string} organizationId 
         * @param {string} operatorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByOperatorId: async (organizationId: string, operatorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getAllByOperatorId', 'organizationId', organizationId)
            // verify required parameter 'operatorId' is not null or undefined
            assertParamExists('getAllByOperatorId', 'operatorId', operatorId)
            const localVarPath = `/campaign/organization/{organizationId}/operator/{operatorId}/getListAll`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"operatorId"}}`, encodeURIComponent(String(operatorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all campaigns by organization ID
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByOrganizationId: async (organizationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getAllByOrganizationId', 'organizationId', organizationId)
            const localVarPath = `/campaign/organization/{organizationId}/getListAll`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all pending campaign vendor request (operator/admin)
         * @param {string} organizationId 
         * @param {string} campaignId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCampaignVendorRequest: async (organizationId: string, campaignId: string, page?: number, limit?: number, sort?: string, sortingField?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getAllCampaignVendorRequest', 'organizationId', organizationId)
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('getAllCampaignVendorRequest', 'campaignId', campaignId)
            const localVarPath = `/campaign/getAllCampaignVendorRequest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (organizationId !== undefined) {
                localVarQueryParameter['organizationId'] = organizationId;
            }

            if (campaignId !== undefined) {
                localVarQueryParameter['campaignId'] = campaignId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all my campaign (operator/admin)
         * @param {string} organizationId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [isPublished] 
         * @param {string} [showQuickDonate] 
         * @param {string} [campaignId] 
         * @param {string} [campaignType] 
         * @param {string} [sortBy] 
         * @param {string} [sortMethod] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMyCampaign: async (organizationId: string, page?: number, limit?: number, sort?: string, sortingField?: string, isPublished?: string, showQuickDonate?: string, campaignId?: string, campaignType?: string, sortBy?: string, sortMethod?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getAllMyCampaign', 'organizationId', organizationId)
            const localVarPath = `/campaign/getAllMyCampaign`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (organizationId !== undefined) {
                localVarQueryParameter['organizationId'] = organizationId;
            }

            if (isPublished !== undefined) {
                localVarQueryParameter['isPublished'] = isPublished;
            }

            if (showQuickDonate !== undefined) {
                localVarQueryParameter['showQuickDonate'] = showQuickDonate;
            }

            if (campaignId !== undefined) {
                localVarQueryParameter['campaignId'] = campaignId;
            }

            if (campaignType !== undefined) {
                localVarQueryParameter['campaignType'] = campaignType;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortMethod !== undefined) {
                localVarQueryParameter['sortMethod'] = sortMethod;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list all new campaign created by all operator
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllNewCampaign: async (organizationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getAllNewCampaign', 'organizationId', organizationId)
            const localVarPath = `/campaign/organization/{organizationId}/getListAllNew`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Successfully get list of new campaign on organization
         * @param {string} organizationId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [type] 
         * @param {string} [isFinished] 
         * @param {string} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllNewCampaignPaginated: async (organizationId: string, page?: number, limit?: number, sort?: string, sortingField?: string, type?: string, isFinished?: string, sortBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getAllNewCampaignPaginated', 'organizationId', organizationId)
            const localVarPath = `/campaign/organization/{organizationId}/getListAllNewPaginated`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (isFinished !== undefined) {
                localVarQueryParameter['isFinished'] = isFinished;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all campaigns displayed in public page
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPublished: async (organizationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getAllPublished', 'organizationId', organizationId)
            const localVarPath = `/campaign/organization/{organizationId}/getAllPublished`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list all my approved campaign (vendor)
         * @param {string} organizationId 
         * @param {string} vendorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApprovedMyCampaignByVendor: async (organizationId: string, vendorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getApprovedMyCampaignByVendor', 'organizationId', organizationId)
            // verify required parameter 'vendorId' is not null or undefined
            assertParamExists('getApprovedMyCampaignByVendor', 'vendorId', vendorId)
            const localVarPath = `/campaign/organization/{organizationId}/vendor/{vendorId}/getListApproved`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"vendorId"}}`, encodeURIComponent(String(vendorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get a campaign detail by campaignId
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignDetailById: async (campaignId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('getCampaignDetailById', 'campaignId', campaignId)
            const localVarPath = `/campaign/detail/{campaignId}`
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list all donor on spesific campaign
         * @param {string} [campaignId] 
         * @param {string} [organizationId] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {number} [minDonationCount] 
         * @param {number} [maxDonationCount] 
         * @param {number} [minTotalDonation] 
         * @param {number} [maxTotalDonation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignDonorListOnOperatorDashboard: async (campaignId?: string, organizationId?: string, page?: number, limit?: number, sort?: string, sortingField?: string, minDonationCount?: number, maxDonationCount?: number, minTotalDonation?: number, maxTotalDonation?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/campaign/organization/{organizationId}/{campaignId}/donor-list`
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (minDonationCount !== undefined) {
                localVarQueryParameter['minDonationCount'] = minDonationCount;
            }

            if (maxDonationCount !== undefined) {
                localVarQueryParameter['maxDonationCount'] = maxDonationCount;
            }

            if (minTotalDonation !== undefined) {
                localVarQueryParameter['minTotalDonation'] = minTotalDonation;
            }

            if (maxTotalDonation !== undefined) {
                localVarQueryParameter['maxTotalDonation'] = maxTotalDonation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all my campaign (organizationId)
         * @param {string} orgzanizationId 
         * @param {string} organizationId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [isPublished] 
         * @param {string} [showQuickDonate] 
         * @param {string} [campaignId] 
         * @param {string} [campaignType] 
         * @param {string} [sortBy] 
         * @param {string} [sortMethod] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignsByOrganizationId: async (orgzanizationId: string, organizationId: string, page?: number, limit?: number, sort?: string, sortingField?: string, isPublished?: string, showQuickDonate?: string, campaignId?: string, campaignType?: string, sortBy?: string, sortMethod?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgzanizationId' is not null or undefined
            assertParamExists('getCampaignsByOrganizationId', 'orgzanizationId', orgzanizationId)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getCampaignsByOrganizationId', 'organizationId', organizationId)
            const localVarPath = `/campaign/findAllCampaigns`
                .replace(`{${"orgzanizationId"}}`, encodeURIComponent(String(orgzanizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (organizationId !== undefined) {
                localVarQueryParameter['organizationId'] = organizationId;
            }

            if (isPublished !== undefined) {
                localVarQueryParameter['isPublished'] = isPublished;
            }

            if (showQuickDonate !== undefined) {
                localVarQueryParameter['showQuickDonate'] = showQuickDonate;
            }

            if (campaignId !== undefined) {
                localVarQueryParameter['campaignId'] = campaignId;
            }

            if (campaignType !== undefined) {
                localVarQueryParameter['campaignType'] = campaignType;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortMethod !== undefined) {
                localVarQueryParameter['sortMethod'] = sortMethod;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Detail of Unapproval Campaign Info Created by Manager by CampaignId 
         * @param {string} organizationId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNewCampaignById: async (organizationId: string, campaignId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getNewCampaignById', 'organizationId', organizationId)
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('getNewCampaignById', 'campaignId', campaignId)
            const localVarPath = `/campaign/organization/{organizationId}/unapproval/{campaignId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create new campaign objectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNewCampaignObjectId: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/campaign/getNewObjectId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list all my pending campaign (Operator)
         * @param {string} campaignId 
         * @param {string} operatorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPendingMyCampaignByOperatorId: async (campaignId: string, operatorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignId' is not null or undefined
            assertParamExists('getPendingMyCampaignByOperatorId', 'campaignId', campaignId)
            // verify required parameter 'operatorId' is not null or undefined
            assertParamExists('getPendingMyCampaignByOperatorId', 'operatorId', operatorId)
            const localVarPath = `/campaign/{campaignId}/operator/{operatorId}/getListPending`
                .replace(`{${"campaignId"}}`, encodeURIComponent(String(campaignId)))
                .replace(`{${"operatorId"}}`, encodeURIComponent(String(operatorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list all my pending campaign (vendor)
         * @param {string} organizationId 
         * @param {string} vendorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPendingMyCampaignByVendorId: async (organizationId: string, vendorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getPendingMyCampaignByVendorId', 'organizationId', organizationId)
            // verify required parameter 'vendorId' is not null or undefined
            assertParamExists('getPendingMyCampaignByVendorId', 'vendorId', vendorId)
            const localVarPath = `/campaign/organization/{organizationId}/vendor/{vendorId}/getListPending`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"vendorId"}}`, encodeURIComponent(String(vendorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Operator reject for campaign
         * @param {UpdateCampaignStatusDto} updateCampaignStatusDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectCampaign: async (updateCampaignStatusDto: UpdateCampaignStatusDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateCampaignStatusDto' is not null or undefined
            assertParamExists('rejectCampaign', 'updateCampaignStatusDto', updateCampaignStatusDto)
            const localVarPath = `/campaign/operator/reject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCampaignStatusDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary set flag to delete campaign
         * @param {CampaignSetDeletedFlagDto} campaignSetDeletedFlagDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDeletedFlag: async (campaignSetDeletedFlagDto: CampaignSetDeletedFlagDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignSetDeletedFlagDto' is not null or undefined
            assertParamExists('setDeletedFlag', 'campaignSetDeletedFlagDto', campaignSetDeletedFlagDto)
            const localVarPath = `/campaign/setDeletedFlagBatch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(campaignSetDeletedFlagDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set Favorite
         * @param {CampaignSetFavoriteDto} campaignSetFavoriteDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setFavorite: async (campaignSetFavoriteDto: CampaignSetFavoriteDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignSetFavoriteDto' is not null or undefined
            assertParamExists('setFavorite', 'campaignSetFavoriteDto', campaignSetFavoriteDto)
            const localVarPath = `/campaign/setFavorite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(campaignSetFavoriteDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Vendor apply to campaign
         * @param {CampaignApplyVendorDto} campaignApplyVendorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorApply: async (campaignApplyVendorDto: CampaignApplyVendorDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignApplyVendorDto' is not null or undefined
            assertParamExists('vendorApply', 'campaignApplyVendorDto', campaignApplyVendorDto)
            const localVarPath = `/campaign/vendor/apply`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(campaignApplyVendorDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CampaignApi - functional programming interface
 * @export
 */
export const CampaignApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CampaignApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Operator/Manager approve for vendor request
         * @param {UpdateCampaignStatusDto} updateCampaignStatusDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approveCampaign(updateCampaignStatusDto: UpdateCampaignStatusDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.approveCampaign(updateCampaignStatusDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CampaignCreateDto} campaignCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async campaignCreate(campaignCreateDto: CampaignCreateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.campaignCreate(campaignCreateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update campaign
         * @param {string} campaignId 
         * @param {CampaignUpdateDto} campaignUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async campaignUpdate(campaignId: string, campaignUpdateDto: CampaignUpdateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.campaignUpdate(campaignId, campaignUpdateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get list all campaign
         * @param {string} organizationId 
         * @param {string} isFinished 
         * @param {string} sortPublished 
         * @param {string} sortFinished 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAll(organizationId: string, isFinished: string, sortPublished: string, sortFinished: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAll(organizationId, isFinished, sortPublished, sortFinished, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get list all campaign by operatorID
         * @param {string} organizationId 
         * @param {string} operatorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllByOperatorId(organizationId: string, operatorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllByOperatorId(organizationId, operatorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List all campaigns by organization ID
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllByOrganizationId(organizationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllByOrganizationId(organizationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all pending campaign vendor request (operator/admin)
         * @param {string} organizationId 
         * @param {string} campaignId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCampaignVendorRequest(organizationId: string, campaignId: string, page?: number, limit?: number, sort?: string, sortingField?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCampaignVendorRequest(organizationId, campaignId, page, limit, sort, sortingField, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all my campaign (operator/admin)
         * @param {string} organizationId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [isPublished] 
         * @param {string} [showQuickDonate] 
         * @param {string} [campaignId] 
         * @param {string} [campaignType] 
         * @param {string} [sortBy] 
         * @param {string} [sortMethod] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllMyCampaign(organizationId: string, page?: number, limit?: number, sort?: string, sortingField?: string, isPublished?: string, showQuickDonate?: string, campaignId?: string, campaignType?: string, sortBy?: string, sortMethod?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllMyCampaign(organizationId, page, limit, sort, sortingField, isPublished, showQuickDonate, campaignId, campaignType, sortBy, sortMethod, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get list all new campaign created by all operator
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllNewCampaign(organizationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllNewCampaign(organizationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Successfully get list of new campaign on organization
         * @param {string} organizationId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [type] 
         * @param {string} [isFinished] 
         * @param {string} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllNewCampaignPaginated(organizationId: string, page?: number, limit?: number, sort?: string, sortingField?: string, type?: string, isFinished?: string, sortBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllNewCampaignPaginated(organizationId, page, limit, sort, sortingField, type, isFinished, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List all campaigns displayed in public page
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPublished(organizationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPublished(organizationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get list all my approved campaign (vendor)
         * @param {string} organizationId 
         * @param {string} vendorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApprovedMyCampaignByVendor(organizationId: string, vendorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApprovedMyCampaignByVendor(organizationId, vendorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get a campaign detail by campaignId
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaignDetailById(campaignId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCampaignDetailById(campaignId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get list all donor on spesific campaign
         * @param {string} [campaignId] 
         * @param {string} [organizationId] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {number} [minDonationCount] 
         * @param {number} [maxDonationCount] 
         * @param {number} [minTotalDonation] 
         * @param {number} [maxTotalDonation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaignDonorListOnOperatorDashboard(campaignId?: string, organizationId?: string, page?: number, limit?: number, sort?: string, sortingField?: string, minDonationCount?: number, maxDonationCount?: number, minTotalDonation?: number, maxTotalDonation?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCampaignDonorListOnOperatorDashboard(campaignId, organizationId, page, limit, sort, sortingField, minDonationCount, maxDonationCount, minTotalDonation, maxTotalDonation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all my campaign (organizationId)
         * @param {string} orgzanizationId 
         * @param {string} organizationId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [isPublished] 
         * @param {string} [showQuickDonate] 
         * @param {string} [campaignId] 
         * @param {string} [campaignType] 
         * @param {string} [sortBy] 
         * @param {string} [sortMethod] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaignsByOrganizationId(orgzanizationId: string, organizationId: string, page?: number, limit?: number, sort?: string, sortingField?: string, isPublished?: string, showQuickDonate?: string, campaignId?: string, campaignType?: string, sortBy?: string, sortMethod?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCampaignsByOrganizationId(orgzanizationId, organizationId, page, limit, sort, sortingField, isPublished, showQuickDonate, campaignId, campaignType, sortBy, sortMethod, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Detail of Unapproval Campaign Info Created by Manager by CampaignId 
         * @param {string} organizationId 
         * @param {string} campaignId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNewCampaignById(organizationId: string, campaignId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNewCampaignById(organizationId, campaignId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary create new campaign objectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNewCampaignObjectId(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNewCampaignObjectId(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get list all my pending campaign (Operator)
         * @param {string} campaignId 
         * @param {string} operatorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPendingMyCampaignByOperatorId(campaignId: string, operatorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPendingMyCampaignByOperatorId(campaignId, operatorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get list all my pending campaign (vendor)
         * @param {string} organizationId 
         * @param {string} vendorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPendingMyCampaignByVendorId(organizationId: string, vendorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPendingMyCampaignByVendorId(organizationId, vendorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Operator reject for campaign
         * @param {UpdateCampaignStatusDto} updateCampaignStatusDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rejectCampaign(updateCampaignStatusDto: UpdateCampaignStatusDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rejectCampaign(updateCampaignStatusDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary set flag to delete campaign
         * @param {CampaignSetDeletedFlagDto} campaignSetDeletedFlagDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setDeletedFlag(campaignSetDeletedFlagDto: CampaignSetDeletedFlagDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setDeletedFlag(campaignSetDeletedFlagDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set Favorite
         * @param {CampaignSetFavoriteDto} campaignSetFavoriteDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setFavorite(campaignSetFavoriteDto: CampaignSetFavoriteDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setFavorite(campaignSetFavoriteDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Vendor apply to campaign
         * @param {CampaignApplyVendorDto} campaignApplyVendorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorApply(campaignApplyVendorDto: CampaignApplyVendorDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorApply(campaignApplyVendorDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CampaignApi - factory interface
 * @export
 */
export const CampaignApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CampaignApiFp(configuration)
    return {
        /**
         * 
         * @summary Operator/Manager approve for vendor request
         * @param {CampaignApiApproveCampaignRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveCampaign(requestParameters: CampaignApiApproveCampaignRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.approveCampaign(requestParameters.updateCampaignStatusDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CampaignApiCampaignCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campaignCreate(requestParameters: CampaignApiCampaignCreateRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.campaignCreate(requestParameters.campaignCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update campaign
         * @param {CampaignApiCampaignUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campaignUpdate(requestParameters: CampaignApiCampaignUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.campaignUpdate(requestParameters.campaignId, requestParameters.campaignUpdateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list all campaign
         * @param {CampaignApiFindAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll(requestParameters: CampaignApiFindAllRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.findAll(requestParameters.organizationId, requestParameters.isFinished, requestParameters.sortPublished, requestParameters.sortFinished, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list all campaign by operatorID
         * @param {CampaignApiGetAllByOperatorIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByOperatorId(requestParameters: CampaignApiGetAllByOperatorIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAllByOperatorId(requestParameters.organizationId, requestParameters.operatorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all campaigns by organization ID
         * @param {CampaignApiGetAllByOrganizationIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByOrganizationId(requestParameters: CampaignApiGetAllByOrganizationIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAllByOrganizationId(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all pending campaign vendor request (operator/admin)
         * @param {CampaignApiGetAllCampaignVendorRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCampaignVendorRequest(requestParameters: CampaignApiGetAllCampaignVendorRequestRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAllCampaignVendorRequest(requestParameters.organizationId, requestParameters.campaignId, requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all my campaign (operator/admin)
         * @param {CampaignApiGetAllMyCampaignRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMyCampaign(requestParameters: CampaignApiGetAllMyCampaignRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAllMyCampaign(requestParameters.organizationId, requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.isPublished, requestParameters.showQuickDonate, requestParameters.campaignId, requestParameters.campaignType, requestParameters.sortBy, requestParameters.sortMethod, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list all new campaign created by all operator
         * @param {CampaignApiGetAllNewCampaignRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllNewCampaign(requestParameters: CampaignApiGetAllNewCampaignRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAllNewCampaign(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Successfully get list of new campaign on organization
         * @param {CampaignApiGetAllNewCampaignPaginatedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllNewCampaignPaginated(requestParameters: CampaignApiGetAllNewCampaignPaginatedRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAllNewCampaignPaginated(requestParameters.organizationId, requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.type, requestParameters.isFinished, requestParameters.sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all campaigns displayed in public page
         * @param {CampaignApiGetAllPublishedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPublished(requestParameters: CampaignApiGetAllPublishedRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAllPublished(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list all my approved campaign (vendor)
         * @param {CampaignApiGetApprovedMyCampaignByVendorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApprovedMyCampaignByVendor(requestParameters: CampaignApiGetApprovedMyCampaignByVendorRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getApprovedMyCampaignByVendor(requestParameters.organizationId, requestParameters.vendorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get a campaign detail by campaignId
         * @param {CampaignApiGetCampaignDetailByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignDetailById(requestParameters: CampaignApiGetCampaignDetailByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getCampaignDetailById(requestParameters.campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list all donor on spesific campaign
         * @param {CampaignApiGetCampaignDonorListOnOperatorDashboardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignDonorListOnOperatorDashboard(requestParameters: CampaignApiGetCampaignDonorListOnOperatorDashboardRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getCampaignDonorListOnOperatorDashboard(requestParameters.campaignId, requestParameters.organizationId, requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.minDonationCount, requestParameters.maxDonationCount, requestParameters.minTotalDonation, requestParameters.maxTotalDonation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all my campaign (organizationId)
         * @param {CampaignApiGetCampaignsByOrganizationIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignsByOrganizationId(requestParameters: CampaignApiGetCampaignsByOrganizationIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getCampaignsByOrganizationId(requestParameters.orgzanizationId, requestParameters.organizationId, requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.isPublished, requestParameters.showQuickDonate, requestParameters.campaignId, requestParameters.campaignType, requestParameters.sortBy, requestParameters.sortMethod, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Detail of Unapproval Campaign Info Created by Manager by CampaignId 
         * @param {CampaignApiGetNewCampaignByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNewCampaignById(requestParameters: CampaignApiGetNewCampaignByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getNewCampaignById(requestParameters.organizationId, requestParameters.campaignId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create new campaign objectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNewCampaignObjectId(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getNewCampaignObjectId(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list all my pending campaign (Operator)
         * @param {CampaignApiGetPendingMyCampaignByOperatorIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPendingMyCampaignByOperatorId(requestParameters: CampaignApiGetPendingMyCampaignByOperatorIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getPendingMyCampaignByOperatorId(requestParameters.campaignId, requestParameters.operatorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list all my pending campaign (vendor)
         * @param {CampaignApiGetPendingMyCampaignByVendorIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPendingMyCampaignByVendorId(requestParameters: CampaignApiGetPendingMyCampaignByVendorIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getPendingMyCampaignByVendorId(requestParameters.organizationId, requestParameters.vendorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Operator reject for campaign
         * @param {CampaignApiRejectCampaignRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectCampaign(requestParameters: CampaignApiRejectCampaignRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.rejectCampaign(requestParameters.updateCampaignStatusDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary set flag to delete campaign
         * @param {CampaignApiSetDeletedFlagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDeletedFlag(requestParameters: CampaignApiSetDeletedFlagRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.setDeletedFlag(requestParameters.campaignSetDeletedFlagDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set Favorite
         * @param {CampaignApiSetFavoriteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setFavorite(requestParameters: CampaignApiSetFavoriteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.setFavorite(requestParameters.campaignSetFavoriteDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Vendor apply to campaign
         * @param {CampaignApiVendorApplyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorApply(requestParameters: CampaignApiVendorApplyRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vendorApply(requestParameters.campaignApplyVendorDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for approveCampaign operation in CampaignApi.
 * @export
 * @interface CampaignApiApproveCampaignRequest
 */
export interface CampaignApiApproveCampaignRequest {
    /**
     * 
     * @type {UpdateCampaignStatusDto}
     * @memberof CampaignApiApproveCampaign
     */
    readonly updateCampaignStatusDto: UpdateCampaignStatusDto
}

/**
 * Request parameters for campaignCreate operation in CampaignApi.
 * @export
 * @interface CampaignApiCampaignCreateRequest
 */
export interface CampaignApiCampaignCreateRequest {
    /**
     * 
     * @type {CampaignCreateDto}
     * @memberof CampaignApiCampaignCreate
     */
    readonly campaignCreateDto: CampaignCreateDto
}

/**
 * Request parameters for campaignUpdate operation in CampaignApi.
 * @export
 * @interface CampaignApiCampaignUpdateRequest
 */
export interface CampaignApiCampaignUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof CampaignApiCampaignUpdate
     */
    readonly campaignId: string

    /**
     * 
     * @type {CampaignUpdateDto}
     * @memberof CampaignApiCampaignUpdate
     */
    readonly campaignUpdateDto: CampaignUpdateDto
}

/**
 * Request parameters for findAll operation in CampaignApi.
 * @export
 * @interface CampaignApiFindAllRequest
 */
export interface CampaignApiFindAllRequest {
    /**
     * 
     * @type {string}
     * @memberof CampaignApiFindAll
     */
    readonly organizationId: string

    /**
     * 
     * @type {string}
     * @memberof CampaignApiFindAll
     */
    readonly isFinished: string

    /**
     * 
     * @type {string}
     * @memberof CampaignApiFindAll
     */
    readonly sortPublished: string

    /**
     * 
     * @type {string}
     * @memberof CampaignApiFindAll
     */
    readonly sortFinished: string
}

/**
 * Request parameters for getAllByOperatorId operation in CampaignApi.
 * @export
 * @interface CampaignApiGetAllByOperatorIdRequest
 */
export interface CampaignApiGetAllByOperatorIdRequest {
    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetAllByOperatorId
     */
    readonly organizationId: string

    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetAllByOperatorId
     */
    readonly operatorId: string
}

/**
 * Request parameters for getAllByOrganizationId operation in CampaignApi.
 * @export
 * @interface CampaignApiGetAllByOrganizationIdRequest
 */
export interface CampaignApiGetAllByOrganizationIdRequest {
    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetAllByOrganizationId
     */
    readonly organizationId: string
}

/**
 * Request parameters for getAllCampaignVendorRequest operation in CampaignApi.
 * @export
 * @interface CampaignApiGetAllCampaignVendorRequestRequest
 */
export interface CampaignApiGetAllCampaignVendorRequestRequest {
    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetAllCampaignVendorRequest
     */
    readonly organizationId: string

    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetAllCampaignVendorRequest
     */
    readonly campaignId: string

    /**
     * 
     * @type {number}
     * @memberof CampaignApiGetAllCampaignVendorRequest
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof CampaignApiGetAllCampaignVendorRequest
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetAllCampaignVendorRequest
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetAllCampaignVendorRequest
     */
    readonly sortingField?: string
}

/**
 * Request parameters for getAllMyCampaign operation in CampaignApi.
 * @export
 * @interface CampaignApiGetAllMyCampaignRequest
 */
export interface CampaignApiGetAllMyCampaignRequest {
    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetAllMyCampaign
     */
    readonly organizationId: string

    /**
     * 
     * @type {number}
     * @memberof CampaignApiGetAllMyCampaign
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof CampaignApiGetAllMyCampaign
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetAllMyCampaign
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetAllMyCampaign
     */
    readonly sortingField?: string

    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetAllMyCampaign
     */
    readonly isPublished?: string

    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetAllMyCampaign
     */
    readonly showQuickDonate?: string

    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetAllMyCampaign
     */
    readonly campaignId?: string

    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetAllMyCampaign
     */
    readonly campaignType?: string

    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetAllMyCampaign
     */
    readonly sortBy?: string

    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetAllMyCampaign
     */
    readonly sortMethod?: string
}

/**
 * Request parameters for getAllNewCampaign operation in CampaignApi.
 * @export
 * @interface CampaignApiGetAllNewCampaignRequest
 */
export interface CampaignApiGetAllNewCampaignRequest {
    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetAllNewCampaign
     */
    readonly organizationId: string
}

/**
 * Request parameters for getAllNewCampaignPaginated operation in CampaignApi.
 * @export
 * @interface CampaignApiGetAllNewCampaignPaginatedRequest
 */
export interface CampaignApiGetAllNewCampaignPaginatedRequest {
    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetAllNewCampaignPaginated
     */
    readonly organizationId: string

    /**
     * 
     * @type {number}
     * @memberof CampaignApiGetAllNewCampaignPaginated
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof CampaignApiGetAllNewCampaignPaginated
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetAllNewCampaignPaginated
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetAllNewCampaignPaginated
     */
    readonly sortingField?: string

    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetAllNewCampaignPaginated
     */
    readonly type?: string

    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetAllNewCampaignPaginated
     */
    readonly isFinished?: string

    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetAllNewCampaignPaginated
     */
    readonly sortBy?: string
}

/**
 * Request parameters for getAllPublished operation in CampaignApi.
 * @export
 * @interface CampaignApiGetAllPublishedRequest
 */
export interface CampaignApiGetAllPublishedRequest {
    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetAllPublished
     */
    readonly organizationId: string
}

/**
 * Request parameters for getApprovedMyCampaignByVendor operation in CampaignApi.
 * @export
 * @interface CampaignApiGetApprovedMyCampaignByVendorRequest
 */
export interface CampaignApiGetApprovedMyCampaignByVendorRequest {
    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetApprovedMyCampaignByVendor
     */
    readonly organizationId: string

    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetApprovedMyCampaignByVendor
     */
    readonly vendorId: string
}

/**
 * Request parameters for getCampaignDetailById operation in CampaignApi.
 * @export
 * @interface CampaignApiGetCampaignDetailByIdRequest
 */
export interface CampaignApiGetCampaignDetailByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetCampaignDetailById
     */
    readonly campaignId: string
}

/**
 * Request parameters for getCampaignDonorListOnOperatorDashboard operation in CampaignApi.
 * @export
 * @interface CampaignApiGetCampaignDonorListOnOperatorDashboardRequest
 */
export interface CampaignApiGetCampaignDonorListOnOperatorDashboardRequest {
    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetCampaignDonorListOnOperatorDashboard
     */
    readonly campaignId?: string

    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetCampaignDonorListOnOperatorDashboard
     */
    readonly organizationId?: string

    /**
     * 
     * @type {number}
     * @memberof CampaignApiGetCampaignDonorListOnOperatorDashboard
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof CampaignApiGetCampaignDonorListOnOperatorDashboard
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetCampaignDonorListOnOperatorDashboard
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetCampaignDonorListOnOperatorDashboard
     */
    readonly sortingField?: string

    /**
     * 
     * @type {number}
     * @memberof CampaignApiGetCampaignDonorListOnOperatorDashboard
     */
    readonly minDonationCount?: number

    /**
     * 
     * @type {number}
     * @memberof CampaignApiGetCampaignDonorListOnOperatorDashboard
     */
    readonly maxDonationCount?: number

    /**
     * 
     * @type {number}
     * @memberof CampaignApiGetCampaignDonorListOnOperatorDashboard
     */
    readonly minTotalDonation?: number

    /**
     * 
     * @type {number}
     * @memberof CampaignApiGetCampaignDonorListOnOperatorDashboard
     */
    readonly maxTotalDonation?: number
}

/**
 * Request parameters for getCampaignsByOrganizationId operation in CampaignApi.
 * @export
 * @interface CampaignApiGetCampaignsByOrganizationIdRequest
 */
export interface CampaignApiGetCampaignsByOrganizationIdRequest {
    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetCampaignsByOrganizationId
     */
    readonly orgzanizationId: string

    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetCampaignsByOrganizationId
     */
    readonly organizationId: string

    /**
     * 
     * @type {number}
     * @memberof CampaignApiGetCampaignsByOrganizationId
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof CampaignApiGetCampaignsByOrganizationId
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetCampaignsByOrganizationId
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetCampaignsByOrganizationId
     */
    readonly sortingField?: string

    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetCampaignsByOrganizationId
     */
    readonly isPublished?: string

    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetCampaignsByOrganizationId
     */
    readonly showQuickDonate?: string

    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetCampaignsByOrganizationId
     */
    readonly campaignId?: string

    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetCampaignsByOrganizationId
     */
    readonly campaignType?: string

    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetCampaignsByOrganizationId
     */
    readonly sortBy?: string

    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetCampaignsByOrganizationId
     */
    readonly sortMethod?: string
}

/**
 * Request parameters for getNewCampaignById operation in CampaignApi.
 * @export
 * @interface CampaignApiGetNewCampaignByIdRequest
 */
export interface CampaignApiGetNewCampaignByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetNewCampaignById
     */
    readonly organizationId: string

    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetNewCampaignById
     */
    readonly campaignId: string
}

/**
 * Request parameters for getPendingMyCampaignByOperatorId operation in CampaignApi.
 * @export
 * @interface CampaignApiGetPendingMyCampaignByOperatorIdRequest
 */
export interface CampaignApiGetPendingMyCampaignByOperatorIdRequest {
    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetPendingMyCampaignByOperatorId
     */
    readonly campaignId: string

    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetPendingMyCampaignByOperatorId
     */
    readonly operatorId: string
}

/**
 * Request parameters for getPendingMyCampaignByVendorId operation in CampaignApi.
 * @export
 * @interface CampaignApiGetPendingMyCampaignByVendorIdRequest
 */
export interface CampaignApiGetPendingMyCampaignByVendorIdRequest {
    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetPendingMyCampaignByVendorId
     */
    readonly organizationId: string

    /**
     * 
     * @type {string}
     * @memberof CampaignApiGetPendingMyCampaignByVendorId
     */
    readonly vendorId: string
}

/**
 * Request parameters for rejectCampaign operation in CampaignApi.
 * @export
 * @interface CampaignApiRejectCampaignRequest
 */
export interface CampaignApiRejectCampaignRequest {
    /**
     * 
     * @type {UpdateCampaignStatusDto}
     * @memberof CampaignApiRejectCampaign
     */
    readonly updateCampaignStatusDto: UpdateCampaignStatusDto
}

/**
 * Request parameters for setDeletedFlag operation in CampaignApi.
 * @export
 * @interface CampaignApiSetDeletedFlagRequest
 */
export interface CampaignApiSetDeletedFlagRequest {
    /**
     * 
     * @type {CampaignSetDeletedFlagDto}
     * @memberof CampaignApiSetDeletedFlag
     */
    readonly campaignSetDeletedFlagDto: CampaignSetDeletedFlagDto
}

/**
 * Request parameters for setFavorite operation in CampaignApi.
 * @export
 * @interface CampaignApiSetFavoriteRequest
 */
export interface CampaignApiSetFavoriteRequest {
    /**
     * 
     * @type {CampaignSetFavoriteDto}
     * @memberof CampaignApiSetFavorite
     */
    readonly campaignSetFavoriteDto: CampaignSetFavoriteDto
}

/**
 * Request parameters for vendorApply operation in CampaignApi.
 * @export
 * @interface CampaignApiVendorApplyRequest
 */
export interface CampaignApiVendorApplyRequest {
    /**
     * 
     * @type {CampaignApplyVendorDto}
     * @memberof CampaignApiVendorApply
     */
    readonly campaignApplyVendorDto: CampaignApplyVendorDto
}

/**
 * CampaignApi - object-oriented interface
 * @export
 * @class CampaignApi
 * @extends {BaseAPI}
 */
export class CampaignApi extends BaseAPI {
    /**
     * 
     * @summary Operator/Manager approve for vendor request
     * @param {CampaignApiApproveCampaignRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApi
     */
    public approveCampaign(requestParameters: CampaignApiApproveCampaignRequest, options?: AxiosRequestConfig) {
        return CampaignApiFp(this.configuration).approveCampaign(requestParameters.updateCampaignStatusDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CampaignApiCampaignCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApi
     */
    public campaignCreate(requestParameters: CampaignApiCampaignCreateRequest, options?: AxiosRequestConfig) {
        return CampaignApiFp(this.configuration).campaignCreate(requestParameters.campaignCreateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update campaign
     * @param {CampaignApiCampaignUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApi
     */
    public campaignUpdate(requestParameters: CampaignApiCampaignUpdateRequest, options?: AxiosRequestConfig) {
        return CampaignApiFp(this.configuration).campaignUpdate(requestParameters.campaignId, requestParameters.campaignUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list all campaign
     * @param {CampaignApiFindAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApi
     */
    public findAll(requestParameters: CampaignApiFindAllRequest, options?: AxiosRequestConfig) {
        return CampaignApiFp(this.configuration).findAll(requestParameters.organizationId, requestParameters.isFinished, requestParameters.sortPublished, requestParameters.sortFinished, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list all campaign by operatorID
     * @param {CampaignApiGetAllByOperatorIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApi
     */
    public getAllByOperatorId(requestParameters: CampaignApiGetAllByOperatorIdRequest, options?: AxiosRequestConfig) {
        return CampaignApiFp(this.configuration).getAllByOperatorId(requestParameters.organizationId, requestParameters.operatorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all campaigns by organization ID
     * @param {CampaignApiGetAllByOrganizationIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApi
     */
    public getAllByOrganizationId(requestParameters: CampaignApiGetAllByOrganizationIdRequest, options?: AxiosRequestConfig) {
        return CampaignApiFp(this.configuration).getAllByOrganizationId(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all pending campaign vendor request (operator/admin)
     * @param {CampaignApiGetAllCampaignVendorRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApi
     */
    public getAllCampaignVendorRequest(requestParameters: CampaignApiGetAllCampaignVendorRequestRequest, options?: AxiosRequestConfig) {
        return CampaignApiFp(this.configuration).getAllCampaignVendorRequest(requestParameters.organizationId, requestParameters.campaignId, requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all my campaign (operator/admin)
     * @param {CampaignApiGetAllMyCampaignRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApi
     */
    public getAllMyCampaign(requestParameters: CampaignApiGetAllMyCampaignRequest, options?: AxiosRequestConfig) {
        return CampaignApiFp(this.configuration).getAllMyCampaign(requestParameters.organizationId, requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.isPublished, requestParameters.showQuickDonate, requestParameters.campaignId, requestParameters.campaignType, requestParameters.sortBy, requestParameters.sortMethod, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list all new campaign created by all operator
     * @param {CampaignApiGetAllNewCampaignRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApi
     */
    public getAllNewCampaign(requestParameters: CampaignApiGetAllNewCampaignRequest, options?: AxiosRequestConfig) {
        return CampaignApiFp(this.configuration).getAllNewCampaign(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Successfully get list of new campaign on organization
     * @param {CampaignApiGetAllNewCampaignPaginatedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApi
     */
    public getAllNewCampaignPaginated(requestParameters: CampaignApiGetAllNewCampaignPaginatedRequest, options?: AxiosRequestConfig) {
        return CampaignApiFp(this.configuration).getAllNewCampaignPaginated(requestParameters.organizationId, requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.type, requestParameters.isFinished, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all campaigns displayed in public page
     * @param {CampaignApiGetAllPublishedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApi
     */
    public getAllPublished(requestParameters: CampaignApiGetAllPublishedRequest, options?: AxiosRequestConfig) {
        return CampaignApiFp(this.configuration).getAllPublished(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list all my approved campaign (vendor)
     * @param {CampaignApiGetApprovedMyCampaignByVendorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApi
     */
    public getApprovedMyCampaignByVendor(requestParameters: CampaignApiGetApprovedMyCampaignByVendorRequest, options?: AxiosRequestConfig) {
        return CampaignApiFp(this.configuration).getApprovedMyCampaignByVendor(requestParameters.organizationId, requestParameters.vendorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get a campaign detail by campaignId
     * @param {CampaignApiGetCampaignDetailByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApi
     */
    public getCampaignDetailById(requestParameters: CampaignApiGetCampaignDetailByIdRequest, options?: AxiosRequestConfig) {
        return CampaignApiFp(this.configuration).getCampaignDetailById(requestParameters.campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list all donor on spesific campaign
     * @param {CampaignApiGetCampaignDonorListOnOperatorDashboardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApi
     */
    public getCampaignDonorListOnOperatorDashboard(requestParameters: CampaignApiGetCampaignDonorListOnOperatorDashboardRequest = {}, options?: AxiosRequestConfig) {
        return CampaignApiFp(this.configuration).getCampaignDonorListOnOperatorDashboard(requestParameters.campaignId, requestParameters.organizationId, requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.minDonationCount, requestParameters.maxDonationCount, requestParameters.minTotalDonation, requestParameters.maxTotalDonation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all my campaign (organizationId)
     * @param {CampaignApiGetCampaignsByOrganizationIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApi
     */
    public getCampaignsByOrganizationId(requestParameters: CampaignApiGetCampaignsByOrganizationIdRequest, options?: AxiosRequestConfig) {
        return CampaignApiFp(this.configuration).getCampaignsByOrganizationId(requestParameters.orgzanizationId, requestParameters.organizationId, requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.isPublished, requestParameters.showQuickDonate, requestParameters.campaignId, requestParameters.campaignType, requestParameters.sortBy, requestParameters.sortMethod, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Detail of Unapproval Campaign Info Created by Manager by CampaignId 
     * @param {CampaignApiGetNewCampaignByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApi
     */
    public getNewCampaignById(requestParameters: CampaignApiGetNewCampaignByIdRequest, options?: AxiosRequestConfig) {
        return CampaignApiFp(this.configuration).getNewCampaignById(requestParameters.organizationId, requestParameters.campaignId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create new campaign objectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApi
     */
    public getNewCampaignObjectId(options?: AxiosRequestConfig) {
        return CampaignApiFp(this.configuration).getNewCampaignObjectId(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list all my pending campaign (Operator)
     * @param {CampaignApiGetPendingMyCampaignByOperatorIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApi
     */
    public getPendingMyCampaignByOperatorId(requestParameters: CampaignApiGetPendingMyCampaignByOperatorIdRequest, options?: AxiosRequestConfig) {
        return CampaignApiFp(this.configuration).getPendingMyCampaignByOperatorId(requestParameters.campaignId, requestParameters.operatorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list all my pending campaign (vendor)
     * @param {CampaignApiGetPendingMyCampaignByVendorIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApi
     */
    public getPendingMyCampaignByVendorId(requestParameters: CampaignApiGetPendingMyCampaignByVendorIdRequest, options?: AxiosRequestConfig) {
        return CampaignApiFp(this.configuration).getPendingMyCampaignByVendorId(requestParameters.organizationId, requestParameters.vendorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Operator reject for campaign
     * @param {CampaignApiRejectCampaignRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApi
     */
    public rejectCampaign(requestParameters: CampaignApiRejectCampaignRequest, options?: AxiosRequestConfig) {
        return CampaignApiFp(this.configuration).rejectCampaign(requestParameters.updateCampaignStatusDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary set flag to delete campaign
     * @param {CampaignApiSetDeletedFlagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApi
     */
    public setDeletedFlag(requestParameters: CampaignApiSetDeletedFlagRequest, options?: AxiosRequestConfig) {
        return CampaignApiFp(this.configuration).setDeletedFlag(requestParameters.campaignSetDeletedFlagDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set Favorite
     * @param {CampaignApiSetFavoriteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApi
     */
    public setFavorite(requestParameters: CampaignApiSetFavoriteRequest, options?: AxiosRequestConfig) {
        return CampaignApiFp(this.configuration).setFavorite(requestParameters.campaignSetFavoriteDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Vendor apply to campaign
     * @param {CampaignApiVendorApplyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignApi
     */
    public vendorApply(requestParameters: CampaignApiVendorApplyRequest, options?: AxiosRequestConfig) {
        return CampaignApiFp(this.configuration).vendorApply(requestParameters.campaignApplyVendorDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DeleteProposalFollowUpDto} deleteProposalFollowUpDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (deleteProposalFollowUpDto: DeleteProposalFollowUpDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteProposalFollowUpDto' is not null or undefined
            assertParamExists('_delete', 'deleteProposalFollowUpDto', deleteProposalFollowUpDto)
            const localVarPath = `/tender-proposal/follow-up/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteProposalFollowUpDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BaseNotificationDto} baseNotificationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete_1: async (baseNotificationDto: BaseNotificationDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseNotificationDto' is not null or undefined
            assertParamExists('_delete_1', 'baseNotificationDto', baseNotificationDto)
            const localVarPath = `/tender/notification/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(baseNotificationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BankListCreateDto} bankListCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBanks: async (bankListCreateDto: BankListCreateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bankListCreateDto' is not null or undefined
            assertParamExists('addBanks', 'bankListCreateDto', bankListCreateDto)
            const localVarPath = `/tender/proposal/payment/add-bank-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bankListCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateTrackBudgetDto} createTrackBudgetDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBudget: async (createTrackBudgetDto: CreateTrackBudgetDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTrackBudgetDto' is not null or undefined
            assertParamExists('addBudget', 'createTrackBudgetDto', createTrackBudgetDto)
            const localVarPath = `/tender/proposal/payment/add-track-budget`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTrackBudgetDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ChangeProposalStateDto} changeProposalStateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyChangeProposalState: async (changeProposalStateDto: ChangeProposalStateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'changeProposalStateDto' is not null or undefined
            assertParamExists('applyChangeProposalState', 'changeProposalStateDto', changeProposalStateDto)
            const localVarPath = `/tender-proposal/change-state-cqrs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changeProposalStateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EditRequestByIdDto} editRequestByIdDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveEditRequests: async (editRequestByIdDto: EditRequestByIdDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'editRequestByIdDto' is not null or undefined
            assertParamExists('approveEditRequests', 'editRequestByIdDto', editRequestByIdDto)
            const localVarPath = `/tender/client/approve-edit-requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editRequestByIdDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AskClosingReportDto} askClosingReportDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        askClosingReport: async (askClosingReportDto: AskClosingReportDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'askClosingReportDto' is not null or undefined
            assertParamExists('askClosingReport', 'askClosingReportDto', askClosingReportDto)
            const localVarPath = `/tender/proposal/payment/submit-closing-report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(askClosingReportDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AskAmandementRequestDto} askAmandementRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        askForAmandementRequest: async (askAmandementRequestDto: AskAmandementRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'askAmandementRequestDto' is not null or undefined
            assertParamExists('askForAmandementRequest', 'askAmandementRequestDto', askAmandementRequestDto)
            const localVarPath = `/tender-proposal/ask-amandement-request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(askAmandementRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ForgotPasswordRequestDto} forgotPasswordRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        askForgotPasswordUrl: async (forgotPasswordRequestDto: ForgotPasswordRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'forgotPasswordRequestDto' is not null or undefined
            assertParamExists('askForgotPasswordUrl', 'forgotPasswordRequestDto', forgotPasswordRequestDto)
            const localVarPath = `/tender-auth/ask-forgot-password-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgotPasswordRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpsertUserPermission} upsertUserPermission 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignNonprofit: async (upsertUserPermission: UpsertUserPermission, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'upsertUserPermission' is not null or undefined
            assertParamExists('assignNonprofit', 'upsertUserPermission', upsertUserPermission)
            const localVarPath = `/permission-manager/assign/nonprofit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(upsertUserPermission, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpsertUserPermission} upsertUserPermission 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignOperator: async (upsertUserPermission: UpsertUserPermission, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'upsertUserPermission' is not null or undefined
            assertParamExists('assignOperator', 'upsertUserPermission', upsertUserPermission)
            const localVarPath = `/permission-manager/assign/operator`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(upsertUserPermission, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpsertUserPermission} upsertUserPermission 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignVendor: async (upsertUserPermission: UpsertUserPermission, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'upsertUserPermission' is not null or undefined
            assertParamExists('assignVendor', 'upsertUserPermission', upsertUserPermission)
            const localVarPath = `/permission-manager/assign/vendor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(upsertUserPermission, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authzedTesting: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/authzed-tests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [employeeName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        avarageEmployeeTransaction: async (startDate: string, endDate: string, page?: number, limit?: number, sort?: string, sortingField?: string, employeeName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('avarageEmployeeTransaction', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('avarageEmployeeTransaction', 'endDate', endDate)
            const localVarPath = `/statistics/average-employee-transaction-time`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }

            if (employeeName !== undefined) {
                localVarQueryParameter['employee_name'] = employeeName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        averageTransaction: async (startDate: string, endDate: string, page?: number, limit?: number, sort?: string, sortingField?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('averageTransaction', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('averageTransaction', 'endDate', endDate)
            const localVarPath = `/statistics/average-track-transaction-time`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} sessionId 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        callback: async (sessionId: string, organizationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('callback', 'sessionId', sessionId)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('callback', 'organizationId', organizationId)
            const localVarPath = `/stripe/callback/success`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sessionId !== undefined) {
                localVarQueryParameter['session_id'] = sessionId;
            }

            if (organizationId !== undefined) {
                localVarQueryParameter['organizationId'] = organizationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} sessionId 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        callbackCart: async (sessionId: string, organizationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('callbackCart', 'sessionId', sessionId)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('callbackCart', 'organizationId', organizationId)
            const localVarPath = `/stripe/callbackCart/success`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sessionId !== undefined) {
                localVarQueryParameter['session_id'] = sessionId;
            }

            if (organizationId !== undefined) {
                localVarQueryParameter['organizationId'] = organizationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PaymentPaytabsCallbackDto} paymentPaytabsCallbackDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        callbackCart_2: async (paymentPaytabsCallbackDto: PaymentPaytabsCallbackDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentPaytabsCallbackDto' is not null or undefined
            assertParamExists('callbackCart_2', 'paymentPaytabsCallbackDto', paymentPaytabsCallbackDto)
            const localVarPath = `/paytabs/callback-cart`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentPaytabsCallbackDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        callbackPaymentIntent: async (body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('callbackPaymentIntent', 'body', body)
            const localVarPath = `/stripe/confirmPaymentIntent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PaymentPaytabsCallbackDto} paymentPaytabsCallbackDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        callbackSingle: async (paymentPaytabsCallbackDto: PaymentPaytabsCallbackDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentPaytabsCallbackDto' is not null or undefined
            assertParamExists('callbackSingle', 'paymentPaytabsCallbackDto', paymentPaytabsCallbackDto)
            const localVarPath = `/paytabs/callback-single`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentPaytabsCallbackDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ChangeProposalStateDto} changeProposalStateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeProposalState: async (changeProposalStateDto: ChangeProposalStateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'changeProposalStateDto' is not null or undefined
            assertParamExists('changeProposalState', 'changeProposalStateDto', changeProposalStateDto)
            const localVarPath = `/tender-proposal/change-state`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changeProposalStateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetByIdDto} getByIdDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completePayment: async (getByIdDto: GetByIdDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getByIdDto' is not null or undefined
            assertParamExists('completePayment', 'getByIdDto', getByIdDto)
            const localVarPath = `/tender/proposal/payment/complete-payment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getByIdDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/widget-backend/donation/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateAppointmentDto} createAppointmentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAppointment: async (createAppointmentDto: CreateAppointmentDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createAppointmentDto' is not null or undefined
            assertParamExists('createAppointment', 'createAppointmentDto', createAppointmentDto)
            const localVarPath = `/tender/appointments/create-appointment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAppointmentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBasket: async (body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createBasket', 'body', body)
            const localVarPath = `/widgets/basket/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBasketProject: async (body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createBasketProject', 'body', body)
            const localVarPath = `/widgets/basketProject/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Comment
         * @param {CreateCommentDto} createCommentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createComment: async (createCommentDto: CreateCommentDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCommentDto' is not null or undefined
            assertParamExists('createComment', 'createCommentDto', createCommentDto)
            const localVarPath = `/comments/createComment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCommentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateProposalFollowUpDto} createProposalFollowUpDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCqrs: async (createProposalFollowUpDto: CreateProposalFollowUpDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProposalFollowUpDto' is not null or undefined
            assertParamExists('createCqrs', 'createProposalFollowUpDto', createProposalFollowUpDto)
            const localVarPath = `/tender-proposal/follow-up/create-cqrs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProposalFollowUpDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDonate: async (body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createDonate', 'body', body)
            const localVarPath = `/zakat/donate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ClientEditRequestFieldDto} clientEditRequestFieldDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEditRequest: async (clientEditRequestFieldDto: ClientEditRequestFieldDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientEditRequestFieldDto' is not null or undefined
            assertParamExists('createEditRequest', 'clientEditRequestFieldDto', clientEditRequestFieldDto)
            const localVarPath = `/tender/client/edit-request/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clientEditRequestFieldDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExpense: async (body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createExpense', 'body', body)
            const localVarPath = `/zakat/expense/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateProposalInterceptorDto} createProposalInterceptorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProposal: async (createProposalInterceptorDto: CreateProposalInterceptorDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProposalInterceptorDto' is not null or undefined
            assertParamExists('createProposal', 'createProposalInterceptorDto', createProposalInterceptorDto)
            const localVarPath = `/tender-proposal/interceptor-create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProposalInterceptorDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateRoomChatDto} createRoomChatDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoomChat: async (createRoomChatDto: CreateRoomChatDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createRoomChatDto' is not null or undefined
            assertParamExists('createRoomChat', 'createRoomChatDto', createRoomChatDto)
            const localVarPath = `/tender/room-chats/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRoomChatDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TenderCreateUserDto} tenderCreateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (tenderCreateUserDto: TenderCreateUserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenderCreateUserDto' is not null or undefined
            assertParamExists('createUser', 'tenderCreateUserDto', tenderCreateUserDto)
            const localVarPath = `/tender-user/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tenderCreateUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateBeneficiariesDto} createBeneficiariesDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create_3: async (createBeneficiariesDto: CreateBeneficiariesDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createBeneficiariesDto' is not null or undefined
            assertParamExists('create_3', 'createBeneficiariesDto', createBeneficiariesDto)
            const localVarPath = `/tender/proposal/beneficiaries/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBeneficiariesDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateProposalFollowUpDto} createProposalFollowUpDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create_4: async (createProposalFollowUpDto: CreateProposalFollowUpDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProposalFollowUpDto' is not null or undefined
            assertParamExists('create_4', 'createProposalFollowUpDto', createProposalFollowUpDto)
            const localVarPath = `/tender-proposal/follow-up/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProposalFollowUpDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateTrackDto} createTrackDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create_5: async (createTrackDto: CreateTrackDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTrackDto' is not null or undefined
            assertParamExists('create_5', 'createTrackDto', createTrackDto)
            const localVarPath = `/tender/track/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTrackDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllMine: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tender/notification/delete-all-mine`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProposalDeleteDraftDto} proposalDeleteDraftDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDraft: async (proposalDeleteDraftDto: ProposalDeleteDraftDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'proposalDeleteDraftDto' is not null or undefined
            assertParamExists('deleteDraft', 'proposalDeleteDraftDto', proposalDeleteDraftDto)
            const localVarPath = `/tender-proposal/delete-draft`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(proposalDeleteDraftDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeleteTrackBudgetDto} deleteTrackBudgetDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTrackBudget: async (deleteTrackBudgetDto: DeleteTrackBudgetDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteTrackBudgetDto' is not null or undefined
            assertParamExists('deleteTrackBudget', 'deleteTrackBudgetDto', deleteTrackBudgetDto)
            const localVarPath = `/tender/proposal/payment/delete-track-budget`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteTrackBudgetDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TenderDeleteUserDto} tenderDeleteUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (tenderDeleteUserDto: TenderDeleteUserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenderDeleteUserDto' is not null or undefined
            assertParamExists('deleteUser', 'tenderDeleteUserDto', tenderDeleteUserDto)
            const localVarPath = `/tender-user/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tenderDeleteUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [trackName] 
         * @param {string} [includeGeneral] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAll: async (page?: number, limit?: number, sort?: string, sortingField?: string, trackName?: string, includeGeneral?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tender/track/fetch-all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (trackName !== undefined) {
                localVarQueryParameter['track_name'] = trackName;
            }

            if (includeGeneral !== undefined) {
                localVarQueryParameter['include_general'] = includeGeneral;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [fileName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAll_6: async (page?: number, limit?: number, sort?: string, sortingField?: string, fileName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tender/file-manager/fetch-all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (fileName !== undefined) {
                localVarQueryParameter['file_name'] = fileName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [projectName] 
         * @param {string} [entity] 
         * @param {string} [employeeName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAmandementList: async (page?: number, limit?: number, sort?: string, sortingField?: string, projectName?: string, entity?: string, employeeName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tender-proposal/amandement-lists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (projectName !== undefined) {
                localVarQueryParameter['project_name'] = projectName;
            }

            if (entity !== undefined) {
                localVarQueryParameter['entity'] = entity;
            }

            if (employeeName !== undefined) {
                localVarQueryParameter['employee_name'] = employeeName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [projectName] 
         * @param {string} [entity] 
         * @param {string} [employeeName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAmandementRequestList: async (page?: number, limit?: number, sort?: string, sortingField?: string, projectName?: string, entity?: string, employeeName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tender-proposal/amandement-request-lists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (projectName !== undefined) {
                localVarQueryParameter['project_name'] = projectName;
            }

            if (entity !== undefined) {
                localVarQueryParameter['entity'] = entity;
            }

            if (employeeName !== undefined) {
                localVarQueryParameter['employee_name'] = employeeName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [status] 
         * @param {number} [month] 
         * @param {number} [year] 
         * @param {string} [userId] 
         * @param {string} [employeeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAppointment: async (page?: number, limit?: number, sort?: string, sortingField?: string, status?: string, month?: number, year?: number, userId?: string, employeeId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tender/appointments/fetch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (employeeId !== undefined) {
                localVarQueryParameter['employee_id'] = employeeId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('fetchById', 'id', id)
            const localVarPath = `/tender-proposal/fetch-by-id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [projectName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchClosingReportList: async (page?: number, limit?: number, sort?: string, sortingField?: string, projectName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tender-proposal/closing-report-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (projectName !== undefined) {
                localVarQueryParameter['project_name'] = projectName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLastChat: async (page?: number, limit?: number, sort?: string, sortingField?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tender/room-chats/get-last-chat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [projectName] 
         * @param {Array<string>} [outterStatus] 
         * @param {number} [projectNumber] 
         * @param {string} [employeeName] 
         * @param {Array<string>} [projectTrack] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOldProposalList: async (page?: number, limit?: number, sort?: string, sortingField?: string, projectName?: string, outterStatus?: Array<string>, projectNumber?: number, employeeName?: string, projectTrack?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tender-proposal/old/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (projectName !== undefined) {
                localVarQueryParameter['project_name'] = projectName;
            }

            if (outterStatus) {
                localVarQueryParameter['outter_status'] = outterStatus;
            }

            if (projectNumber !== undefined) {
                localVarQueryParameter['project_number'] = projectNumber;
            }

            if (employeeName !== undefined) {
                localVarQueryParameter['employee_name'] = employeeName;
            }

            if (projectTrack) {
                localVarQueryParameter['project_track'] = projectTrack;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [type] 
         * @param {string} [projectName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPaymentAdjustment: async (page?: number, limit?: number, sort?: string, sortingField?: string, type?: string, projectName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tender-proposal/payment-adjustment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (projectName !== undefined) {
                localVarQueryParameter['project_name'] = projectName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [projectName] 
         * @param {Array<string>} [outterStatus] 
         * @param {number} [projectNumber] 
         * @param {string} [employeeName] 
         * @param {Array<string>} [projectTrack] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchProposalList: async (page?: number, limit?: number, sort?: string, sortingField?: string, projectName?: string, outterStatus?: Array<string>, projectNumber?: number, employeeName?: string, projectTrack?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tender-proposal/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (projectName !== undefined) {
                localVarQueryParameter['project_name'] = projectName;
            }

            if (outterStatus) {
                localVarQueryParameter['outter_status'] = outterStatus;
            }

            if (projectNumber !== undefined) {
                localVarQueryParameter['project_number'] = projectNumber;
            }

            if (employeeName !== undefined) {
                localVarQueryParameter['employee_name'] = employeeName;
            }

            if (projectTrack) {
                localVarQueryParameter['project_track'] = projectTrack;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [projectName] 
         * @param {string} [trackId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchRejectionList: async (page?: number, limit?: number, sort?: string, sortingField?: string, projectName?: string, trackId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tender-proposal/rejection-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (projectName !== undefined) {
                localVarQueryParameter['project_name'] = projectName;
            }

            if (trackId !== undefined) {
                localVarQueryParameter['track_id'] = trackId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTrack: async (page?: number, limit?: number, sort?: string, sortingField?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tender-proposal/fetch-track`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchingMetalPrice: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/zakat/metal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} requestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        find: async (requestId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestId' is not null or undefined
            assertParamExists('find', 'requestId', requestId)
            const localVarPath = `/tender/client/edit-request/find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (requestId !== undefined) {
                localVarQueryParameter['requestId'] = requestId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/widget-backend`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll_7: async (page?: number, limit?: number, sort?: string, sortingField?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tender/proposal/beneficiaries/find-all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findBankDetails: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('findBankDetails', 'id', id)
            const localVarPath = `/tender/proposal/payment/find-bank-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findBankList: async (page?: number, limit?: number, sort?: string, sortingField?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tender/proposal/payment/find-bank-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('findById', 'id', id)
            const localVarPath = `/tender/proposal/beneficiaries/find-by-id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {Array<string>} [relations] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findById_8: async (id: string, relations?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('findById_8', 'id', id)
            const localVarPath = `/tender-proposal/find-by-id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (relations) {
                localVarQueryParameter['relations'] = relations;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findClientProposalById: async (userId: string, page?: number, limit?: number, sort?: string, sortingField?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('findClientProposalById', 'userId', userId)
            const localVarPath = `/tender/client/proposals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user comment by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCommentById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('findCommentById', 'id', id)
            const localVarPath = `/comments/userComment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [associationName] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findEditRequest: async (page?: number, limit?: number, sort?: string, sortingField?: string, associationName?: string, status?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tender/client/edit-request/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (associationName !== undefined) {
                localVarQueryParameter['association_name'] = associationName;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [content] 
         * @param {string} [senderId] 
         * @param {string} [contentTitle] 
         * @param {string} [roomId] 
         * @param {string} [groupMessage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMessages: async (page?: number, limit?: number, sort?: string, sortingField?: string, content?: string, senderId?: string, contentTitle?: string, roomId?: string, groupMessage?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tender/messages/find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (content !== undefined) {
                localVarQueryParameter['content'] = content;
            }

            if (senderId !== undefined) {
                localVarQueryParameter['sender_id'] = senderId;
            }

            if (contentTitle !== undefined) {
                localVarQueryParameter['content_title'] = contentTitle;
            }

            if (roomId !== undefined) {
                localVarQueryParameter['room_id'] = roomId;
            }

            if (groupMessage !== undefined) {
                localVarQueryParameter['group_message'] = groupMessage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('findOne', 'id', id)
            const localVarPath = `/widget-backend/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user comment with filter
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [commentOwnerId] 
         * @param {string} [organizationId] 
         * @param {string} [parentCommentId] 
         * @param {string} [campaignId] 
         * @param {string} [projectId] 
         * @param {string} [itemId] 
         * @param {string} [sortBy] 
         * @param {string} [sortMethod] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOneComment: async (page?: number, limit?: number, sort?: string, sortingField?: string, commentOwnerId?: string, organizationId?: string, parentCommentId?: string, campaignId?: string, projectId?: string, itemId?: string, sortBy?: string, sortMethod?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/comments/findComment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (commentOwnerId !== undefined) {
                localVarQueryParameter['commentOwnerId'] = commentOwnerId;
            }

            if (organizationId !== undefined) {
                localVarQueryParameter['organizationId'] = organizationId;
            }

            if (parentCommentId !== undefined) {
                localVarQueryParameter['parentCommentId'] = parentCommentId;
            }

            if (campaignId !== undefined) {
                localVarQueryParameter['campaignId'] = campaignId;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['itemId'] = itemId;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortMethod !== undefined) {
                localVarQueryParameter['sortMethod'] = sortMethod;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [employeeName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findProposalList: async (page?: number, limit?: number, sort?: string, sortingField?: string, employeeName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tender/client/proposal/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (employeeName !== undefined) {
                localVarQueryParameter['employee_name'] = employeeName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findTrackBudgets: async (page?: number, limit?: number, sort?: string, sortingField?: string, id?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tender/proposal/payment/find-track-budgets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findTrackBudgetsByTrackId: async (page?: number, limit?: number, sort?: string, sortingField?: string, id?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tender/proposal/payment/find-track-budget`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [employeeName] 
         * @param {string} [associationName] 
         * @param {string} [trackId] 
         * @param {Array<string>} [userTypeId] 
         * @param {string} [employeePath] 
         * @param {string} [accountStatus] 
         * @param {string} [clientField] 
         * @param {string} [email] 
         * @param {string} [hideInternal] 
         * @param {string} [hideExternal] 
         * @param {string} [singleRole] 
         * @param {string} [includeSchedule] 
         * @param {string} [splitRoles] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUsers: async (page?: number, limit?: number, sort?: string, sortingField?: string, employeeName?: string, associationName?: string, trackId?: string, userTypeId?: Array<string>, employeePath?: string, accountStatus?: string, clientField?: string, email?: string, hideInternal?: string, hideExternal?: string, singleRole?: string, includeSchedule?: string, splitRoles?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tender-user/find-users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (employeeName !== undefined) {
                localVarQueryParameter['employee_name'] = employeeName;
            }

            if (associationName !== undefined) {
                localVarQueryParameter['association_name'] = associationName;
            }

            if (trackId !== undefined) {
                localVarQueryParameter['track_id'] = trackId;
            }

            if (userTypeId) {
                localVarQueryParameter['user_type_id'] = userTypeId;
            }

            if (employeePath !== undefined) {
                localVarQueryParameter['employee_path'] = employeePath;
            }

            if (accountStatus !== undefined) {
                localVarQueryParameter['account_status'] = accountStatus;
            }

            if (clientField !== undefined) {
                localVarQueryParameter['client_field'] = clientField;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (hideInternal !== undefined) {
                localVarQueryParameter['hide_internal'] = hideInternal;
            }

            if (hideExternal !== undefined) {
                localVarQueryParameter['hide_external'] = hideExternal;
            }

            if (singleRole !== undefined) {
                localVarQueryParameter['single_role'] = singleRole;
            }

            if (includeSchedule !== undefined) {
                localVarQueryParameter['include_schedule'] = includeSchedule;
            }

            if (splitRoles !== undefined) {
                localVarQueryParameter['split_roles'] = splitRoles;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ForgotPasswordRequestDto} forgotPasswordRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPasswordRequest: async (forgotPasswordRequestDto: ForgotPasswordRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'forgotPasswordRequestDto' is not null or undefined
            assertParamExists('forgotPasswordRequest', 'forgotPasswordRequestDto', forgotPasswordRequestDto)
            const localVarPath = `/tender-auth/forgot-password-request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgotPasswordRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login with fusion auth
         * @param {LoginRequestDto} loginRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fusionLogin: async (loginRequestDto: LoginRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequestDto' is not null or undefined
            assertParamExists('fusionLogin', 'loginRequestDto', loginRequestDto)
            const localVarPath = `/auth/fusion/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register user with fusion auth
         * @param {RegisterRequestDto} registerRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fusionRegister: async (registerRequestDto: RegisterRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerRequestDto' is not null or undefined
            assertParamExists('fusionRegister', 'registerRequestDto', registerRequestDto)
            const localVarPath = `/auth/fusion/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get ALL USER comment without paginated
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [commentOwnerId] 
         * @param {string} [organizationId] 
         * @param {string} [parentCommentId] 
         * @param {string} [campaignId] 
         * @param {string} [projectId] 
         * @param {string} [itemId] 
         * @param {string} [sortBy] 
         * @param {string} [sortMethod] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllComment: async (page?: number, limit?: number, sort?: string, sortingField?: string, commentOwnerId?: string, organizationId?: string, parentCommentId?: string, campaignId?: string, projectId?: string, itemId?: string, sortBy?: string, sortMethod?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/comments/allComment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (commentOwnerId !== undefined) {
                localVarQueryParameter['commentOwnerId'] = commentOwnerId;
            }

            if (organizationId !== undefined) {
                localVarQueryParameter['organizationId'] = organizationId;
            }

            if (parentCommentId !== undefined) {
                localVarQueryParameter['parentCommentId'] = parentCommentId;
            }

            if (campaignId !== undefined) {
                localVarQueryParameter['campaignId'] = campaignId;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['itemId'] = itemId;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortMethod !== undefined) {
                localVarQueryParameter['sortMethod'] = sortMethod;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get ALL USER Comment Paginated
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [commentOwnerId] 
         * @param {string} [organizationId] 
         * @param {string} [parentCommentId] 
         * @param {string} [campaignId] 
         * @param {string} [projectId] 
         * @param {string} [itemId] 
         * @param {string} [sortBy] 
         * @param {string} [sortMethod] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCommentPaginated: async (page?: number, limit?: number, sort?: string, sortingField?: string, commentOwnerId?: string, organizationId?: string, parentCommentId?: string, campaignId?: string, projectId?: string, itemId?: string, sortBy?: string, sortMethod?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/comments/allCommentsPaginated`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (commentOwnerId !== undefined) {
                localVarQueryParameter['commentOwnerId'] = commentOwnerId;
            }

            if (organizationId !== undefined) {
                localVarQueryParameter['organizationId'] = organizationId;
            }

            if (parentCommentId !== undefined) {
                localVarQueryParameter['parentCommentId'] = parentCommentId;
            }

            if (campaignId !== undefined) {
                localVarQueryParameter['campaignId'] = campaignId;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['itemId'] = itemId;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortMethod !== undefined) {
                localVarQueryParameter['sortMethod'] = sortMethod;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPartnersStatistics: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/statistics/partners`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllStatistics: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/statistics/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAmandementById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAmandementById', 'id', id)
            const localVarPath = `/tender-proposal/amandement`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} donorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasketList: async (donorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'donorId' is not null or undefined
            assertParamExists('getBasketList', 'donorId', donorId)
            const localVarPath = `/widgets/basket/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (donorId !== undefined) {
                localVarQueryParameter['donorId'] = donorId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBudgetInfo: async (startDate: string, endDate: string, page?: number, limit?: number, sort?: string, sortingField?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('getBudgetInfo', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('getBudgetInfo', 'endDate', endDate)
            const localVarPath = `/statistics/budget-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientSchedules: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getClientSchedules', 'id', id)
            const localVarPath = `/tender/schedules/client`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserTrack: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tender/client/current-user-track`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExpenseList: async (organizationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getExpenseList', 'organizationId', organizationId)
            const localVarPath = `/zakat/expense/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (organizationId !== undefined) {
                localVarQueryParameter['organizationId'] = organizationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHello: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} base 
         * @param {string} symbols 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetalPrice: async (base: string, symbols: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'base' is not null or undefined
            assertParamExists('getMetalPrice', 'base', base)
            // verify required parameter 'symbols' is not null or undefined
            assertParamExists('getMetalPrice', 'symbols', symbols)
            const localVarPath = `/zakat/metalprice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (base !== undefined) {
                localVarQueryParameter['base'] = base;
            }

            if (symbols !== undefined) {
                localVarQueryParameter['symbols'] = symbols;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [status] 
         * @param {number} [month] 
         * @param {number} [year] 
         * @param {string} [userId] 
         * @param {string} [employeeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyAppointments: async (page?: number, limit?: number, sort?: string, sortingField?: string, status?: string, month?: number, year?: number, userId?: string, employeeId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tender/appointments/mine`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (employeeId !== undefined) {
                localVarQueryParameter['employee_id'] = employeeId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get CURRENT USER comment
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [commentOwnerId] 
         * @param {string} [organizationId] 
         * @param {string} [parentCommentId] 
         * @param {string} [campaignId] 
         * @param {string} [projectId] 
         * @param {string} [itemId] 
         * @param {string} [sortBy] 
         * @param {string} [sortMethod] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyComment: async (page?: number, limit?: number, sort?: string, sortingField?: string, commentOwnerId?: string, organizationId?: string, parentCommentId?: string, campaignId?: string, projectId?: string, itemId?: string, sortBy?: string, sortMethod?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/comments/currentUserComment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (commentOwnerId !== undefined) {
                localVarQueryParameter['commentOwnerId'] = commentOwnerId;
            }

            if (organizationId !== undefined) {
                localVarQueryParameter['organizationId'] = organizationId;
            }

            if (parentCommentId !== undefined) {
                localVarQueryParameter['parentCommentId'] = parentCommentId;
            }

            if (campaignId !== undefined) {
                localVarQueryParameter['campaignId'] = campaignId;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['itemId'] = itemId;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortMethod !== undefined) {
                localVarQueryParameter['sortMethod'] = sortMethod;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get CURRENT USER comment PAGINATED
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [commentOwnerId] 
         * @param {string} [organizationId] 
         * @param {string} [parentCommentId] 
         * @param {string} [campaignId] 
         * @param {string} [projectId] 
         * @param {string} [itemId] 
         * @param {string} [sortBy] 
         * @param {string} [sortMethod] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyCommentPaginated: async (page?: number, limit?: number, sort?: string, sortingField?: string, commentOwnerId?: string, organizationId?: string, parentCommentId?: string, campaignId?: string, projectId?: string, itemId?: string, sortBy?: string, sortMethod?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/comments/currentUserCommentPaginated`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (commentOwnerId !== undefined) {
                localVarQueryParameter['commentOwnerId'] = commentOwnerId;
            }

            if (organizationId !== undefined) {
                localVarQueryParameter['organizationId'] = organizationId;
            }

            if (parentCommentId !== undefined) {
                localVarQueryParameter['parentCommentId'] = parentCommentId;
            }

            if (campaignId !== undefined) {
                localVarQueryParameter['campaignId'] = campaignId;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['itemId'] = itemId;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortMethod !== undefined) {
                localVarQueryParameter['sortMethod'] = sortMethod;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyProfile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tender/client/my-profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMySchedules: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tender/schedules/mine`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUser: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOneUser', 'id', id)
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPartnersReport: async (startDate: string, endDate: string, page?: number, limit?: number, sort?: string, sortingField?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('getPartnersReport', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('getPartnersReport', 'endDate', endDate)
            const localVarPath = `/statistics/partners-section`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPendingCount: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tender/client/edit-request/my-pending-count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {Array<string>} [outterStatus] 
         * @param {string} [projectName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPreviousProposal: async (page?: number, limit?: number, sort?: string, sortingField?: string, outterStatus?: Array<string>, projectName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tender-proposal/previous`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (outterStatus) {
                localVarQueryParameter['outter_status'] = outterStatus;
            }

            if (projectName !== undefined) {
                localVarQueryParameter['project_name'] = projectName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectBeneficiariesReport: async (startDate: string, endDate: string, page?: number, limit?: number, sort?: string, sortingField?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('getProjectBeneficiariesReport', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('getProjectBeneficiariesReport', 'endDate', endDate)
            const localVarPath = `/statistics/benificiaries-report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProposalCount: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tender-proposal/proposal-count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSummary: async (organizationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getSummary', 'organizationId', organizationId)
            const localVarPath = `/zakat/getSummary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (organizationId !== undefined) {
                localVarQueryParameter['organizationId'] = organizationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {string} sortStatus 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionAll: async (organizationId: string, sortStatus: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getTransactionAll', 'organizationId', organizationId)
            // verify required parameter 'sortStatus' is not null or undefined
            assertParamExists('getTransactionAll', 'sortStatus', sortStatus)
            const localVarPath = `/zakat/transactionAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (organizationId !== undefined) {
                localVarQueryParameter['organizationId'] = organizationId;
            }

            if (sortStatus !== undefined) {
                localVarQueryParameter['sortStatus'] = sortStatus;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {string} sortStatus 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionList: async (organizationId: string, sortStatus: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getTransactionList', 'organizationId', organizationId)
            // verify required parameter 'sortStatus' is not null or undefined
            assertParamExists('getTransactionList', 'sortStatus', sortStatus)
            const localVarPath = `/zakat/transactionList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (organizationId !== undefined) {
                localVarQueryParameter['organizationId'] = organizationId;
            }

            if (sortStatus !== undefined) {
                localVarQueryParameter['sortStatus'] = sortStatus;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login with fusion auth
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleLogin: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/google/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login with fusion auth
         * @param {HandleGoogleCallbackDto} handleGoogleCallbackDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleGoogleCallback: async (handleGoogleCallbackDto: HandleGoogleCallbackDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'handleGoogleCallbackDto' is not null or undefined
            assertParamExists('handleGoogleCallback', 'handleGoogleCallbackDto', handleGoogleCallbackDto)
            const localVarPath = `/auth/google/auth-callback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(handleGoogleCallbackDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BaseNotificationDto} baseNotificationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hide: async (baseNotificationDto: BaseNotificationDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseNotificationDto' is not null or undefined
            assertParamExists('hide', 'baseNotificationDto', baseNotificationDto)
            const localVarPath = `/tender/notification/hide`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(baseNotificationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hideAllMine: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tender/notification/hide-all-mine`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateProposalPaymentDto} createProposalPaymentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertPayment: async (createProposalPaymentDto: CreateProposalPaymentDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProposalPaymentDto' is not null or undefined
            assertParamExists('insertPayment', 'createProposalPaymentDto', createProposalPaymentDto)
            const localVarPath = `/tender/proposal/payment/insert-payment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProposalPaymentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateProposalPaymentDto} createProposalPaymentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertPayments: async (createProposalPaymentDto: CreateProposalPaymentDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProposalPaymentDto' is not null or undefined
            assertParamExists('insertPayments', 'createProposalPaymentDto', createProposalPaymentDto)
            const localVarPath = `/tender/proposal/payment/insert-payment-cqrs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProposalPaymentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProposalSaveDraftInterceptorDto} proposalSaveDraftInterceptorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        interceptorSaveDraft: async (proposalSaveDraftInterceptorDto: ProposalSaveDraftInterceptorDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'proposalSaveDraftInterceptorDto' is not null or undefined
            assertParamExists('interceptorSaveDraft', 'proposalSaveDraftInterceptorDto', proposalSaveDraftInterceptorDto)
            const localVarPath = `/tender-proposal/interceptor-save-draft`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(proposalSaveDraftInterceptorDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        liveness: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health/liveness`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginRequestDto} loginRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginRequestDto: LoginRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequestDto' is not null or undefined
            assertParamExists('login', 'loginRequestDto', loginRequestDto)
            const localVarPath = `/gs/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginRequestDto} loginRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login_9: async (loginRequestDto: LoginRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequestDto' is not null or undefined
            assertParamExists('login_9', 'loginRequestDto', loginRequestDto)
            const localVarPath = `/tender-auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        msegatTest: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tender/msegat-test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [senderId] 
         * @param {string} [receiverId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myInbox: async (page?: number, limit?: number, sort?: string, sortingField?: string, senderId?: string, receiverId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tender-email/my-inbox`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (senderId !== undefined) {
                localVarQueryParameter['sender_id'] = senderId;
            }

            if (receiverId !== undefined) {
                localVarQueryParameter['receiver_id'] = receiverId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [senderId] 
         * @param {string} [receiverId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myOutbox: async (page?: number, limit?: number, sort?: string, sortingField?: string, senderId?: string, receiverId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tender-email/my-outbox`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (senderId !== undefined) {
                localVarQueryParameter['sender_id'] = senderId;
            }

            if (receiverId !== undefined) {
                localVarQueryParameter['receiver_id'] = receiverId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginRequestDto} loginRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oldLogin: async (loginRequestDto: LoginRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequestDto' is not null or undefined
            assertParamExists('oldLogin', 'loginRequestDto', loginRequestDto)
            const localVarPath = `/tender-auth/old/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payStripWebHook: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/stripe/payStripeWebHook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEditRequest: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tender/edit-request-hook-handler`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BaseNotificationDto} baseNotificationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        read: async (baseNotificationDto: BaseNotificationDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseNotificationDto' is not null or undefined
            assertParamExists('read', 'baseNotificationDto', baseNotificationDto)
            const localVarPath = `/tender/notification/read`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(baseNotificationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tender/notification/read-mine`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readiness: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health/readiness`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterTenderDto} registerTenderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerClient: async (registerTenderDto: RegisterTenderDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerTenderDto' is not null or undefined
            assertParamExists('registerClient', 'registerTenderDto', registerTenderDto)
            const localVarPath = `/tender-auth/register-client`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerTenderDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterOrganizationDto} registerOrganizationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerOrganization: async (registerOrganizationDto: RegisterOrganizationDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerOrganizationDto' is not null or undefined
            assertParamExists('registerOrganization', 'registerOrganizationDto', registerOrganizationDto)
            const localVarPath = `/auth/register-organization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerOrganizationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GSRegisterRequestDto} gSRegisterRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register_10: async (gSRegisterRequestDto: GSRegisterRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gSRegisterRequestDto' is not null or undefined
            assertParamExists('register_10', 'gSRegisterRequestDto', gSRegisterRequestDto)
            const localVarPath = `/gs/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(gSRegisterRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterTenderDto} registerTenderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register_11: async (registerTenderDto: RegisterTenderDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerTenderDto' is not null or undefined
            assertParamExists('register_11', 'registerTenderDto', registerTenderDto)
            const localVarPath = `/tender-auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerTenderDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RejectEditRequestDto} rejectEditRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectEditRequests: async (rejectEditRequestDto: RejectEditRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rejectEditRequestDto' is not null or undefined
            assertParamExists('rejectEditRequests', 'rejectEditRequestDto', rejectEditRequestDto)
            const localVarPath = `/tender/client/reject-edit-requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rejectEditRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('remove', 'id', id)
            const localVarPath = `/widget-backend/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reqPayStripe: async (body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('reqPayStripe', 'body', body)
            const localVarPath = `/stripe/reqPayStripe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        request: async (body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('request', 'body', body)
            const localVarPath = `/stripe/request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestCart: async (body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('requestCart', 'body', body)
            const localVarPath = `/stripe/requestCart`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PaymentPaytabsDto} paymentPaytabsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestCart_12: async (paymentPaytabsDto: PaymentPaytabsDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentPaytabsDto' is not null or undefined
            assertParamExists('requestCart_12', 'paymentPaytabsDto', paymentPaytabsDto)
            const localVarPath = `/paytabs/request-cart`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentPaytabsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [type] 
         * @param {string} [trackId] 
         * @param {boolean} [vat] 
         * @param {string} [projectName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestInProcess: async (page?: number, limit?: number, sort?: string, sortingField?: string, type?: string, trackId?: string, vat?: boolean, projectName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tender-proposal/request-in-process`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (trackId !== undefined) {
                localVarQueryParameter['track_id'] = trackId;
            }

            if (vat !== undefined) {
                localVarQueryParameter['vat'] = vat;
            }

            if (projectName !== undefined) {
                localVarQueryParameter['project_name'] = projectName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PaymentPaytabsDto} paymentPaytabsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestSingle: async (paymentPaytabsDto: PaymentPaytabsDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentPaytabsDto' is not null or undefined
            assertParamExists('requestSingle', 'paymentPaytabsDto', paymentPaytabsDto)
            const localVarPath = `/paytabs/request-single`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentPaytabsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GSResetPassword} gSResetPassword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword: async (gSResetPassword: GSResetPassword, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gSResetPassword' is not null or undefined
            assertParamExists('resetPassword', 'gSResetPassword', gSResetPassword)
            const localVarPath = `/gs/auth/resetPassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(gSResetPassword, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ForgotPasswordRequestDto} forgotPasswordRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordRequest: async (forgotPasswordRequestDto: ForgotPasswordRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'forgotPasswordRequestDto' is not null or undefined
            assertParamExists('resetPasswordRequest', 'forgotPasswordRequestDto', forgotPasswordRequestDto)
            const localVarPath = `/tender-auth/reset-password-request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgotPasswordRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InvitationResponseDto} invitationResponseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        responseInvitation: async (invitationResponseDto: InvitationResponseDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'invitationResponseDto' is not null or undefined
            assertParamExists('responseInvitation', 'invitationResponseDto', invitationResponseDto)
            const localVarPath = `/tender/appointments/response-invitation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(invitationResponseDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SendNewEmailDto} sendNewEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        send: async (sendNewEmailDto: SendNewEmailDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendNewEmailDto' is not null or undefined
            assertParamExists('send', 'sendNewEmailDto', sendNewEmailDto)
            const localVarPath = `/tender-email/send`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendNewEmailDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SendAmandementDto} sendAmandementDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendAmandement: async (sendAmandementDto: SendAmandementDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendAmandementDto' is not null or undefined
            assertParamExists('sendAmandement', 'sendAmandementDto', sendAmandementDto)
            const localVarPath = `/tender-proposal/send-amandement`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendAmandementDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SendAmandementDto} sendAmandementDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendAmandementCqrs: async (sendAmandementDto: SendAmandementDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendAmandementDto' is not null or undefined
            assertParamExists('sendAmandementCqrs', 'sendAmandementDto', sendAmandementDto)
            const localVarPath = `/tender-proposal/send-amandement-cqrs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendAmandementDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SendClosingReportDto} sendClosingReportDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendCloseReport: async (sendClosingReportDto: SendClosingReportDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendClosingReportDto' is not null or undefined
            assertParamExists('sendCloseReport', 'sendClosingReportDto', sendClosingReportDto)
            const localVarPath = `/tender/proposal/payment/send-closing-report-cqrs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendClosingReportDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SendClosingReportDto} sendClosingReportDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendClosingReport: async (sendClosingReportDto: SendClosingReportDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendClosingReportDto' is not null or undefined
            assertParamExists('sendClosingReport', 'sendClosingReportDto', sendClosingReportDto)
            const localVarPath = `/tender/proposal/payment/send-closing-report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendClosingReportDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MessageDto} messageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmail: async (messageDto: MessageDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageDto' is not null or undefined
            assertParamExists('sendEmail', 'messageDto', messageDto)
            const localVarPath = `/contacts/send`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(messageDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SendEmailVerifDto} sendEmailVerifDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailVerif: async (sendEmailVerifDto: SendEmailVerifDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendEmailVerifDto' is not null or undefined
            assertParamExists('sendEmailVerif', 'sendEmailVerifDto', sendEmailVerifDto)
            const localVarPath = `/tender-auth/send-email-verif`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendEmailVerifDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SendRevisionDto} sendRevisionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendRevision: async (sendRevisionDto: SendRevisionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendRevisionDto' is not null or undefined
            assertParamExists('sendRevision', 'sendRevisionDto', sendRevisionDto)
            const localVarPath = `/tender-proposal/send-revision`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendRevisionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateMessageDto} createMessageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        send_13: async (createMessageDto: CreateMessageDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createMessageDto' is not null or undefined
            assertParamExists('send_13', 'createMessageDto', createMessageDto)
            const localVarPath = `/tender/messages/send`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMessageDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetByIdDto} getByIdDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        softDelete: async (getByIdDto: GetByIdDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getByIdDto' is not null or undefined
            assertParamExists('softDelete', 'getByIdDto', getByIdDto)
            const localVarPath = `/tender/proposal/payment/bank/soft-delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getByIdDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Soft delete comment
         * @param {DeleteCommentsDto} deleteCommentsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        softDeleteComment: async (deleteCommentsDto: DeleteCommentsDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteCommentsDto' is not null or undefined
            assertParamExists('softDeleteComment', 'deleteCommentsDto', deleteCommentsDto)
            const localVarPath = `/comments/softDeleteComments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteCommentsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Soft delete current user comment
         * @param {DeleteCommentsDto} deleteCommentsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        softDeleteMyComments: async (deleteCommentsDto: DeleteCommentsDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteCommentsDto' is not null or undefined
            assertParamExists('softDeleteMyComments', 'deleteCommentsDto', deleteCommentsDto)
            const localVarPath = `/comments/softDeleteMyComments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteCommentsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startup: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health/startup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SubmitChangePasswordDto} submitChangePasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitForgotPassword: async (submitChangePasswordDto: SubmitChangePasswordDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'submitChangePasswordDto' is not null or undefined
            assertParamExists('submitForgotPassword', 'submitChangePasswordDto', submitChangePasswordDto)
            const localVarPath = `/gs/auth/submit-change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(submitChangePasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SubmitChangePasswordDto} submitChangePasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitForgotPassword_14: async (submitChangePasswordDto: SubmitChangePasswordDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'submitChangePasswordDto' is not null or undefined
            assertParamExists('submitForgotPassword_14', 'submitChangePasswordDto', submitChangePasswordDto)
            const localVarPath = `/tender-auth/submit-change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(submitChangePasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testClusterAdmin: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/test-cluster-admin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testDonor: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/test-donor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testNonProfit: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/test-nonprofit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testOperator: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/test-operator`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testSuperAdmin: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/test-superadmin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testVendor: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/test-vendor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ToogleReadMessageDto} toogleReadMessageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toogleRead: async (toogleReadMessageDto: ToogleReadMessageDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'toogleReadMessageDto' is not null or undefined
            assertParamExists('toogleRead', 'toogleReadMessageDto', toogleReadMessageDto)
            const localVarPath = `/tender/messages/toogle-read`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(toogleReadMessageDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        twilioTest: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tender/twilio-test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (id: string, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('update', 'body', body)
            const localVarPath = `/widget-backend/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BankListCreateDto} bankListCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBanks: async (bankListCreateDto: BankListCreateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bankListCreateDto' is not null or undefined
            assertParamExists('updateBanks', 'bankListCreateDto', bankListCreateDto)
            const localVarPath = `/tender/proposal/payment/update-bank`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bankListCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} basketId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBasket: async (basketId: string, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'basketId' is not null or undefined
            assertParamExists('updateBasket', 'basketId', basketId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateBasket', 'body', body)
            const localVarPath = `/widgets/basket/{basketId}`
                .replace(`{${"basketId"}}`, encodeURIComponent(String(basketId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdatePaymentDto} updatePaymentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePayment: async (updatePaymentDto: UpdatePaymentDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updatePaymentDto' is not null or undefined
            assertParamExists('updatePayment', 'updatePaymentDto', updatePaymentDto)
            const localVarPath = `/tender/proposal/payment/update-payment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePaymentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdatePaymentDto} updatePaymentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePayments: async (updatePaymentDto: UpdatePaymentDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updatePaymentDto' is not null or undefined
            assertParamExists('updatePayments', 'updatePaymentDto', updatePaymentDto)
            const localVarPath = `/tender/proposal/payment/update-payment-cqrs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePaymentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateProfileDto} updateProfileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfile: async (updateProfileDto: UpdateProfileDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateProfileDto' is not null or undefined
            assertParamExists('updateProfile', 'updateProfileDto', updateProfileDto)
            const localVarPath = `/tender-user/update-profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProfileDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserStatusUpdateDto} userStatusUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStatus: async (userStatusUpdateDto: UserStatusUpdateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userStatusUpdateDto' is not null or undefined
            assertParamExists('updateStatus', 'userStatusUpdateDto', userStatusUpdateDto)
            const localVarPath = `/tender-user/update-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userStatusUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateTrackBudgetDto} updateTrackBudgetDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTrackBudget: async (updateTrackBudgetDto: UpdateTrackBudgetDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateTrackBudgetDto' is not null or undefined
            assertParamExists('updateTrackBudget', 'updateTrackBudgetDto', updateTrackBudgetDto)
            const localVarPath = `/tender/proposal/payment/update-track-budget`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTrackBudgetDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateUser', 'id', id)
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserProfile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/updateUserProfile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateUserDto} updateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser_15: async (updateUserDto: UpdateUserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateUserDto' is not null or undefined
            assertParamExists('updateUser_15', 'updateUserDto', updateUserDto)
            const localVarPath = `/tender-user/update-user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateBeneficiaryDto} updateBeneficiaryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update_16: async (updateBeneficiaryDto: UpdateBeneficiaryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateBeneficiaryDto' is not null or undefined
            assertParamExists('update_16', 'updateBeneficiaryDto', updateBeneficiaryDto)
            const localVarPath = `/tender/proposal/beneficiaries/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateBeneficiaryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateTrackDto} updateTrackDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update_17: async (updateTrackDto: UpdateTrackDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateTrackDto' is not null or undefined
            assertParamExists('update_17', 'updateTrackDto', updateTrackDto)
            const localVarPath = `/tender/track/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTrackDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateScheduleDto} createScheduleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertSchedules: async (createScheduleDto: CreateScheduleDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createScheduleDto' is not null or undefined
            assertParamExists('upsertSchedules', 'createScheduleDto', createScheduleDto)
            const localVarPath = `/tender/schedules/upsert-schedules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createScheduleDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyEmail: async (token: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('verifyEmail', 'token', token)
            const localVarPath = `/tender-auth/verify-email/{token}`
                .replace(`{${"token"}}`, encodeURIComponent(String(token)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GSVerifyUser} gSVerifyUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyUserCheck: async (gSVerifyUser: GSVerifyUser, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gSVerifyUser' is not null or undefined
            assertParamExists('verifyUserCheck', 'gSVerifyUser', gSVerifyUser)
            const localVarPath = `/gs/auth/verifyUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(gSVerifyUser, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {DeleteProposalFollowUpDto} deleteProposalFollowUpDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(deleteProposalFollowUpDto: DeleteProposalFollowUpDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(deleteProposalFollowUpDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {BaseNotificationDto} baseNotificationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete_1(baseNotificationDto: BaseNotificationDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete_1(baseNotificationDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {BankListCreateDto} bankListCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addBanks(bankListCreateDto: BankListCreateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addBanks(bankListCreateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateTrackBudgetDto} createTrackBudgetDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addBudget(createTrackBudgetDto: CreateTrackBudgetDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addBudget(createTrackBudgetDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ChangeProposalStateDto} changeProposalStateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applyChangeProposalState(changeProposalStateDto: ChangeProposalStateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.applyChangeProposalState(changeProposalStateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {EditRequestByIdDto} editRequestByIdDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approveEditRequests(editRequestByIdDto: EditRequestByIdDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.approveEditRequests(editRequestByIdDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AskClosingReportDto} askClosingReportDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async askClosingReport(askClosingReportDto: AskClosingReportDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.askClosingReport(askClosingReportDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AskAmandementRequestDto} askAmandementRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async askForAmandementRequest(askAmandementRequestDto: AskAmandementRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.askForAmandementRequest(askAmandementRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ForgotPasswordRequestDto} forgotPasswordRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async askForgotPasswordUrl(forgotPasswordRequestDto: ForgotPasswordRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.askForgotPasswordUrl(forgotPasswordRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpsertUserPermission} upsertUserPermission 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignNonprofit(upsertUserPermission: UpsertUserPermission, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignNonprofit(upsertUserPermission, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpsertUserPermission} upsertUserPermission 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignOperator(upsertUserPermission: UpsertUserPermission, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignOperator(upsertUserPermission, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpsertUserPermission} upsertUserPermission 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignVendor(upsertUserPermission: UpsertUserPermission, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignVendor(upsertUserPermission, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authzedTesting(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authzedTesting(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [employeeName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async avarageEmployeeTransaction(startDate: string, endDate: string, page?: number, limit?: number, sort?: string, sortingField?: string, employeeName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.avarageEmployeeTransaction(startDate, endDate, page, limit, sort, sortingField, employeeName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async averageTransaction(startDate: string, endDate: string, page?: number, limit?: number, sort?: string, sortingField?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.averageTransaction(startDate, endDate, page, limit, sort, sortingField, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} sessionId 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async callback(sessionId: string, organizationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.callback(sessionId, organizationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} sessionId 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async callbackCart(sessionId: string, organizationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.callbackCart(sessionId, organizationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PaymentPaytabsCallbackDto} paymentPaytabsCallbackDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async callbackCart_2(paymentPaytabsCallbackDto: PaymentPaytabsCallbackDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.callbackCart_2(paymentPaytabsCallbackDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async callbackPaymentIntent(body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.callbackPaymentIntent(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PaymentPaytabsCallbackDto} paymentPaytabsCallbackDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async callbackSingle(paymentPaytabsCallbackDto: PaymentPaytabsCallbackDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.callbackSingle(paymentPaytabsCallbackDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ChangeProposalStateDto} changeProposalStateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeProposalState(changeProposalStateDto: ChangeProposalStateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeProposalState(changeProposalStateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GetByIdDto} getByIdDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completePayment(getByIdDto: GetByIdDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.completePayment(getByIdDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateAppointmentDto} createAppointmentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAppointment(createAppointmentDto: CreateAppointmentDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAppointment(createAppointmentDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBasket(body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBasket(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBasketProject(body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBasketProject(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Comment
         * @param {CreateCommentDto} createCommentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createComment(createCommentDto: CreateCommentDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createComment(createCommentDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateProposalFollowUpDto} createProposalFollowUpDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCqrs(createProposalFollowUpDto: CreateProposalFollowUpDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCqrs(createProposalFollowUpDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDonate(body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDonate(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ClientEditRequestFieldDto} clientEditRequestFieldDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEditRequest(clientEditRequestFieldDto: ClientEditRequestFieldDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEditRequest(clientEditRequestFieldDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createExpense(body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createExpense(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateProposalInterceptorDto} createProposalInterceptorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProposal(createProposalInterceptorDto: CreateProposalInterceptorDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProposal(createProposalInterceptorDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateRoomChatDto} createRoomChatDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRoomChat(createRoomChatDto: CreateRoomChatDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRoomChat(createRoomChatDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TenderCreateUserDto} tenderCreateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(tenderCreateUserDto: TenderCreateUserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(tenderCreateUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateBeneficiariesDto} createBeneficiariesDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create_3(createBeneficiariesDto: CreateBeneficiariesDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create_3(createBeneficiariesDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateProposalFollowUpDto} createProposalFollowUpDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create_4(createProposalFollowUpDto: CreateProposalFollowUpDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create_4(createProposalFollowUpDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateTrackDto} createTrackDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create_5(createTrackDto: CreateTrackDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create_5(createTrackDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAllMine(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAllMine(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ProposalDeleteDraftDto} proposalDeleteDraftDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDraft(proposalDeleteDraftDto: ProposalDeleteDraftDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDraft(proposalDeleteDraftDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DeleteTrackBudgetDto} deleteTrackBudgetDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTrackBudget(deleteTrackBudgetDto: DeleteTrackBudgetDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTrackBudget(deleteTrackBudgetDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TenderDeleteUserDto} tenderDeleteUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(tenderDeleteUserDto: TenderDeleteUserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(tenderDeleteUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [trackName] 
         * @param {string} [includeGeneral] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchAll(page?: number, limit?: number, sort?: string, sortingField?: string, trackName?: string, includeGeneral?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchAll(page, limit, sort, sortingField, trackName, includeGeneral, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [fileName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchAll_6(page?: number, limit?: number, sort?: string, sortingField?: string, fileName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchAll_6(page, limit, sort, sortingField, fileName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [projectName] 
         * @param {string} [entity] 
         * @param {string} [employeeName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchAmandementList(page?: number, limit?: number, sort?: string, sortingField?: string, projectName?: string, entity?: string, employeeName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchAmandementList(page, limit, sort, sortingField, projectName, entity, employeeName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [projectName] 
         * @param {string} [entity] 
         * @param {string} [employeeName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchAmandementRequestList(page?: number, limit?: number, sort?: string, sortingField?: string, projectName?: string, entity?: string, employeeName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchAmandementRequestList(page, limit, sort, sortingField, projectName, entity, employeeName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [status] 
         * @param {number} [month] 
         * @param {number} [year] 
         * @param {string} [userId] 
         * @param {string} [employeeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchAppointment(page?: number, limit?: number, sort?: string, sortingField?: string, status?: string, month?: number, year?: number, userId?: string, employeeId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchAppointment(page, limit, sort, sortingField, status, month, year, userId, employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [projectName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchClosingReportList(page?: number, limit?: number, sort?: string, sortingField?: string, projectName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchClosingReportList(page, limit, sort, sortingField, projectName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLastChat(page?: number, limit?: number, sort?: string, sortingField?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchLastChat(page, limit, sort, sortingField, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [projectName] 
         * @param {Array<string>} [outterStatus] 
         * @param {number} [projectNumber] 
         * @param {string} [employeeName] 
         * @param {Array<string>} [projectTrack] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOldProposalList(page?: number, limit?: number, sort?: string, sortingField?: string, projectName?: string, outterStatus?: Array<string>, projectNumber?: number, employeeName?: string, projectTrack?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchOldProposalList(page, limit, sort, sortingField, projectName, outterStatus, projectNumber, employeeName, projectTrack, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [type] 
         * @param {string} [projectName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchPaymentAdjustment(page?: number, limit?: number, sort?: string, sortingField?: string, type?: string, projectName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchPaymentAdjustment(page, limit, sort, sortingField, type, projectName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [projectName] 
         * @param {Array<string>} [outterStatus] 
         * @param {number} [projectNumber] 
         * @param {string} [employeeName] 
         * @param {Array<string>} [projectTrack] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchProposalList(page?: number, limit?: number, sort?: string, sortingField?: string, projectName?: string, outterStatus?: Array<string>, projectNumber?: number, employeeName?: string, projectTrack?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchProposalList(page, limit, sort, sortingField, projectName, outterStatus, projectNumber, employeeName, projectTrack, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [projectName] 
         * @param {string} [trackId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchRejectionList(page?: number, limit?: number, sort?: string, sortingField?: string, projectName?: string, trackId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchRejectionList(page, limit, sort, sortingField, projectName, trackId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchTrack(page?: number, limit?: number, sort?: string, sortingField?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchTrack(page, limit, sort, sortingField, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchingMetalPrice(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchingMetalPrice(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} requestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async find(requestId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.find(requestId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAll_7(page?: number, limit?: number, sort?: string, sortingField?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAll_7(page, limit, sort, sortingField, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findBankDetails(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findBankDetails(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findBankList(page?: number, limit?: number, sort?: string, sortingField?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findBankList(page, limit, sort, sortingField, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {Array<string>} [relations] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findById_8(id: string, relations?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findById_8(id, relations, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} userId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findClientProposalById(userId: string, page?: number, limit?: number, sort?: string, sortingField?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findClientProposalById(userId, page, limit, sort, sortingField, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get user comment by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findCommentById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findCommentById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [associationName] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findEditRequest(page?: number, limit?: number, sort?: string, sortingField?: string, associationName?: string, status?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findEditRequest(page, limit, sort, sortingField, associationName, status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [content] 
         * @param {string} [senderId] 
         * @param {string} [contentTitle] 
         * @param {string} [roomId] 
         * @param {string} [groupMessage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findMessages(page?: number, limit?: number, sort?: string, sortingField?: string, content?: string, senderId?: string, contentTitle?: string, roomId?: string, groupMessage?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findMessages(page, limit, sort, sortingField, content, senderId, contentTitle, roomId, groupMessage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get user comment with filter
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [commentOwnerId] 
         * @param {string} [organizationId] 
         * @param {string} [parentCommentId] 
         * @param {string} [campaignId] 
         * @param {string} [projectId] 
         * @param {string} [itemId] 
         * @param {string} [sortBy] 
         * @param {string} [sortMethod] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findOneComment(page?: number, limit?: number, sort?: string, sortingField?: string, commentOwnerId?: string, organizationId?: string, parentCommentId?: string, campaignId?: string, projectId?: string, itemId?: string, sortBy?: string, sortMethod?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findOneComment(page, limit, sort, sortingField, commentOwnerId, organizationId, parentCommentId, campaignId, projectId, itemId, sortBy, sortMethod, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [employeeName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findProposalList(page?: number, limit?: number, sort?: string, sortingField?: string, employeeName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findProposalList(page, limit, sort, sortingField, employeeName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findTrackBudgets(page?: number, limit?: number, sort?: string, sortingField?: string, id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findTrackBudgets(page, limit, sort, sortingField, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findTrackBudgetsByTrackId(page?: number, limit?: number, sort?: string, sortingField?: string, id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findTrackBudgetsByTrackId(page, limit, sort, sortingField, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [employeeName] 
         * @param {string} [associationName] 
         * @param {string} [trackId] 
         * @param {Array<string>} [userTypeId] 
         * @param {string} [employeePath] 
         * @param {string} [accountStatus] 
         * @param {string} [clientField] 
         * @param {string} [email] 
         * @param {string} [hideInternal] 
         * @param {string} [hideExternal] 
         * @param {string} [singleRole] 
         * @param {string} [includeSchedule] 
         * @param {string} [splitRoles] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findUsers(page?: number, limit?: number, sort?: string, sortingField?: string, employeeName?: string, associationName?: string, trackId?: string, userTypeId?: Array<string>, employeePath?: string, accountStatus?: string, clientField?: string, email?: string, hideInternal?: string, hideExternal?: string, singleRole?: string, includeSchedule?: string, splitRoles?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findUsers(page, limit, sort, sortingField, employeeName, associationName, trackId, userTypeId, employeePath, accountStatus, clientField, email, hideInternal, hideExternal, singleRole, includeSchedule, splitRoles, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ForgotPasswordRequestDto} forgotPasswordRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async forgotPasswordRequest(forgotPasswordRequestDto: ForgotPasswordRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.forgotPasswordRequest(forgotPasswordRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Login with fusion auth
         * @param {LoginRequestDto} loginRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fusionLogin(loginRequestDto: LoginRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fusionLogin(loginRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Register user with fusion auth
         * @param {RegisterRequestDto} registerRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fusionRegister(registerRequestDto: RegisterRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fusionRegister(registerRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get ALL USER comment without paginated
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [commentOwnerId] 
         * @param {string} [organizationId] 
         * @param {string} [parentCommentId] 
         * @param {string} [campaignId] 
         * @param {string} [projectId] 
         * @param {string} [itemId] 
         * @param {string} [sortBy] 
         * @param {string} [sortMethod] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllComment(page?: number, limit?: number, sort?: string, sortingField?: string, commentOwnerId?: string, organizationId?: string, parentCommentId?: string, campaignId?: string, projectId?: string, itemId?: string, sortBy?: string, sortMethod?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllComment(page, limit, sort, sortingField, commentOwnerId, organizationId, parentCommentId, campaignId, projectId, itemId, sortBy, sortMethod, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get ALL USER Comment Paginated
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [commentOwnerId] 
         * @param {string} [organizationId] 
         * @param {string} [parentCommentId] 
         * @param {string} [campaignId] 
         * @param {string} [projectId] 
         * @param {string} [itemId] 
         * @param {string} [sortBy] 
         * @param {string} [sortMethod] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCommentPaginated(page?: number, limit?: number, sort?: string, sortingField?: string, commentOwnerId?: string, organizationId?: string, parentCommentId?: string, campaignId?: string, projectId?: string, itemId?: string, sortBy?: string, sortMethod?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCommentPaginated(page, limit, sort, sortingField, commentOwnerId, organizationId, parentCommentId, campaignId, projectId, itemId, sortBy, sortMethod, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPartnersStatistics(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPartnersStatistics(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllStatistics(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllStatistics(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAmandementById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAmandementById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} donorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBasketList(donorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBasketList(donorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBudgetInfo(startDate: string, endDate: string, page?: number, limit?: number, sort?: string, sortingField?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBudgetInfo(startDate, endDate, page, limit, sort, sortingField, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClientSchedules(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClientSchedules(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUserTrack(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUserTrack(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExpenseList(organizationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExpenseList(organizationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHello(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHello(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} base 
         * @param {string} symbols 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMetalPrice(base: string, symbols: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMetalPrice(base, symbols, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [status] 
         * @param {number} [month] 
         * @param {number} [year] 
         * @param {string} [userId] 
         * @param {string} [employeeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyAppointments(page?: number, limit?: number, sort?: string, sortingField?: string, status?: string, month?: number, year?: number, userId?: string, employeeId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyAppointments(page, limit, sort, sortingField, status, month, year, userId, employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get CURRENT USER comment
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [commentOwnerId] 
         * @param {string} [organizationId] 
         * @param {string} [parentCommentId] 
         * @param {string} [campaignId] 
         * @param {string} [projectId] 
         * @param {string} [itemId] 
         * @param {string} [sortBy] 
         * @param {string} [sortMethod] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyComment(page?: number, limit?: number, sort?: string, sortingField?: string, commentOwnerId?: string, organizationId?: string, parentCommentId?: string, campaignId?: string, projectId?: string, itemId?: string, sortBy?: string, sortMethod?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyComment(page, limit, sort, sortingField, commentOwnerId, organizationId, parentCommentId, campaignId, projectId, itemId, sortBy, sortMethod, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get CURRENT USER comment PAGINATED
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [commentOwnerId] 
         * @param {string} [organizationId] 
         * @param {string} [parentCommentId] 
         * @param {string} [campaignId] 
         * @param {string} [projectId] 
         * @param {string} [itemId] 
         * @param {string} [sortBy] 
         * @param {string} [sortMethod] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyCommentPaginated(page?: number, limit?: number, sort?: string, sortingField?: string, commentOwnerId?: string, organizationId?: string, parentCommentId?: string, campaignId?: string, projectId?: string, itemId?: string, sortBy?: string, sortMethod?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyCommentPaginated(page, limit, sort, sortingField, commentOwnerId, organizationId, parentCommentId, campaignId, projectId, itemId, sortBy, sortMethod, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyProfile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyProfile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMySchedules(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMySchedules(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOneUser(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOneUser(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPartnersReport(startDate: string, endDate: string, page?: number, limit?: number, sort?: string, sortingField?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPartnersReport(startDate, endDate, page, limit, sort, sortingField, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPendingCount(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPendingCount(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {Array<string>} [outterStatus] 
         * @param {string} [projectName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPreviousProposal(page?: number, limit?: number, sort?: string, sortingField?: string, outterStatus?: Array<string>, projectName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPreviousProposal(page, limit, sort, sortingField, outterStatus, projectName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectBeneficiariesReport(startDate: string, endDate: string, page?: number, limit?: number, sort?: string, sortingField?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectBeneficiariesReport(startDate, endDate, page, limit, sort, sortingField, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProposalCount(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProposalCount(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSummary(organizationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSummary(organizationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {string} sortStatus 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransactionAll(organizationId: string, sortStatus: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTransactionAll(organizationId, sortStatus, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {string} sortStatus 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransactionList(organizationId: string, sortStatus: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTransactionList(organizationId, sortStatus, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Login with fusion auth
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async googleLogin(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.googleLogin(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Login with fusion auth
         * @param {HandleGoogleCallbackDto} handleGoogleCallbackDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handleGoogleCallback(handleGoogleCallbackDto: HandleGoogleCallbackDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.handleGoogleCallback(handleGoogleCallbackDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {BaseNotificationDto} baseNotificationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hide(baseNotificationDto: BaseNotificationDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hide(baseNotificationDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hideAllMine(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hideAllMine(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateProposalPaymentDto} createProposalPaymentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insertPayment(createProposalPaymentDto: CreateProposalPaymentDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insertPayment(createProposalPaymentDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateProposalPaymentDto} createProposalPaymentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insertPayments(createProposalPaymentDto: CreateProposalPaymentDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insertPayments(createProposalPaymentDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ProposalSaveDraftInterceptorDto} proposalSaveDraftInterceptorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async interceptorSaveDraft(proposalSaveDraftInterceptorDto: ProposalSaveDraftInterceptorDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.interceptorSaveDraft(proposalSaveDraftInterceptorDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async liveness(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.liveness(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LoginRequestDto} loginRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginRequestDto: LoginRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LoginRequestDto} loginRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login_9(loginRequestDto: LoginRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login_9(loginRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async msegatTest(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.msegatTest(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [senderId] 
         * @param {string} [receiverId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async myInbox(page?: number, limit?: number, sort?: string, sortingField?: string, senderId?: string, receiverId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.myInbox(page, limit, sort, sortingField, senderId, receiverId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [senderId] 
         * @param {string} [receiverId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async myOutbox(page?: number, limit?: number, sort?: string, sortingField?: string, senderId?: string, receiverId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.myOutbox(page, limit, sort, sortingField, senderId, receiverId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LoginRequestDto} loginRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oldLogin(loginRequestDto: LoginRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oldLogin(loginRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async payStripWebHook(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.payStripWebHook(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postEditRequest(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postEditRequest(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {BaseNotificationDto} baseNotificationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async read(baseNotificationDto: BaseNotificationDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.read(baseNotificationDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readiness(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readiness(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RegisterTenderDto} registerTenderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerClient(registerTenderDto: RegisterTenderDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerClient(registerTenderDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RegisterOrganizationDto} registerOrganizationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerOrganization(registerOrganizationDto: RegisterOrganizationDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerOrganization(registerOrganizationDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GSRegisterRequestDto} gSRegisterRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register_10(gSRegisterRequestDto: GSRegisterRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register_10(gSRegisterRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RegisterTenderDto} registerTenderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register_11(registerTenderDto: RegisterTenderDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register_11(registerTenderDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RejectEditRequestDto} rejectEditRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rejectEditRequests(rejectEditRequestDto: RejectEditRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rejectEditRequests(rejectEditRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async remove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.remove(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reqPayStripe(body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reqPayStripe(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async request(body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.request(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestCart(body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestCart(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PaymentPaytabsDto} paymentPaytabsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestCart_12(paymentPaytabsDto: PaymentPaytabsDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestCart_12(paymentPaytabsDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [type] 
         * @param {string} [trackId] 
         * @param {boolean} [vat] 
         * @param {string} [projectName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestInProcess(page?: number, limit?: number, sort?: string, sortingField?: string, type?: string, trackId?: string, vat?: boolean, projectName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestInProcess(page, limit, sort, sortingField, type, trackId, vat, projectName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PaymentPaytabsDto} paymentPaytabsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestSingle(paymentPaytabsDto: PaymentPaytabsDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestSingle(paymentPaytabsDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GSResetPassword} gSResetPassword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPassword(gSResetPassword: GSResetPassword, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPassword(gSResetPassword, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ForgotPasswordRequestDto} forgotPasswordRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPasswordRequest(forgotPasswordRequestDto: ForgotPasswordRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPasswordRequest(forgotPasswordRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InvitationResponseDto} invitationResponseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async responseInvitation(invitationResponseDto: InvitationResponseDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.responseInvitation(invitationResponseDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SendNewEmailDto} sendNewEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async send(sendNewEmailDto: SendNewEmailDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.send(sendNewEmailDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SendAmandementDto} sendAmandementDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendAmandement(sendAmandementDto: SendAmandementDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendAmandement(sendAmandementDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SendAmandementDto} sendAmandementDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendAmandementCqrs(sendAmandementDto: SendAmandementDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendAmandementCqrs(sendAmandementDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SendClosingReportDto} sendClosingReportDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendCloseReport(sendClosingReportDto: SendClosingReportDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendCloseReport(sendClosingReportDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SendClosingReportDto} sendClosingReportDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendClosingReport(sendClosingReportDto: SendClosingReportDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendClosingReport(sendClosingReportDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {MessageDto} messageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendEmail(messageDto: MessageDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendEmail(messageDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SendEmailVerifDto} sendEmailVerifDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendEmailVerif(sendEmailVerifDto: SendEmailVerifDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendEmailVerif(sendEmailVerifDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SendRevisionDto} sendRevisionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendRevision(sendRevisionDto: SendRevisionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendRevision(sendRevisionDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateMessageDto} createMessageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async send_13(createMessageDto: CreateMessageDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.send_13(createMessageDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GetByIdDto} getByIdDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async softDelete(getByIdDto: GetByIdDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.softDelete(getByIdDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Soft delete comment
         * @param {DeleteCommentsDto} deleteCommentsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async softDeleteComment(deleteCommentsDto: DeleteCommentsDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.softDeleteComment(deleteCommentsDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Soft delete current user comment
         * @param {DeleteCommentsDto} deleteCommentsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async softDeleteMyComments(deleteCommentsDto: DeleteCommentsDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.softDeleteMyComments(deleteCommentsDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startup(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startup(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SubmitChangePasswordDto} submitChangePasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitForgotPassword(submitChangePasswordDto: SubmitChangePasswordDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitForgotPassword(submitChangePasswordDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SubmitChangePasswordDto} submitChangePasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitForgotPassword_14(submitChangePasswordDto: SubmitChangePasswordDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitForgotPassword_14(submitChangePasswordDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testClusterAdmin(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testClusterAdmin(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testDonor(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testDonor(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testNonProfit(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testNonProfit(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testOperator(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testOperator(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testSuperAdmin(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testSuperAdmin(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testVendor(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testVendor(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ToogleReadMessageDto} toogleReadMessageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toogleRead(toogleReadMessageDto: ToogleReadMessageDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toogleRead(toogleReadMessageDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async twilioTest(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.twilioTest(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(id: string, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {BankListCreateDto} bankListCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBanks(bankListCreateDto: BankListCreateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBanks(bankListCreateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} basketId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBasket(basketId: string, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBasket(basketId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdatePaymentDto} updatePaymentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePayment(updatePaymentDto: UpdatePaymentDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePayment(updatePaymentDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdatePaymentDto} updatePaymentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePayments(updatePaymentDto: UpdatePaymentDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePayments(updatePaymentDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateProfileDto} updateProfileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProfile(updateProfileDto: UpdateProfileDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProfile(updateProfileDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UserStatusUpdateDto} userStatusUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStatus(userStatusUpdateDto: UserStatusUpdateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStatus(userStatusUpdateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateTrackBudgetDto} updateTrackBudgetDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTrackBudget(updateTrackBudgetDto: UpdateTrackBudgetDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTrackBudget(updateTrackBudgetDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserProfile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserProfile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateUserDto} updateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser_15(updateUserDto: UpdateUserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser_15(updateUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateBeneficiaryDto} updateBeneficiaryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update_16(updateBeneficiaryDto: UpdateBeneficiaryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update_16(updateBeneficiaryDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateTrackDto} updateTrackDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update_17(updateTrackDto: UpdateTrackDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update_17(updateTrackDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateScheduleDto} createScheduleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upsertSchedules(createScheduleDto: CreateScheduleDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.upsertSchedules(createScheduleDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyEmail(token: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyEmail(token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GSVerifyUser} gSVerifyUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyUserCheck(gSVerifyUser: GSVerifyUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyUserCheck(gSVerifyUser, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {DefaultApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(requestParameters: DefaultApiDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp._delete(requestParameters.deleteProposalFollowUpDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiDelete0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete_1(requestParameters: DefaultApiDelete0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp._delete_1(requestParameters.baseNotificationDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiAddBanksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBanks(requestParameters: DefaultApiAddBanksRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addBanks(requestParameters.bankListCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiAddBudgetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBudget(requestParameters: DefaultApiAddBudgetRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addBudget(requestParameters.createTrackBudgetDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApplyChangeProposalStateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyChangeProposalState(requestParameters: DefaultApiApplyChangeProposalStateRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.applyChangeProposalState(requestParameters.changeProposalStateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApproveEditRequestsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveEditRequests(requestParameters: DefaultApiApproveEditRequestsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.approveEditRequests(requestParameters.editRequestByIdDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiAskClosingReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        askClosingReport(requestParameters: DefaultApiAskClosingReportRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.askClosingReport(requestParameters.askClosingReportDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiAskForAmandementRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        askForAmandementRequest(requestParameters: DefaultApiAskForAmandementRequestRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.askForAmandementRequest(requestParameters.askAmandementRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiAskForgotPasswordUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        askForgotPasswordUrl(requestParameters: DefaultApiAskForgotPasswordUrlRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.askForgotPasswordUrl(requestParameters.forgotPasswordRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiAssignNonprofitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignNonprofit(requestParameters: DefaultApiAssignNonprofitRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.assignNonprofit(requestParameters.upsertUserPermission, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiAssignOperatorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignOperator(requestParameters: DefaultApiAssignOperatorRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.assignOperator(requestParameters.upsertUserPermission, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiAssignVendorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignVendor(requestParameters: DefaultApiAssignVendorRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.assignVendor(requestParameters.upsertUserPermission, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authzedTesting(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authzedTesting(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiAvarageEmployeeTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        avarageEmployeeTransaction(requestParameters: DefaultApiAvarageEmployeeTransactionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.avarageEmployeeTransaction(requestParameters.startDate, requestParameters.endDate, requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.employeeName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiAverageTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        averageTransaction(requestParameters: DefaultApiAverageTransactionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.averageTransaction(requestParameters.startDate, requestParameters.endDate, requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiCallbackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        callback(requestParameters: DefaultApiCallbackRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.callback(requestParameters.sessionId, requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiCallbackCartRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        callbackCart(requestParameters: DefaultApiCallbackCartRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.callbackCart(requestParameters.sessionId, requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiCallbackCart0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        callbackCart_2(requestParameters: DefaultApiCallbackCart0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.callbackCart_2(requestParameters.paymentPaytabsCallbackDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiCallbackPaymentIntentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        callbackPaymentIntent(requestParameters: DefaultApiCallbackPaymentIntentRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.callbackPaymentIntent(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiCallbackSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        callbackSingle(requestParameters: DefaultApiCallbackSingleRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.callbackSingle(requestParameters.paymentPaytabsCallbackDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiChangeProposalStateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeProposalState(requestParameters: DefaultApiChangeProposalStateRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.changeProposalState(requestParameters.changeProposalStateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiCompletePaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completePayment(requestParameters: DefaultApiCompletePaymentRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.completePayment(requestParameters.getByIdDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.create(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiCreateAppointmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAppointment(requestParameters: DefaultApiCreateAppointmentRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createAppointment(requestParameters.createAppointmentDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiCreateBasketRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBasket(requestParameters: DefaultApiCreateBasketRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createBasket(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiCreateBasketProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBasketProject(requestParameters: DefaultApiCreateBasketProjectRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createBasketProject(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Comment
         * @param {DefaultApiCreateCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createComment(requestParameters: DefaultApiCreateCommentRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createComment(requestParameters.createCommentDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiCreateCqrsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCqrs(requestParameters: DefaultApiCreateCqrsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createCqrs(requestParameters.createProposalFollowUpDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiCreateDonateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDonate(requestParameters: DefaultApiCreateDonateRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createDonate(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiCreateEditRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEditRequest(requestParameters: DefaultApiCreateEditRequestRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createEditRequest(requestParameters.clientEditRequestFieldDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiCreateExpenseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExpense(requestParameters: DefaultApiCreateExpenseRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createExpense(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiCreateProposalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProposal(requestParameters: DefaultApiCreateProposalRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createProposal(requestParameters.createProposalInterceptorDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiCreateRoomChatRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoomChat(requestParameters: DefaultApiCreateRoomChatRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createRoomChat(requestParameters.createRoomChatDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiCreateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(requestParameters: DefaultApiCreateUserRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createUser(requestParameters.tenderCreateUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiCreate0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create_3(requestParameters: DefaultApiCreate0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.create_3(requestParameters.createBeneficiariesDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiCreate1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create_4(requestParameters: DefaultApiCreate1Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.create_4(requestParameters.createProposalFollowUpDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiCreate2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create_5(requestParameters: DefaultApiCreate2Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.create_5(requestParameters.createTrackDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllMine(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteAllMine(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiDeleteDraftRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDraft(requestParameters: DefaultApiDeleteDraftRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteDraft(requestParameters.proposalDeleteDraftDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiDeleteTrackBudgetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTrackBudget(requestParameters: DefaultApiDeleteTrackBudgetRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteTrackBudget(requestParameters.deleteTrackBudgetDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiDeleteUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(requestParameters: DefaultApiDeleteUserRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteUser(requestParameters.tenderDeleteUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiFetchAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAll(requestParameters: DefaultApiFetchAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.fetchAll(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.trackName, requestParameters.includeGeneral, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiFetchAll0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAll_6(requestParameters: DefaultApiFetchAll0Request = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.fetchAll_6(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.fileName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiFetchAmandementListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAmandementList(requestParameters: DefaultApiFetchAmandementListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.fetchAmandementList(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.projectName, requestParameters.entity, requestParameters.employeeName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiFetchAmandementRequestListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAmandementRequestList(requestParameters: DefaultApiFetchAmandementRequestListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.fetchAmandementRequestList(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.projectName, requestParameters.entity, requestParameters.employeeName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiFetchAppointmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAppointment(requestParameters: DefaultApiFetchAppointmentRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.fetchAppointment(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.status, requestParameters.month, requestParameters.year, requestParameters.userId, requestParameters.employeeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiFetchByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchById(requestParameters: DefaultApiFetchByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.fetchById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiFetchClosingReportListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchClosingReportList(requestParameters: DefaultApiFetchClosingReportListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.fetchClosingReportList(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.projectName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiFetchLastChatRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLastChat(requestParameters: DefaultApiFetchLastChatRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.fetchLastChat(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiFetchOldProposalListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOldProposalList(requestParameters: DefaultApiFetchOldProposalListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.fetchOldProposalList(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.projectName, requestParameters.outterStatus, requestParameters.projectNumber, requestParameters.employeeName, requestParameters.projectTrack, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiFetchPaymentAdjustmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPaymentAdjustment(requestParameters: DefaultApiFetchPaymentAdjustmentRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.fetchPaymentAdjustment(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.type, requestParameters.projectName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiFetchProposalListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchProposalList(requestParameters: DefaultApiFetchProposalListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.fetchProposalList(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.projectName, requestParameters.outterStatus, requestParameters.projectNumber, requestParameters.employeeName, requestParameters.projectTrack, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiFetchRejectionListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchRejectionList(requestParameters: DefaultApiFetchRejectionListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.fetchRejectionList(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.projectName, requestParameters.trackId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiFetchTrackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTrack(requestParameters: DefaultApiFetchTrackRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.fetchTrack(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchingMetalPrice(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.fetchingMetalPrice(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiFindRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        find(requestParameters: DefaultApiFindRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.find(requestParameters.requestId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.findAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiFindAll0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll_7(requestParameters: DefaultApiFindAll0Request = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.findAll_7(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiFindBankDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findBankDetails(requestParameters: DefaultApiFindBankDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.findBankDetails(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiFindBankListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findBankList(requestParameters: DefaultApiFindBankListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.findBankList(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiFindByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findById(requestParameters: DefaultApiFindByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.findById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiFindById0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findById_8(requestParameters: DefaultApiFindById0Request, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.findById_8(requestParameters.id, requestParameters.relations, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiFindClientProposalByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findClientProposalById(requestParameters: DefaultApiFindClientProposalByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.findClientProposalById(requestParameters.userId, requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user comment by id
         * @param {DefaultApiFindCommentByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCommentById(requestParameters: DefaultApiFindCommentByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.findCommentById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiFindEditRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findEditRequest(requestParameters: DefaultApiFindEditRequestRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.findEditRequest(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.associationName, requestParameters.status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiFindMessagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMessages(requestParameters: DefaultApiFindMessagesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.findMessages(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.content, requestParameters.senderId, requestParameters.contentTitle, requestParameters.roomId, requestParameters.groupMessage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiFindOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOne(requestParameters: DefaultApiFindOneRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.findOne(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user comment with filter
         * @param {DefaultApiFindOneCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOneComment(requestParameters: DefaultApiFindOneCommentRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.findOneComment(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.commentOwnerId, requestParameters.organizationId, requestParameters.parentCommentId, requestParameters.campaignId, requestParameters.projectId, requestParameters.itemId, requestParameters.sortBy, requestParameters.sortMethod, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiFindProposalListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findProposalList(requestParameters: DefaultApiFindProposalListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.findProposalList(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.employeeName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiFindTrackBudgetsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findTrackBudgets(requestParameters: DefaultApiFindTrackBudgetsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.findTrackBudgets(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiFindTrackBudgetsByTrackIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findTrackBudgetsByTrackId(requestParameters: DefaultApiFindTrackBudgetsByTrackIdRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.findTrackBudgetsByTrackId(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiFindUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUsers(requestParameters: DefaultApiFindUsersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.findUsers(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.employeeName, requestParameters.associationName, requestParameters.trackId, requestParameters.userTypeId, requestParameters.employeePath, requestParameters.accountStatus, requestParameters.clientField, requestParameters.email, requestParameters.hideInternal, requestParameters.hideExternal, requestParameters.singleRole, requestParameters.includeSchedule, requestParameters.splitRoles, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiForgotPasswordRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPasswordRequest(requestParameters: DefaultApiForgotPasswordRequestRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.forgotPasswordRequest(requestParameters.forgotPasswordRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login with fusion auth
         * @param {DefaultApiFusionLoginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fusionLogin(requestParameters: DefaultApiFusionLoginRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.fusionLogin(requestParameters.loginRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register user with fusion auth
         * @param {DefaultApiFusionRegisterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fusionRegister(requestParameters: DefaultApiFusionRegisterRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.fusionRegister(requestParameters.registerRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get ALL USER comment without paginated
         * @param {DefaultApiGetAllCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllComment(requestParameters: DefaultApiGetAllCommentRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAllComment(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.commentOwnerId, requestParameters.organizationId, requestParameters.parentCommentId, requestParameters.campaignId, requestParameters.projectId, requestParameters.itemId, requestParameters.sortBy, requestParameters.sortMethod, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get ALL USER Comment Paginated
         * @param {DefaultApiGetAllCommentPaginatedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCommentPaginated(requestParameters: DefaultApiGetAllCommentPaginatedRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAllCommentPaginated(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.commentOwnerId, requestParameters.organizationId, requestParameters.parentCommentId, requestParameters.campaignId, requestParameters.projectId, requestParameters.itemId, requestParameters.sortBy, requestParameters.sortMethod, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPartnersStatistics(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAllPartnersStatistics(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllStatistics(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAllStatistics(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUser(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAllUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiGetAmandementByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAmandementById(requestParameters: DefaultApiGetAmandementByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAmandementById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiGetBasketListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasketList(requestParameters: DefaultApiGetBasketListRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getBasketList(requestParameters.donorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiGetBudgetInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBudgetInfo(requestParameters: DefaultApiGetBudgetInfoRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getBudgetInfo(requestParameters.startDate, requestParameters.endDate, requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiGetClientSchedulesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientSchedules(requestParameters: DefaultApiGetClientSchedulesRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getClientSchedules(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserTrack(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getCurrentUserTrack(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiGetExpenseListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExpenseList(requestParameters: DefaultApiGetExpenseListRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getExpenseList(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHello(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getHello(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiGetMetalPriceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetalPrice(requestParameters: DefaultApiGetMetalPriceRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getMetalPrice(requestParameters.base, requestParameters.symbols, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiGetMyAppointmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyAppointments(requestParameters: DefaultApiGetMyAppointmentsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getMyAppointments(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.status, requestParameters.month, requestParameters.year, requestParameters.userId, requestParameters.employeeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get CURRENT USER comment
         * @param {DefaultApiGetMyCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyComment(requestParameters: DefaultApiGetMyCommentRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getMyComment(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.commentOwnerId, requestParameters.organizationId, requestParameters.parentCommentId, requestParameters.campaignId, requestParameters.projectId, requestParameters.itemId, requestParameters.sortBy, requestParameters.sortMethod, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get CURRENT USER comment PAGINATED
         * @param {DefaultApiGetMyCommentPaginatedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyCommentPaginated(requestParameters: DefaultApiGetMyCommentPaginatedRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getMyCommentPaginated(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.commentOwnerId, requestParameters.organizationId, requestParameters.parentCommentId, requestParameters.campaignId, requestParameters.projectId, requestParameters.itemId, requestParameters.sortBy, requestParameters.sortMethod, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyProfile(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getMyProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMySchedules(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getMySchedules(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiGetOneUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUser(requestParameters: DefaultApiGetOneUserRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getOneUser(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiGetPartnersReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPartnersReport(requestParameters: DefaultApiGetPartnersReportRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getPartnersReport(requestParameters.startDate, requestParameters.endDate, requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPendingCount(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getPendingCount(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiGetPreviousProposalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPreviousProposal(requestParameters: DefaultApiGetPreviousProposalRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getPreviousProposal(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.outterStatus, requestParameters.projectName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiGetProjectBeneficiariesReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectBeneficiariesReport(requestParameters: DefaultApiGetProjectBeneficiariesReportRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getProjectBeneficiariesReport(requestParameters.startDate, requestParameters.endDate, requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProposalCount(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getProposalCount(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiGetSummaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSummary(requestParameters: DefaultApiGetSummaryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getSummary(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiGetTransactionAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionAll(requestParameters: DefaultApiGetTransactionAllRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getTransactionAll(requestParameters.organizationId, requestParameters.sortStatus, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiGetTransactionListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionList(requestParameters: DefaultApiGetTransactionListRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getTransactionList(requestParameters.organizationId, requestParameters.sortStatus, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login with fusion auth
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleLogin(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.googleLogin(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login with fusion auth
         * @param {DefaultApiHandleGoogleCallbackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleGoogleCallback(requestParameters: DefaultApiHandleGoogleCallbackRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.handleGoogleCallback(requestParameters.handleGoogleCallbackDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiHideRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hide(requestParameters: DefaultApiHideRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.hide(requestParameters.baseNotificationDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hideAllMine(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.hideAllMine(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiInsertPaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertPayment(requestParameters: DefaultApiInsertPaymentRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.insertPayment(requestParameters.createProposalPaymentDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiInsertPaymentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertPayments(requestParameters: DefaultApiInsertPaymentsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.insertPayments(requestParameters.createProposalPaymentDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiInterceptorSaveDraftRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        interceptorSaveDraft(requestParameters: DefaultApiInterceptorSaveDraftRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.interceptorSaveDraft(requestParameters.proposalSaveDraftInterceptorDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        liveness(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.liveness(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiLoginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(requestParameters: DefaultApiLoginRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.login(requestParameters.loginRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiLogin0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login_9(requestParameters: DefaultApiLogin0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.login_9(requestParameters.loginRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        msegatTest(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.msegatTest(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiMyInboxRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myInbox(requestParameters: DefaultApiMyInboxRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.myInbox(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.senderId, requestParameters.receiverId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiMyOutboxRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myOutbox(requestParameters: DefaultApiMyOutboxRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.myOutbox(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.senderId, requestParameters.receiverId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiOldLoginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oldLogin(requestParameters: DefaultApiOldLoginRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.oldLogin(requestParameters.loginRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payStripWebHook(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.payStripWebHook(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEditRequest(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postEditRequest(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiReadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        read(requestParameters: DefaultApiReadRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.read(requestParameters.baseNotificationDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAll(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.readAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readiness(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.readiness(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.register(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiRegisterClientRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerClient(requestParameters: DefaultApiRegisterClientRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.registerClient(requestParameters.registerTenderDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiRegisterOrganizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerOrganization(requestParameters: DefaultApiRegisterOrganizationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.registerOrganization(requestParameters.registerOrganizationDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiRegister0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register_10(requestParameters: DefaultApiRegister0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.register_10(requestParameters.gSRegisterRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiRegister1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register_11(requestParameters: DefaultApiRegister1Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.register_11(requestParameters.registerTenderDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiRejectEditRequestsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectEditRequests(requestParameters: DefaultApiRejectEditRequestsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.rejectEditRequests(requestParameters.rejectEditRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove(requestParameters: DefaultApiRemoveRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.remove(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiReqPayStripeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reqPayStripe(requestParameters: DefaultApiReqPayStripeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.reqPayStripe(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        request(requestParameters: DefaultApiRequestRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.request(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiRequestCartRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestCart(requestParameters: DefaultApiRequestCartRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.requestCart(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiRequestCart0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestCart_12(requestParameters: DefaultApiRequestCart0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.requestCart_12(requestParameters.paymentPaytabsDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiRequestInProcessRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestInProcess(requestParameters: DefaultApiRequestInProcessRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.requestInProcess(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.type, requestParameters.trackId, requestParameters.vat, requestParameters.projectName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiRequestSingleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestSingle(requestParameters: DefaultApiRequestSingleRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.requestSingle(requestParameters.paymentPaytabsDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiResetPasswordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword(requestParameters: DefaultApiResetPasswordRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.resetPassword(requestParameters.gSResetPassword, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiResetPasswordRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordRequest(requestParameters: DefaultApiResetPasswordRequestRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.resetPasswordRequest(requestParameters.forgotPasswordRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiResponseInvitationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        responseInvitation(requestParameters: DefaultApiResponseInvitationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.responseInvitation(requestParameters.invitationResponseDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiSendRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        send(requestParameters: DefaultApiSendRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.send(requestParameters.sendNewEmailDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiSendAmandementRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendAmandement(requestParameters: DefaultApiSendAmandementRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sendAmandement(requestParameters.sendAmandementDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiSendAmandementCqrsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendAmandementCqrs(requestParameters: DefaultApiSendAmandementCqrsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sendAmandementCqrs(requestParameters.sendAmandementDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiSendCloseReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendCloseReport(requestParameters: DefaultApiSendCloseReportRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sendCloseReport(requestParameters.sendClosingReportDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiSendClosingReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendClosingReport(requestParameters: DefaultApiSendClosingReportRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sendClosingReport(requestParameters.sendClosingReportDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiSendEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmail(requestParameters: DefaultApiSendEmailRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sendEmail(requestParameters.messageDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiSendEmailVerifRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailVerif(requestParameters: DefaultApiSendEmailVerifRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sendEmailVerif(requestParameters.sendEmailVerifDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiSendRevisionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendRevision(requestParameters: DefaultApiSendRevisionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sendRevision(requestParameters.sendRevisionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiSend0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        send_13(requestParameters: DefaultApiSend0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.send_13(requestParameters.createMessageDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiSoftDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        softDelete(requestParameters: DefaultApiSoftDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.softDelete(requestParameters.getByIdDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Soft delete comment
         * @param {DefaultApiSoftDeleteCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        softDeleteComment(requestParameters: DefaultApiSoftDeleteCommentRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.softDeleteComment(requestParameters.deleteCommentsDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Soft delete current user comment
         * @param {DefaultApiSoftDeleteMyCommentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        softDeleteMyComments(requestParameters: DefaultApiSoftDeleteMyCommentsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.softDeleteMyComments(requestParameters.deleteCommentsDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startup(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.startup(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiSubmitForgotPasswordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitForgotPassword(requestParameters: DefaultApiSubmitForgotPasswordRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.submitForgotPassword(requestParameters.submitChangePasswordDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiSubmitForgotPassword0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitForgotPassword_14(requestParameters: DefaultApiSubmitForgotPassword0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.submitForgotPassword_14(requestParameters.submitChangePasswordDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testClusterAdmin(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.testClusterAdmin(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testDonor(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.testDonor(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testNonProfit(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.testNonProfit(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testOperator(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.testOperator(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testSuperAdmin(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.testSuperAdmin(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testVendor(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.testVendor(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiToogleReadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toogleRead(requestParameters: DefaultApiToogleReadRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.toogleRead(requestParameters.toogleReadMessageDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        twilioTest(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.twilioTest(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters: DefaultApiUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.update(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiUpdateBanksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBanks(requestParameters: DefaultApiUpdateBanksRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateBanks(requestParameters.bankListCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiUpdateBasketRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBasket(requestParameters: DefaultApiUpdateBasketRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateBasket(requestParameters.basketId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiUpdatePaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePayment(requestParameters: DefaultApiUpdatePaymentRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatePayment(requestParameters.updatePaymentDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiUpdatePaymentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePayments(requestParameters: DefaultApiUpdatePaymentsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatePayments(requestParameters.updatePaymentDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiUpdateProfileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfile(requestParameters: DefaultApiUpdateProfileRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateProfile(requestParameters.updateProfileDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiUpdateStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStatus(requestParameters: DefaultApiUpdateStatusRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateStatus(requestParameters.userStatusUpdateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiUpdateTrackBudgetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTrackBudget(requestParameters: DefaultApiUpdateTrackBudgetRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateTrackBudget(requestParameters.updateTrackBudgetDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiUpdateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(requestParameters: DefaultApiUpdateUserRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateUser(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserProfile(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateUserProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiUpdateUser0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser_15(requestParameters: DefaultApiUpdateUser0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateUser_15(requestParameters.updateUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiUpdate0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update_16(requestParameters: DefaultApiUpdate0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.update_16(requestParameters.updateBeneficiaryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiUpdate1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update_17(requestParameters: DefaultApiUpdate1Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.update_17(requestParameters.updateTrackDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiUpsertSchedulesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertSchedules(requestParameters: DefaultApiUpsertSchedulesRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.upsertSchedules(requestParameters.createScheduleDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiVerifyEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyEmail(requestParameters: DefaultApiVerifyEmailRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.verifyEmail(requestParameters.token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiVerifyUserCheckRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyUserCheck(requestParameters: DefaultApiVerifyUserCheckRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.verifyUserCheck(requestParameters.gSVerifyUser, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for _delete operation in DefaultApi.
 * @export
 * @interface DefaultApiDeleteRequest
 */
export interface DefaultApiDeleteRequest {
    /**
     * 
     * @type {DeleteProposalFollowUpDto}
     * @memberof DefaultApiDelete
     */
    readonly deleteProposalFollowUpDto: DeleteProposalFollowUpDto
}

/**
 * Request parameters for _delete_1 operation in DefaultApi.
 * @export
 * @interface DefaultApiDelete0Request
 */
export interface DefaultApiDelete0Request {
    /**
     * 
     * @type {BaseNotificationDto}
     * @memberof DefaultApiDelete0
     */
    readonly baseNotificationDto: BaseNotificationDto
}

/**
 * Request parameters for addBanks operation in DefaultApi.
 * @export
 * @interface DefaultApiAddBanksRequest
 */
export interface DefaultApiAddBanksRequest {
    /**
     * 
     * @type {BankListCreateDto}
     * @memberof DefaultApiAddBanks
     */
    readonly bankListCreateDto: BankListCreateDto
}

/**
 * Request parameters for addBudget operation in DefaultApi.
 * @export
 * @interface DefaultApiAddBudgetRequest
 */
export interface DefaultApiAddBudgetRequest {
    /**
     * 
     * @type {CreateTrackBudgetDto}
     * @memberof DefaultApiAddBudget
     */
    readonly createTrackBudgetDto: CreateTrackBudgetDto
}

/**
 * Request parameters for applyChangeProposalState operation in DefaultApi.
 * @export
 * @interface DefaultApiApplyChangeProposalStateRequest
 */
export interface DefaultApiApplyChangeProposalStateRequest {
    /**
     * 
     * @type {ChangeProposalStateDto}
     * @memberof DefaultApiApplyChangeProposalState
     */
    readonly changeProposalStateDto: ChangeProposalStateDto
}

/**
 * Request parameters for approveEditRequests operation in DefaultApi.
 * @export
 * @interface DefaultApiApproveEditRequestsRequest
 */
export interface DefaultApiApproveEditRequestsRequest {
    /**
     * 
     * @type {EditRequestByIdDto}
     * @memberof DefaultApiApproveEditRequests
     */
    readonly editRequestByIdDto: EditRequestByIdDto
}

/**
 * Request parameters for askClosingReport operation in DefaultApi.
 * @export
 * @interface DefaultApiAskClosingReportRequest
 */
export interface DefaultApiAskClosingReportRequest {
    /**
     * 
     * @type {AskClosingReportDto}
     * @memberof DefaultApiAskClosingReport
     */
    readonly askClosingReportDto: AskClosingReportDto
}

/**
 * Request parameters for askForAmandementRequest operation in DefaultApi.
 * @export
 * @interface DefaultApiAskForAmandementRequestRequest
 */
export interface DefaultApiAskForAmandementRequestRequest {
    /**
     * 
     * @type {AskAmandementRequestDto}
     * @memberof DefaultApiAskForAmandementRequest
     */
    readonly askAmandementRequestDto: AskAmandementRequestDto
}

/**
 * Request parameters for askForgotPasswordUrl operation in DefaultApi.
 * @export
 * @interface DefaultApiAskForgotPasswordUrlRequest
 */
export interface DefaultApiAskForgotPasswordUrlRequest {
    /**
     * 
     * @type {ForgotPasswordRequestDto}
     * @memberof DefaultApiAskForgotPasswordUrl
     */
    readonly forgotPasswordRequestDto: ForgotPasswordRequestDto
}

/**
 * Request parameters for assignNonprofit operation in DefaultApi.
 * @export
 * @interface DefaultApiAssignNonprofitRequest
 */
export interface DefaultApiAssignNonprofitRequest {
    /**
     * 
     * @type {UpsertUserPermission}
     * @memberof DefaultApiAssignNonprofit
     */
    readonly upsertUserPermission: UpsertUserPermission
}

/**
 * Request parameters for assignOperator operation in DefaultApi.
 * @export
 * @interface DefaultApiAssignOperatorRequest
 */
export interface DefaultApiAssignOperatorRequest {
    /**
     * 
     * @type {UpsertUserPermission}
     * @memberof DefaultApiAssignOperator
     */
    readonly upsertUserPermission: UpsertUserPermission
}

/**
 * Request parameters for assignVendor operation in DefaultApi.
 * @export
 * @interface DefaultApiAssignVendorRequest
 */
export interface DefaultApiAssignVendorRequest {
    /**
     * 
     * @type {UpsertUserPermission}
     * @memberof DefaultApiAssignVendor
     */
    readonly upsertUserPermission: UpsertUserPermission
}

/**
 * Request parameters for avarageEmployeeTransaction operation in DefaultApi.
 * @export
 * @interface DefaultApiAvarageEmployeeTransactionRequest
 */
export interface DefaultApiAvarageEmployeeTransactionRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiAvarageEmployeeTransaction
     */
    readonly startDate: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiAvarageEmployeeTransaction
     */
    readonly endDate: string

    /**
     * 
     * @type {number}
     * @memberof DefaultApiAvarageEmployeeTransaction
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiAvarageEmployeeTransaction
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiAvarageEmployeeTransaction
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiAvarageEmployeeTransaction
     */
    readonly sortingField?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiAvarageEmployeeTransaction
     */
    readonly employeeName?: string
}

/**
 * Request parameters for averageTransaction operation in DefaultApi.
 * @export
 * @interface DefaultApiAverageTransactionRequest
 */
export interface DefaultApiAverageTransactionRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiAverageTransaction
     */
    readonly startDate: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiAverageTransaction
     */
    readonly endDate: string

    /**
     * 
     * @type {number}
     * @memberof DefaultApiAverageTransaction
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiAverageTransaction
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiAverageTransaction
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiAverageTransaction
     */
    readonly sortingField?: string
}

/**
 * Request parameters for callback operation in DefaultApi.
 * @export
 * @interface DefaultApiCallbackRequest
 */
export interface DefaultApiCallbackRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiCallback
     */
    readonly sessionId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiCallback
     */
    readonly organizationId: string
}

/**
 * Request parameters for callbackCart operation in DefaultApi.
 * @export
 * @interface DefaultApiCallbackCartRequest
 */
export interface DefaultApiCallbackCartRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiCallbackCart
     */
    readonly sessionId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiCallbackCart
     */
    readonly organizationId: string
}

/**
 * Request parameters for callbackCart_2 operation in DefaultApi.
 * @export
 * @interface DefaultApiCallbackCart0Request
 */
export interface DefaultApiCallbackCart0Request {
    /**
     * 
     * @type {PaymentPaytabsCallbackDto}
     * @memberof DefaultApiCallbackCart0
     */
    readonly paymentPaytabsCallbackDto: PaymentPaytabsCallbackDto
}

/**
 * Request parameters for callbackPaymentIntent operation in DefaultApi.
 * @export
 * @interface DefaultApiCallbackPaymentIntentRequest
 */
export interface DefaultApiCallbackPaymentIntentRequest {
    /**
     * 
     * @type {object}
     * @memberof DefaultApiCallbackPaymentIntent
     */
    readonly body: object
}

/**
 * Request parameters for callbackSingle operation in DefaultApi.
 * @export
 * @interface DefaultApiCallbackSingleRequest
 */
export interface DefaultApiCallbackSingleRequest {
    /**
     * 
     * @type {PaymentPaytabsCallbackDto}
     * @memberof DefaultApiCallbackSingle
     */
    readonly paymentPaytabsCallbackDto: PaymentPaytabsCallbackDto
}

/**
 * Request parameters for changeProposalState operation in DefaultApi.
 * @export
 * @interface DefaultApiChangeProposalStateRequest
 */
export interface DefaultApiChangeProposalStateRequest {
    /**
     * 
     * @type {ChangeProposalStateDto}
     * @memberof DefaultApiChangeProposalState
     */
    readonly changeProposalStateDto: ChangeProposalStateDto
}

/**
 * Request parameters for completePayment operation in DefaultApi.
 * @export
 * @interface DefaultApiCompletePaymentRequest
 */
export interface DefaultApiCompletePaymentRequest {
    /**
     * 
     * @type {GetByIdDto}
     * @memberof DefaultApiCompletePayment
     */
    readonly getByIdDto: GetByIdDto
}

/**
 * Request parameters for createAppointment operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateAppointmentRequest
 */
export interface DefaultApiCreateAppointmentRequest {
    /**
     * 
     * @type {CreateAppointmentDto}
     * @memberof DefaultApiCreateAppointment
     */
    readonly createAppointmentDto: CreateAppointmentDto
}

/**
 * Request parameters for createBasket operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateBasketRequest
 */
export interface DefaultApiCreateBasketRequest {
    /**
     * 
     * @type {object}
     * @memberof DefaultApiCreateBasket
     */
    readonly body: object
}

/**
 * Request parameters for createBasketProject operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateBasketProjectRequest
 */
export interface DefaultApiCreateBasketProjectRequest {
    /**
     * 
     * @type {object}
     * @memberof DefaultApiCreateBasketProject
     */
    readonly body: object
}

/**
 * Request parameters for createComment operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateCommentRequest
 */
export interface DefaultApiCreateCommentRequest {
    /**
     * 
     * @type {CreateCommentDto}
     * @memberof DefaultApiCreateComment
     */
    readonly createCommentDto: CreateCommentDto
}

/**
 * Request parameters for createCqrs operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateCqrsRequest
 */
export interface DefaultApiCreateCqrsRequest {
    /**
     * 
     * @type {CreateProposalFollowUpDto}
     * @memberof DefaultApiCreateCqrs
     */
    readonly createProposalFollowUpDto: CreateProposalFollowUpDto
}

/**
 * Request parameters for createDonate operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateDonateRequest
 */
export interface DefaultApiCreateDonateRequest {
    /**
     * 
     * @type {object}
     * @memberof DefaultApiCreateDonate
     */
    readonly body: object
}

/**
 * Request parameters for createEditRequest operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateEditRequestRequest
 */
export interface DefaultApiCreateEditRequestRequest {
    /**
     * 
     * @type {ClientEditRequestFieldDto}
     * @memberof DefaultApiCreateEditRequest
     */
    readonly clientEditRequestFieldDto: ClientEditRequestFieldDto
}

/**
 * Request parameters for createExpense operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateExpenseRequest
 */
export interface DefaultApiCreateExpenseRequest {
    /**
     * 
     * @type {object}
     * @memberof DefaultApiCreateExpense
     */
    readonly body: object
}

/**
 * Request parameters for createProposal operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateProposalRequest
 */
export interface DefaultApiCreateProposalRequest {
    /**
     * 
     * @type {CreateProposalInterceptorDto}
     * @memberof DefaultApiCreateProposal
     */
    readonly createProposalInterceptorDto: CreateProposalInterceptorDto
}

/**
 * Request parameters for createRoomChat operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateRoomChatRequest
 */
export interface DefaultApiCreateRoomChatRequest {
    /**
     * 
     * @type {CreateRoomChatDto}
     * @memberof DefaultApiCreateRoomChat
     */
    readonly createRoomChatDto: CreateRoomChatDto
}

/**
 * Request parameters for createUser operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateUserRequest
 */
export interface DefaultApiCreateUserRequest {
    /**
     * 
     * @type {TenderCreateUserDto}
     * @memberof DefaultApiCreateUser
     */
    readonly tenderCreateUserDto: TenderCreateUserDto
}

/**
 * Request parameters for create_3 operation in DefaultApi.
 * @export
 * @interface DefaultApiCreate0Request
 */
export interface DefaultApiCreate0Request {
    /**
     * 
     * @type {CreateBeneficiariesDto}
     * @memberof DefaultApiCreate0
     */
    readonly createBeneficiariesDto: CreateBeneficiariesDto
}

/**
 * Request parameters for create_4 operation in DefaultApi.
 * @export
 * @interface DefaultApiCreate1Request
 */
export interface DefaultApiCreate1Request {
    /**
     * 
     * @type {CreateProposalFollowUpDto}
     * @memberof DefaultApiCreate1
     */
    readonly createProposalFollowUpDto: CreateProposalFollowUpDto
}

/**
 * Request parameters for create_5 operation in DefaultApi.
 * @export
 * @interface DefaultApiCreate2Request
 */
export interface DefaultApiCreate2Request {
    /**
     * 
     * @type {CreateTrackDto}
     * @memberof DefaultApiCreate2
     */
    readonly createTrackDto: CreateTrackDto
}

/**
 * Request parameters for deleteDraft operation in DefaultApi.
 * @export
 * @interface DefaultApiDeleteDraftRequest
 */
export interface DefaultApiDeleteDraftRequest {
    /**
     * 
     * @type {ProposalDeleteDraftDto}
     * @memberof DefaultApiDeleteDraft
     */
    readonly proposalDeleteDraftDto: ProposalDeleteDraftDto
}

/**
 * Request parameters for deleteTrackBudget operation in DefaultApi.
 * @export
 * @interface DefaultApiDeleteTrackBudgetRequest
 */
export interface DefaultApiDeleteTrackBudgetRequest {
    /**
     * 
     * @type {DeleteTrackBudgetDto}
     * @memberof DefaultApiDeleteTrackBudget
     */
    readonly deleteTrackBudgetDto: DeleteTrackBudgetDto
}

/**
 * Request parameters for deleteUser operation in DefaultApi.
 * @export
 * @interface DefaultApiDeleteUserRequest
 */
export interface DefaultApiDeleteUserRequest {
    /**
     * 
     * @type {TenderDeleteUserDto}
     * @memberof DefaultApiDeleteUser
     */
    readonly tenderDeleteUserDto: TenderDeleteUserDto
}

/**
 * Request parameters for fetchAll operation in DefaultApi.
 * @export
 * @interface DefaultApiFetchAllRequest
 */
export interface DefaultApiFetchAllRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiFetchAll
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiFetchAll
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchAll
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchAll
     */
    readonly sortingField?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchAll
     */
    readonly trackName?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchAll
     */
    readonly includeGeneral?: string
}

/**
 * Request parameters for fetchAll_6 operation in DefaultApi.
 * @export
 * @interface DefaultApiFetchAll0Request
 */
export interface DefaultApiFetchAll0Request {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiFetchAll0
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiFetchAll0
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchAll0
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchAll0
     */
    readonly sortingField?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchAll0
     */
    readonly fileName?: string
}

/**
 * Request parameters for fetchAmandementList operation in DefaultApi.
 * @export
 * @interface DefaultApiFetchAmandementListRequest
 */
export interface DefaultApiFetchAmandementListRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiFetchAmandementList
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiFetchAmandementList
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchAmandementList
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchAmandementList
     */
    readonly sortingField?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchAmandementList
     */
    readonly projectName?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchAmandementList
     */
    readonly entity?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchAmandementList
     */
    readonly employeeName?: string
}

/**
 * Request parameters for fetchAmandementRequestList operation in DefaultApi.
 * @export
 * @interface DefaultApiFetchAmandementRequestListRequest
 */
export interface DefaultApiFetchAmandementRequestListRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiFetchAmandementRequestList
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiFetchAmandementRequestList
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchAmandementRequestList
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchAmandementRequestList
     */
    readonly sortingField?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchAmandementRequestList
     */
    readonly projectName?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchAmandementRequestList
     */
    readonly entity?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchAmandementRequestList
     */
    readonly employeeName?: string
}

/**
 * Request parameters for fetchAppointment operation in DefaultApi.
 * @export
 * @interface DefaultApiFetchAppointmentRequest
 */
export interface DefaultApiFetchAppointmentRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiFetchAppointment
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiFetchAppointment
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchAppointment
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchAppointment
     */
    readonly sortingField?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchAppointment
     */
    readonly status?: string

    /**
     * 
     * @type {number}
     * @memberof DefaultApiFetchAppointment
     */
    readonly month?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiFetchAppointment
     */
    readonly year?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchAppointment
     */
    readonly userId?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchAppointment
     */
    readonly employeeId?: string
}

/**
 * Request parameters for fetchById operation in DefaultApi.
 * @export
 * @interface DefaultApiFetchByIdRequest
 */
export interface DefaultApiFetchByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchById
     */
    readonly id: string
}

/**
 * Request parameters for fetchClosingReportList operation in DefaultApi.
 * @export
 * @interface DefaultApiFetchClosingReportListRequest
 */
export interface DefaultApiFetchClosingReportListRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiFetchClosingReportList
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiFetchClosingReportList
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchClosingReportList
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchClosingReportList
     */
    readonly sortingField?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchClosingReportList
     */
    readonly projectName?: string
}

/**
 * Request parameters for fetchLastChat operation in DefaultApi.
 * @export
 * @interface DefaultApiFetchLastChatRequest
 */
export interface DefaultApiFetchLastChatRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiFetchLastChat
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiFetchLastChat
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchLastChat
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchLastChat
     */
    readonly sortingField?: string
}

/**
 * Request parameters for fetchOldProposalList operation in DefaultApi.
 * @export
 * @interface DefaultApiFetchOldProposalListRequest
 */
export interface DefaultApiFetchOldProposalListRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiFetchOldProposalList
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiFetchOldProposalList
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchOldProposalList
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchOldProposalList
     */
    readonly sortingField?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchOldProposalList
     */
    readonly projectName?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof DefaultApiFetchOldProposalList
     */
    readonly outterStatus?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DefaultApiFetchOldProposalList
     */
    readonly projectNumber?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchOldProposalList
     */
    readonly employeeName?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof DefaultApiFetchOldProposalList
     */
    readonly projectTrack?: Array<string>
}

/**
 * Request parameters for fetchPaymentAdjustment operation in DefaultApi.
 * @export
 * @interface DefaultApiFetchPaymentAdjustmentRequest
 */
export interface DefaultApiFetchPaymentAdjustmentRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiFetchPaymentAdjustment
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiFetchPaymentAdjustment
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchPaymentAdjustment
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchPaymentAdjustment
     */
    readonly sortingField?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchPaymentAdjustment
     */
    readonly type?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchPaymentAdjustment
     */
    readonly projectName?: string
}

/**
 * Request parameters for fetchProposalList operation in DefaultApi.
 * @export
 * @interface DefaultApiFetchProposalListRequest
 */
export interface DefaultApiFetchProposalListRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiFetchProposalList
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiFetchProposalList
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchProposalList
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchProposalList
     */
    readonly sortingField?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchProposalList
     */
    readonly projectName?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof DefaultApiFetchProposalList
     */
    readonly outterStatus?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof DefaultApiFetchProposalList
     */
    readonly projectNumber?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchProposalList
     */
    readonly employeeName?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof DefaultApiFetchProposalList
     */
    readonly projectTrack?: Array<string>
}

/**
 * Request parameters for fetchRejectionList operation in DefaultApi.
 * @export
 * @interface DefaultApiFetchRejectionListRequest
 */
export interface DefaultApiFetchRejectionListRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiFetchRejectionList
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiFetchRejectionList
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchRejectionList
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchRejectionList
     */
    readonly sortingField?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchRejectionList
     */
    readonly projectName?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchRejectionList
     */
    readonly trackId?: string
}

/**
 * Request parameters for fetchTrack operation in DefaultApi.
 * @export
 * @interface DefaultApiFetchTrackRequest
 */
export interface DefaultApiFetchTrackRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiFetchTrack
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiFetchTrack
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchTrack
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFetchTrack
     */
    readonly sortingField?: string
}

/**
 * Request parameters for find operation in DefaultApi.
 * @export
 * @interface DefaultApiFindRequest
 */
export interface DefaultApiFindRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiFind
     */
    readonly requestId: string
}

/**
 * Request parameters for findAll_7 operation in DefaultApi.
 * @export
 * @interface DefaultApiFindAll0Request
 */
export interface DefaultApiFindAll0Request {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiFindAll0
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiFindAll0
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindAll0
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindAll0
     */
    readonly sortingField?: string
}

/**
 * Request parameters for findBankDetails operation in DefaultApi.
 * @export
 * @interface DefaultApiFindBankDetailsRequest
 */
export interface DefaultApiFindBankDetailsRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindBankDetails
     */
    readonly id: string
}

/**
 * Request parameters for findBankList operation in DefaultApi.
 * @export
 * @interface DefaultApiFindBankListRequest
 */
export interface DefaultApiFindBankListRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiFindBankList
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiFindBankList
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindBankList
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindBankList
     */
    readonly sortingField?: string
}

/**
 * Request parameters for findById operation in DefaultApi.
 * @export
 * @interface DefaultApiFindByIdRequest
 */
export interface DefaultApiFindByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindById
     */
    readonly id: string
}

/**
 * Request parameters for findById_8 operation in DefaultApi.
 * @export
 * @interface DefaultApiFindById0Request
 */
export interface DefaultApiFindById0Request {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindById0
     */
    readonly id: string

    /**
     * 
     * @type {Array<string>}
     * @memberof DefaultApiFindById0
     */
    readonly relations?: Array<string>
}

/**
 * Request parameters for findClientProposalById operation in DefaultApi.
 * @export
 * @interface DefaultApiFindClientProposalByIdRequest
 */
export interface DefaultApiFindClientProposalByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindClientProposalById
     */
    readonly userId: string

    /**
     * 
     * @type {number}
     * @memberof DefaultApiFindClientProposalById
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiFindClientProposalById
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindClientProposalById
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindClientProposalById
     */
    readonly sortingField?: string
}

/**
 * Request parameters for findCommentById operation in DefaultApi.
 * @export
 * @interface DefaultApiFindCommentByIdRequest
 */
export interface DefaultApiFindCommentByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindCommentById
     */
    readonly id: string
}

/**
 * Request parameters for findEditRequest operation in DefaultApi.
 * @export
 * @interface DefaultApiFindEditRequestRequest
 */
export interface DefaultApiFindEditRequestRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiFindEditRequest
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiFindEditRequest
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindEditRequest
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindEditRequest
     */
    readonly sortingField?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindEditRequest
     */
    readonly associationName?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindEditRequest
     */
    readonly status?: string
}

/**
 * Request parameters for findMessages operation in DefaultApi.
 * @export
 * @interface DefaultApiFindMessagesRequest
 */
export interface DefaultApiFindMessagesRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiFindMessages
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiFindMessages
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindMessages
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindMessages
     */
    readonly sortingField?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindMessages
     */
    readonly content?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindMessages
     */
    readonly senderId?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindMessages
     */
    readonly contentTitle?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindMessages
     */
    readonly roomId?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindMessages
     */
    readonly groupMessage?: string
}

/**
 * Request parameters for findOne operation in DefaultApi.
 * @export
 * @interface DefaultApiFindOneRequest
 */
export interface DefaultApiFindOneRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindOne
     */
    readonly id: string
}

/**
 * Request parameters for findOneComment operation in DefaultApi.
 * @export
 * @interface DefaultApiFindOneCommentRequest
 */
export interface DefaultApiFindOneCommentRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiFindOneComment
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiFindOneComment
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindOneComment
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindOneComment
     */
    readonly sortingField?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindOneComment
     */
    readonly commentOwnerId?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindOneComment
     */
    readonly organizationId?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindOneComment
     */
    readonly parentCommentId?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindOneComment
     */
    readonly campaignId?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindOneComment
     */
    readonly projectId?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindOneComment
     */
    readonly itemId?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindOneComment
     */
    readonly sortBy?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindOneComment
     */
    readonly sortMethod?: string
}

/**
 * Request parameters for findProposalList operation in DefaultApi.
 * @export
 * @interface DefaultApiFindProposalListRequest
 */
export interface DefaultApiFindProposalListRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiFindProposalList
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiFindProposalList
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindProposalList
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindProposalList
     */
    readonly sortingField?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindProposalList
     */
    readonly employeeName?: string
}

/**
 * Request parameters for findTrackBudgets operation in DefaultApi.
 * @export
 * @interface DefaultApiFindTrackBudgetsRequest
 */
export interface DefaultApiFindTrackBudgetsRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiFindTrackBudgets
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiFindTrackBudgets
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindTrackBudgets
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindTrackBudgets
     */
    readonly sortingField?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindTrackBudgets
     */
    readonly id?: string
}

/**
 * Request parameters for findTrackBudgetsByTrackId operation in DefaultApi.
 * @export
 * @interface DefaultApiFindTrackBudgetsByTrackIdRequest
 */
export interface DefaultApiFindTrackBudgetsByTrackIdRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiFindTrackBudgetsByTrackId
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiFindTrackBudgetsByTrackId
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindTrackBudgetsByTrackId
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindTrackBudgetsByTrackId
     */
    readonly sortingField?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindTrackBudgetsByTrackId
     */
    readonly id?: string
}

/**
 * Request parameters for findUsers operation in DefaultApi.
 * @export
 * @interface DefaultApiFindUsersRequest
 */
export interface DefaultApiFindUsersRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiFindUsers
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiFindUsers
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindUsers
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindUsers
     */
    readonly sortingField?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindUsers
     */
    readonly employeeName?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindUsers
     */
    readonly associationName?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindUsers
     */
    readonly trackId?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof DefaultApiFindUsers
     */
    readonly userTypeId?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindUsers
     */
    readonly employeePath?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindUsers
     */
    readonly accountStatus?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindUsers
     */
    readonly clientField?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindUsers
     */
    readonly email?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindUsers
     */
    readonly hideInternal?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindUsers
     */
    readonly hideExternal?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindUsers
     */
    readonly singleRole?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindUsers
     */
    readonly includeSchedule?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiFindUsers
     */
    readonly splitRoles?: string
}

/**
 * Request parameters for forgotPasswordRequest operation in DefaultApi.
 * @export
 * @interface DefaultApiForgotPasswordRequestRequest
 */
export interface DefaultApiForgotPasswordRequestRequest {
    /**
     * 
     * @type {ForgotPasswordRequestDto}
     * @memberof DefaultApiForgotPasswordRequest
     */
    readonly forgotPasswordRequestDto: ForgotPasswordRequestDto
}

/**
 * Request parameters for fusionLogin operation in DefaultApi.
 * @export
 * @interface DefaultApiFusionLoginRequest
 */
export interface DefaultApiFusionLoginRequest {
    /**
     * 
     * @type {LoginRequestDto}
     * @memberof DefaultApiFusionLogin
     */
    readonly loginRequestDto: LoginRequestDto
}

/**
 * Request parameters for fusionRegister operation in DefaultApi.
 * @export
 * @interface DefaultApiFusionRegisterRequest
 */
export interface DefaultApiFusionRegisterRequest {
    /**
     * 
     * @type {RegisterRequestDto}
     * @memberof DefaultApiFusionRegister
     */
    readonly registerRequestDto: RegisterRequestDto
}

/**
 * Request parameters for getAllComment operation in DefaultApi.
 * @export
 * @interface DefaultApiGetAllCommentRequest
 */
export interface DefaultApiGetAllCommentRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiGetAllComment
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiGetAllComment
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetAllComment
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetAllComment
     */
    readonly sortingField?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetAllComment
     */
    readonly commentOwnerId?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetAllComment
     */
    readonly organizationId?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetAllComment
     */
    readonly parentCommentId?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetAllComment
     */
    readonly campaignId?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetAllComment
     */
    readonly projectId?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetAllComment
     */
    readonly itemId?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetAllComment
     */
    readonly sortBy?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetAllComment
     */
    readonly sortMethod?: string
}

/**
 * Request parameters for getAllCommentPaginated operation in DefaultApi.
 * @export
 * @interface DefaultApiGetAllCommentPaginatedRequest
 */
export interface DefaultApiGetAllCommentPaginatedRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiGetAllCommentPaginated
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiGetAllCommentPaginated
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetAllCommentPaginated
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetAllCommentPaginated
     */
    readonly sortingField?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetAllCommentPaginated
     */
    readonly commentOwnerId?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetAllCommentPaginated
     */
    readonly organizationId?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetAllCommentPaginated
     */
    readonly parentCommentId?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetAllCommentPaginated
     */
    readonly campaignId?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetAllCommentPaginated
     */
    readonly projectId?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetAllCommentPaginated
     */
    readonly itemId?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetAllCommentPaginated
     */
    readonly sortBy?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetAllCommentPaginated
     */
    readonly sortMethod?: string
}

/**
 * Request parameters for getAmandementById operation in DefaultApi.
 * @export
 * @interface DefaultApiGetAmandementByIdRequest
 */
export interface DefaultApiGetAmandementByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetAmandementById
     */
    readonly id: string
}

/**
 * Request parameters for getBasketList operation in DefaultApi.
 * @export
 * @interface DefaultApiGetBasketListRequest
 */
export interface DefaultApiGetBasketListRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetBasketList
     */
    readonly donorId: string
}

/**
 * Request parameters for getBudgetInfo operation in DefaultApi.
 * @export
 * @interface DefaultApiGetBudgetInfoRequest
 */
export interface DefaultApiGetBudgetInfoRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetBudgetInfo
     */
    readonly startDate: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetBudgetInfo
     */
    readonly endDate: string

    /**
     * 
     * @type {number}
     * @memberof DefaultApiGetBudgetInfo
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiGetBudgetInfo
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetBudgetInfo
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetBudgetInfo
     */
    readonly sortingField?: string
}

/**
 * Request parameters for getClientSchedules operation in DefaultApi.
 * @export
 * @interface DefaultApiGetClientSchedulesRequest
 */
export interface DefaultApiGetClientSchedulesRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetClientSchedules
     */
    readonly id: string
}

/**
 * Request parameters for getExpenseList operation in DefaultApi.
 * @export
 * @interface DefaultApiGetExpenseListRequest
 */
export interface DefaultApiGetExpenseListRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetExpenseList
     */
    readonly organizationId: string
}

/**
 * Request parameters for getMetalPrice operation in DefaultApi.
 * @export
 * @interface DefaultApiGetMetalPriceRequest
 */
export interface DefaultApiGetMetalPriceRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetMetalPrice
     */
    readonly base: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetMetalPrice
     */
    readonly symbols: string
}

/**
 * Request parameters for getMyAppointments operation in DefaultApi.
 * @export
 * @interface DefaultApiGetMyAppointmentsRequest
 */
export interface DefaultApiGetMyAppointmentsRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiGetMyAppointments
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiGetMyAppointments
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetMyAppointments
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetMyAppointments
     */
    readonly sortingField?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetMyAppointments
     */
    readonly status?: string

    /**
     * 
     * @type {number}
     * @memberof DefaultApiGetMyAppointments
     */
    readonly month?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiGetMyAppointments
     */
    readonly year?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetMyAppointments
     */
    readonly userId?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetMyAppointments
     */
    readonly employeeId?: string
}

/**
 * Request parameters for getMyComment operation in DefaultApi.
 * @export
 * @interface DefaultApiGetMyCommentRequest
 */
export interface DefaultApiGetMyCommentRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiGetMyComment
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiGetMyComment
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetMyComment
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetMyComment
     */
    readonly sortingField?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetMyComment
     */
    readonly commentOwnerId?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetMyComment
     */
    readonly organizationId?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetMyComment
     */
    readonly parentCommentId?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetMyComment
     */
    readonly campaignId?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetMyComment
     */
    readonly projectId?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetMyComment
     */
    readonly itemId?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetMyComment
     */
    readonly sortBy?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetMyComment
     */
    readonly sortMethod?: string
}

/**
 * Request parameters for getMyCommentPaginated operation in DefaultApi.
 * @export
 * @interface DefaultApiGetMyCommentPaginatedRequest
 */
export interface DefaultApiGetMyCommentPaginatedRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiGetMyCommentPaginated
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiGetMyCommentPaginated
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetMyCommentPaginated
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetMyCommentPaginated
     */
    readonly sortingField?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetMyCommentPaginated
     */
    readonly commentOwnerId?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetMyCommentPaginated
     */
    readonly organizationId?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetMyCommentPaginated
     */
    readonly parentCommentId?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetMyCommentPaginated
     */
    readonly campaignId?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetMyCommentPaginated
     */
    readonly projectId?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetMyCommentPaginated
     */
    readonly itemId?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetMyCommentPaginated
     */
    readonly sortBy?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetMyCommentPaginated
     */
    readonly sortMethod?: string
}

/**
 * Request parameters for getOneUser operation in DefaultApi.
 * @export
 * @interface DefaultApiGetOneUserRequest
 */
export interface DefaultApiGetOneUserRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetOneUser
     */
    readonly id: string
}

/**
 * Request parameters for getPartnersReport operation in DefaultApi.
 * @export
 * @interface DefaultApiGetPartnersReportRequest
 */
export interface DefaultApiGetPartnersReportRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetPartnersReport
     */
    readonly startDate: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetPartnersReport
     */
    readonly endDate: string

    /**
     * 
     * @type {number}
     * @memberof DefaultApiGetPartnersReport
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiGetPartnersReport
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetPartnersReport
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetPartnersReport
     */
    readonly sortingField?: string
}

/**
 * Request parameters for getPreviousProposal operation in DefaultApi.
 * @export
 * @interface DefaultApiGetPreviousProposalRequest
 */
export interface DefaultApiGetPreviousProposalRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiGetPreviousProposal
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiGetPreviousProposal
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetPreviousProposal
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetPreviousProposal
     */
    readonly sortingField?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof DefaultApiGetPreviousProposal
     */
    readonly outterStatus?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetPreviousProposal
     */
    readonly projectName?: string
}

/**
 * Request parameters for getProjectBeneficiariesReport operation in DefaultApi.
 * @export
 * @interface DefaultApiGetProjectBeneficiariesReportRequest
 */
export interface DefaultApiGetProjectBeneficiariesReportRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetProjectBeneficiariesReport
     */
    readonly startDate: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetProjectBeneficiariesReport
     */
    readonly endDate: string

    /**
     * 
     * @type {number}
     * @memberof DefaultApiGetProjectBeneficiariesReport
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiGetProjectBeneficiariesReport
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetProjectBeneficiariesReport
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetProjectBeneficiariesReport
     */
    readonly sortingField?: string
}

/**
 * Request parameters for getSummary operation in DefaultApi.
 * @export
 * @interface DefaultApiGetSummaryRequest
 */
export interface DefaultApiGetSummaryRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetSummary
     */
    readonly organizationId: string
}

/**
 * Request parameters for getTransactionAll operation in DefaultApi.
 * @export
 * @interface DefaultApiGetTransactionAllRequest
 */
export interface DefaultApiGetTransactionAllRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetTransactionAll
     */
    readonly organizationId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetTransactionAll
     */
    readonly sortStatus: string
}

/**
 * Request parameters for getTransactionList operation in DefaultApi.
 * @export
 * @interface DefaultApiGetTransactionListRequest
 */
export interface DefaultApiGetTransactionListRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetTransactionList
     */
    readonly organizationId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetTransactionList
     */
    readonly sortStatus: string
}

/**
 * Request parameters for handleGoogleCallback operation in DefaultApi.
 * @export
 * @interface DefaultApiHandleGoogleCallbackRequest
 */
export interface DefaultApiHandleGoogleCallbackRequest {
    /**
     * 
     * @type {HandleGoogleCallbackDto}
     * @memberof DefaultApiHandleGoogleCallback
     */
    readonly handleGoogleCallbackDto: HandleGoogleCallbackDto
}

/**
 * Request parameters for hide operation in DefaultApi.
 * @export
 * @interface DefaultApiHideRequest
 */
export interface DefaultApiHideRequest {
    /**
     * 
     * @type {BaseNotificationDto}
     * @memberof DefaultApiHide
     */
    readonly baseNotificationDto: BaseNotificationDto
}

/**
 * Request parameters for insertPayment operation in DefaultApi.
 * @export
 * @interface DefaultApiInsertPaymentRequest
 */
export interface DefaultApiInsertPaymentRequest {
    /**
     * 
     * @type {CreateProposalPaymentDto}
     * @memberof DefaultApiInsertPayment
     */
    readonly createProposalPaymentDto: CreateProposalPaymentDto
}

/**
 * Request parameters for insertPayments operation in DefaultApi.
 * @export
 * @interface DefaultApiInsertPaymentsRequest
 */
export interface DefaultApiInsertPaymentsRequest {
    /**
     * 
     * @type {CreateProposalPaymentDto}
     * @memberof DefaultApiInsertPayments
     */
    readonly createProposalPaymentDto: CreateProposalPaymentDto
}

/**
 * Request parameters for interceptorSaveDraft operation in DefaultApi.
 * @export
 * @interface DefaultApiInterceptorSaveDraftRequest
 */
export interface DefaultApiInterceptorSaveDraftRequest {
    /**
     * 
     * @type {ProposalSaveDraftInterceptorDto}
     * @memberof DefaultApiInterceptorSaveDraft
     */
    readonly proposalSaveDraftInterceptorDto: ProposalSaveDraftInterceptorDto
}

/**
 * Request parameters for login operation in DefaultApi.
 * @export
 * @interface DefaultApiLoginRequest
 */
export interface DefaultApiLoginRequest {
    /**
     * 
     * @type {LoginRequestDto}
     * @memberof DefaultApiLogin
     */
    readonly loginRequestDto: LoginRequestDto
}

/**
 * Request parameters for login_9 operation in DefaultApi.
 * @export
 * @interface DefaultApiLogin0Request
 */
export interface DefaultApiLogin0Request {
    /**
     * 
     * @type {LoginRequestDto}
     * @memberof DefaultApiLogin0
     */
    readonly loginRequestDto: LoginRequestDto
}

/**
 * Request parameters for myInbox operation in DefaultApi.
 * @export
 * @interface DefaultApiMyInboxRequest
 */
export interface DefaultApiMyInboxRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiMyInbox
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiMyInbox
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiMyInbox
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiMyInbox
     */
    readonly sortingField?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiMyInbox
     */
    readonly senderId?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiMyInbox
     */
    readonly receiverId?: string
}

/**
 * Request parameters for myOutbox operation in DefaultApi.
 * @export
 * @interface DefaultApiMyOutboxRequest
 */
export interface DefaultApiMyOutboxRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiMyOutbox
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiMyOutbox
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiMyOutbox
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiMyOutbox
     */
    readonly sortingField?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiMyOutbox
     */
    readonly senderId?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiMyOutbox
     */
    readonly receiverId?: string
}

/**
 * Request parameters for oldLogin operation in DefaultApi.
 * @export
 * @interface DefaultApiOldLoginRequest
 */
export interface DefaultApiOldLoginRequest {
    /**
     * 
     * @type {LoginRequestDto}
     * @memberof DefaultApiOldLogin
     */
    readonly loginRequestDto: LoginRequestDto
}

/**
 * Request parameters for read operation in DefaultApi.
 * @export
 * @interface DefaultApiReadRequest
 */
export interface DefaultApiReadRequest {
    /**
     * 
     * @type {BaseNotificationDto}
     * @memberof DefaultApiRead
     */
    readonly baseNotificationDto: BaseNotificationDto
}

/**
 * Request parameters for registerClient operation in DefaultApi.
 * @export
 * @interface DefaultApiRegisterClientRequest
 */
export interface DefaultApiRegisterClientRequest {
    /**
     * 
     * @type {RegisterTenderDto}
     * @memberof DefaultApiRegisterClient
     */
    readonly registerTenderDto: RegisterTenderDto
}

/**
 * Request parameters for registerOrganization operation in DefaultApi.
 * @export
 * @interface DefaultApiRegisterOrganizationRequest
 */
export interface DefaultApiRegisterOrganizationRequest {
    /**
     * 
     * @type {RegisterOrganizationDto}
     * @memberof DefaultApiRegisterOrganization
     */
    readonly registerOrganizationDto: RegisterOrganizationDto
}

/**
 * Request parameters for register_10 operation in DefaultApi.
 * @export
 * @interface DefaultApiRegister0Request
 */
export interface DefaultApiRegister0Request {
    /**
     * 
     * @type {GSRegisterRequestDto}
     * @memberof DefaultApiRegister0
     */
    readonly gSRegisterRequestDto: GSRegisterRequestDto
}

/**
 * Request parameters for register_11 operation in DefaultApi.
 * @export
 * @interface DefaultApiRegister1Request
 */
export interface DefaultApiRegister1Request {
    /**
     * 
     * @type {RegisterTenderDto}
     * @memberof DefaultApiRegister1
     */
    readonly registerTenderDto: RegisterTenderDto
}

/**
 * Request parameters for rejectEditRequests operation in DefaultApi.
 * @export
 * @interface DefaultApiRejectEditRequestsRequest
 */
export interface DefaultApiRejectEditRequestsRequest {
    /**
     * 
     * @type {RejectEditRequestDto}
     * @memberof DefaultApiRejectEditRequests
     */
    readonly rejectEditRequestDto: RejectEditRequestDto
}

/**
 * Request parameters for remove operation in DefaultApi.
 * @export
 * @interface DefaultApiRemoveRequest
 */
export interface DefaultApiRemoveRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiRemove
     */
    readonly id: string
}

/**
 * Request parameters for reqPayStripe operation in DefaultApi.
 * @export
 * @interface DefaultApiReqPayStripeRequest
 */
export interface DefaultApiReqPayStripeRequest {
    /**
     * 
     * @type {object}
     * @memberof DefaultApiReqPayStripe
     */
    readonly body: object
}

/**
 * Request parameters for request operation in DefaultApi.
 * @export
 * @interface DefaultApiRequestRequest
 */
export interface DefaultApiRequestRequest {
    /**
     * 
     * @type {object}
     * @memberof DefaultApiRequest
     */
    readonly body: object
}

/**
 * Request parameters for requestCart operation in DefaultApi.
 * @export
 * @interface DefaultApiRequestCartRequest
 */
export interface DefaultApiRequestCartRequest {
    /**
     * 
     * @type {object}
     * @memberof DefaultApiRequestCart
     */
    readonly body: object
}

/**
 * Request parameters for requestCart_12 operation in DefaultApi.
 * @export
 * @interface DefaultApiRequestCart0Request
 */
export interface DefaultApiRequestCart0Request {
    /**
     * 
     * @type {PaymentPaytabsDto}
     * @memberof DefaultApiRequestCart0
     */
    readonly paymentPaytabsDto: PaymentPaytabsDto
}

/**
 * Request parameters for requestInProcess operation in DefaultApi.
 * @export
 * @interface DefaultApiRequestInProcessRequest
 */
export interface DefaultApiRequestInProcessRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiRequestInProcess
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiRequestInProcess
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiRequestInProcess
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiRequestInProcess
     */
    readonly sortingField?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiRequestInProcess
     */
    readonly type?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiRequestInProcess
     */
    readonly trackId?: string

    /**
     * 
     * @type {boolean}
     * @memberof DefaultApiRequestInProcess
     */
    readonly vat?: boolean

    /**
     * 
     * @type {string}
     * @memberof DefaultApiRequestInProcess
     */
    readonly projectName?: string
}

/**
 * Request parameters for requestSingle operation in DefaultApi.
 * @export
 * @interface DefaultApiRequestSingleRequest
 */
export interface DefaultApiRequestSingleRequest {
    /**
     * 
     * @type {PaymentPaytabsDto}
     * @memberof DefaultApiRequestSingle
     */
    readonly paymentPaytabsDto: PaymentPaytabsDto
}

/**
 * Request parameters for resetPassword operation in DefaultApi.
 * @export
 * @interface DefaultApiResetPasswordRequest
 */
export interface DefaultApiResetPasswordRequest {
    /**
     * 
     * @type {GSResetPassword}
     * @memberof DefaultApiResetPassword
     */
    readonly gSResetPassword: GSResetPassword
}

/**
 * Request parameters for resetPasswordRequest operation in DefaultApi.
 * @export
 * @interface DefaultApiResetPasswordRequestRequest
 */
export interface DefaultApiResetPasswordRequestRequest {
    /**
     * 
     * @type {ForgotPasswordRequestDto}
     * @memberof DefaultApiResetPasswordRequest
     */
    readonly forgotPasswordRequestDto: ForgotPasswordRequestDto
}

/**
 * Request parameters for responseInvitation operation in DefaultApi.
 * @export
 * @interface DefaultApiResponseInvitationRequest
 */
export interface DefaultApiResponseInvitationRequest {
    /**
     * 
     * @type {InvitationResponseDto}
     * @memberof DefaultApiResponseInvitation
     */
    readonly invitationResponseDto: InvitationResponseDto
}

/**
 * Request parameters for send operation in DefaultApi.
 * @export
 * @interface DefaultApiSendRequest
 */
export interface DefaultApiSendRequest {
    /**
     * 
     * @type {SendNewEmailDto}
     * @memberof DefaultApiSend
     */
    readonly sendNewEmailDto: SendNewEmailDto
}

/**
 * Request parameters for sendAmandement operation in DefaultApi.
 * @export
 * @interface DefaultApiSendAmandementRequest
 */
export interface DefaultApiSendAmandementRequest {
    /**
     * 
     * @type {SendAmandementDto}
     * @memberof DefaultApiSendAmandement
     */
    readonly sendAmandementDto: SendAmandementDto
}

/**
 * Request parameters for sendAmandementCqrs operation in DefaultApi.
 * @export
 * @interface DefaultApiSendAmandementCqrsRequest
 */
export interface DefaultApiSendAmandementCqrsRequest {
    /**
     * 
     * @type {SendAmandementDto}
     * @memberof DefaultApiSendAmandementCqrs
     */
    readonly sendAmandementDto: SendAmandementDto
}

/**
 * Request parameters for sendCloseReport operation in DefaultApi.
 * @export
 * @interface DefaultApiSendCloseReportRequest
 */
export interface DefaultApiSendCloseReportRequest {
    /**
     * 
     * @type {SendClosingReportDto}
     * @memberof DefaultApiSendCloseReport
     */
    readonly sendClosingReportDto: SendClosingReportDto
}

/**
 * Request parameters for sendClosingReport operation in DefaultApi.
 * @export
 * @interface DefaultApiSendClosingReportRequest
 */
export interface DefaultApiSendClosingReportRequest {
    /**
     * 
     * @type {SendClosingReportDto}
     * @memberof DefaultApiSendClosingReport
     */
    readonly sendClosingReportDto: SendClosingReportDto
}

/**
 * Request parameters for sendEmail operation in DefaultApi.
 * @export
 * @interface DefaultApiSendEmailRequest
 */
export interface DefaultApiSendEmailRequest {
    /**
     * 
     * @type {MessageDto}
     * @memberof DefaultApiSendEmail
     */
    readonly messageDto: MessageDto
}

/**
 * Request parameters for sendEmailVerif operation in DefaultApi.
 * @export
 * @interface DefaultApiSendEmailVerifRequest
 */
export interface DefaultApiSendEmailVerifRequest {
    /**
     * 
     * @type {SendEmailVerifDto}
     * @memberof DefaultApiSendEmailVerif
     */
    readonly sendEmailVerifDto: SendEmailVerifDto
}

/**
 * Request parameters for sendRevision operation in DefaultApi.
 * @export
 * @interface DefaultApiSendRevisionRequest
 */
export interface DefaultApiSendRevisionRequest {
    /**
     * 
     * @type {SendRevisionDto}
     * @memberof DefaultApiSendRevision
     */
    readonly sendRevisionDto: SendRevisionDto
}

/**
 * Request parameters for send_13 operation in DefaultApi.
 * @export
 * @interface DefaultApiSend0Request
 */
export interface DefaultApiSend0Request {
    /**
     * 
     * @type {CreateMessageDto}
     * @memberof DefaultApiSend0
     */
    readonly createMessageDto: CreateMessageDto
}

/**
 * Request parameters for softDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiSoftDeleteRequest
 */
export interface DefaultApiSoftDeleteRequest {
    /**
     * 
     * @type {GetByIdDto}
     * @memberof DefaultApiSoftDelete
     */
    readonly getByIdDto: GetByIdDto
}

/**
 * Request parameters for softDeleteComment operation in DefaultApi.
 * @export
 * @interface DefaultApiSoftDeleteCommentRequest
 */
export interface DefaultApiSoftDeleteCommentRequest {
    /**
     * 
     * @type {DeleteCommentsDto}
     * @memberof DefaultApiSoftDeleteComment
     */
    readonly deleteCommentsDto: DeleteCommentsDto
}

/**
 * Request parameters for softDeleteMyComments operation in DefaultApi.
 * @export
 * @interface DefaultApiSoftDeleteMyCommentsRequest
 */
export interface DefaultApiSoftDeleteMyCommentsRequest {
    /**
     * 
     * @type {DeleteCommentsDto}
     * @memberof DefaultApiSoftDeleteMyComments
     */
    readonly deleteCommentsDto: DeleteCommentsDto
}

/**
 * Request parameters for submitForgotPassword operation in DefaultApi.
 * @export
 * @interface DefaultApiSubmitForgotPasswordRequest
 */
export interface DefaultApiSubmitForgotPasswordRequest {
    /**
     * 
     * @type {SubmitChangePasswordDto}
     * @memberof DefaultApiSubmitForgotPassword
     */
    readonly submitChangePasswordDto: SubmitChangePasswordDto
}

/**
 * Request parameters for submitForgotPassword_14 operation in DefaultApi.
 * @export
 * @interface DefaultApiSubmitForgotPassword0Request
 */
export interface DefaultApiSubmitForgotPassword0Request {
    /**
     * 
     * @type {SubmitChangePasswordDto}
     * @memberof DefaultApiSubmitForgotPassword0
     */
    readonly submitChangePasswordDto: SubmitChangePasswordDto
}

/**
 * Request parameters for toogleRead operation in DefaultApi.
 * @export
 * @interface DefaultApiToogleReadRequest
 */
export interface DefaultApiToogleReadRequest {
    /**
     * 
     * @type {ToogleReadMessageDto}
     * @memberof DefaultApiToogleRead
     */
    readonly toogleReadMessageDto: ToogleReadMessageDto
}

/**
 * Request parameters for update operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateRequest
 */
export interface DefaultApiUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiUpdate
     */
    readonly id: string

    /**
     * 
     * @type {object}
     * @memberof DefaultApiUpdate
     */
    readonly body: object
}

/**
 * Request parameters for updateBanks operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateBanksRequest
 */
export interface DefaultApiUpdateBanksRequest {
    /**
     * 
     * @type {BankListCreateDto}
     * @memberof DefaultApiUpdateBanks
     */
    readonly bankListCreateDto: BankListCreateDto
}

/**
 * Request parameters for updateBasket operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateBasketRequest
 */
export interface DefaultApiUpdateBasketRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiUpdateBasket
     */
    readonly basketId: string

    /**
     * 
     * @type {object}
     * @memberof DefaultApiUpdateBasket
     */
    readonly body: object
}

/**
 * Request parameters for updatePayment operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdatePaymentRequest
 */
export interface DefaultApiUpdatePaymentRequest {
    /**
     * 
     * @type {UpdatePaymentDto}
     * @memberof DefaultApiUpdatePayment
     */
    readonly updatePaymentDto: UpdatePaymentDto
}

/**
 * Request parameters for updatePayments operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdatePaymentsRequest
 */
export interface DefaultApiUpdatePaymentsRequest {
    /**
     * 
     * @type {UpdatePaymentDto}
     * @memberof DefaultApiUpdatePayments
     */
    readonly updatePaymentDto: UpdatePaymentDto
}

/**
 * Request parameters for updateProfile operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateProfileRequest
 */
export interface DefaultApiUpdateProfileRequest {
    /**
     * 
     * @type {UpdateProfileDto}
     * @memberof DefaultApiUpdateProfile
     */
    readonly updateProfileDto: UpdateProfileDto
}

/**
 * Request parameters for updateStatus operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateStatusRequest
 */
export interface DefaultApiUpdateStatusRequest {
    /**
     * 
     * @type {UserStatusUpdateDto}
     * @memberof DefaultApiUpdateStatus
     */
    readonly userStatusUpdateDto: UserStatusUpdateDto
}

/**
 * Request parameters for updateTrackBudget operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateTrackBudgetRequest
 */
export interface DefaultApiUpdateTrackBudgetRequest {
    /**
     * 
     * @type {UpdateTrackBudgetDto}
     * @memberof DefaultApiUpdateTrackBudget
     */
    readonly updateTrackBudgetDto: UpdateTrackBudgetDto
}

/**
 * Request parameters for updateUser operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateUserRequest
 */
export interface DefaultApiUpdateUserRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiUpdateUser
     */
    readonly id: string
}

/**
 * Request parameters for updateUser_15 operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdateUser0Request
 */
export interface DefaultApiUpdateUser0Request {
    /**
     * 
     * @type {UpdateUserDto}
     * @memberof DefaultApiUpdateUser0
     */
    readonly updateUserDto: UpdateUserDto
}

/**
 * Request parameters for update_16 operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdate0Request
 */
export interface DefaultApiUpdate0Request {
    /**
     * 
     * @type {UpdateBeneficiaryDto}
     * @memberof DefaultApiUpdate0
     */
    readonly updateBeneficiaryDto: UpdateBeneficiaryDto
}

/**
 * Request parameters for update_17 operation in DefaultApi.
 * @export
 * @interface DefaultApiUpdate1Request
 */
export interface DefaultApiUpdate1Request {
    /**
     * 
     * @type {UpdateTrackDto}
     * @memberof DefaultApiUpdate1
     */
    readonly updateTrackDto: UpdateTrackDto
}

/**
 * Request parameters for upsertSchedules operation in DefaultApi.
 * @export
 * @interface DefaultApiUpsertSchedulesRequest
 */
export interface DefaultApiUpsertSchedulesRequest {
    /**
     * 
     * @type {CreateScheduleDto}
     * @memberof DefaultApiUpsertSchedules
     */
    readonly createScheduleDto: CreateScheduleDto
}

/**
 * Request parameters for verifyEmail operation in DefaultApi.
 * @export
 * @interface DefaultApiVerifyEmailRequest
 */
export interface DefaultApiVerifyEmailRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiVerifyEmail
     */
    readonly token: string
}

/**
 * Request parameters for verifyUserCheck operation in DefaultApi.
 * @export
 * @interface DefaultApiVerifyUserCheckRequest
 */
export interface DefaultApiVerifyUserCheckRequest {
    /**
     * 
     * @type {GSVerifyUser}
     * @memberof DefaultApiVerifyUserCheck
     */
    readonly gSVerifyUser: GSVerifyUser
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {DefaultApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public _delete(requestParameters: DefaultApiDeleteRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration)._delete(requestParameters.deleteProposalFollowUpDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiDelete0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public _delete_1(requestParameters: DefaultApiDelete0Request, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration)._delete_1(requestParameters.baseNotificationDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiAddBanksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addBanks(requestParameters: DefaultApiAddBanksRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addBanks(requestParameters.bankListCreateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiAddBudgetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addBudget(requestParameters: DefaultApiAddBudgetRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addBudget(requestParameters.createTrackBudgetDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApplyChangeProposalStateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public applyChangeProposalState(requestParameters: DefaultApiApplyChangeProposalStateRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).applyChangeProposalState(requestParameters.changeProposalStateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApproveEditRequestsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public approveEditRequests(requestParameters: DefaultApiApproveEditRequestsRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).approveEditRequests(requestParameters.editRequestByIdDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiAskClosingReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public askClosingReport(requestParameters: DefaultApiAskClosingReportRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).askClosingReport(requestParameters.askClosingReportDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiAskForAmandementRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public askForAmandementRequest(requestParameters: DefaultApiAskForAmandementRequestRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).askForAmandementRequest(requestParameters.askAmandementRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiAskForgotPasswordUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public askForgotPasswordUrl(requestParameters: DefaultApiAskForgotPasswordUrlRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).askForgotPasswordUrl(requestParameters.forgotPasswordRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiAssignNonprofitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public assignNonprofit(requestParameters: DefaultApiAssignNonprofitRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).assignNonprofit(requestParameters.upsertUserPermission, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiAssignOperatorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public assignOperator(requestParameters: DefaultApiAssignOperatorRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).assignOperator(requestParameters.upsertUserPermission, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiAssignVendorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public assignVendor(requestParameters: DefaultApiAssignVendorRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).assignVendor(requestParameters.upsertUserPermission, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authzedTesting(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authzedTesting(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiAvarageEmployeeTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public avarageEmployeeTransaction(requestParameters: DefaultApiAvarageEmployeeTransactionRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).avarageEmployeeTransaction(requestParameters.startDate, requestParameters.endDate, requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.employeeName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiAverageTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public averageTransaction(requestParameters: DefaultApiAverageTransactionRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).averageTransaction(requestParameters.startDate, requestParameters.endDate, requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiCallbackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public callback(requestParameters: DefaultApiCallbackRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).callback(requestParameters.sessionId, requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiCallbackCartRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public callbackCart(requestParameters: DefaultApiCallbackCartRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).callbackCart(requestParameters.sessionId, requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiCallbackCart0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public callbackCart_2(requestParameters: DefaultApiCallbackCart0Request, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).callbackCart_2(requestParameters.paymentPaytabsCallbackDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiCallbackPaymentIntentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public callbackPaymentIntent(requestParameters: DefaultApiCallbackPaymentIntentRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).callbackPaymentIntent(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiCallbackSingleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public callbackSingle(requestParameters: DefaultApiCallbackSingleRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).callbackSingle(requestParameters.paymentPaytabsCallbackDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiChangeProposalStateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public changeProposalState(requestParameters: DefaultApiChangeProposalStateRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).changeProposalState(requestParameters.changeProposalStateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiCompletePaymentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public completePayment(requestParameters: DefaultApiCompletePaymentRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).completePayment(requestParameters.getByIdDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public create(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).create(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiCreateAppointmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createAppointment(requestParameters: DefaultApiCreateAppointmentRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createAppointment(requestParameters.createAppointmentDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiCreateBasketRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createBasket(requestParameters: DefaultApiCreateBasketRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createBasket(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiCreateBasketProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createBasketProject(requestParameters: DefaultApiCreateBasketProjectRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createBasketProject(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Comment
     * @param {DefaultApiCreateCommentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createComment(requestParameters: DefaultApiCreateCommentRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createComment(requestParameters.createCommentDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiCreateCqrsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createCqrs(requestParameters: DefaultApiCreateCqrsRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createCqrs(requestParameters.createProposalFollowUpDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiCreateDonateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createDonate(requestParameters: DefaultApiCreateDonateRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createDonate(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiCreateEditRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createEditRequest(requestParameters: DefaultApiCreateEditRequestRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createEditRequest(requestParameters.clientEditRequestFieldDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiCreateExpenseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createExpense(requestParameters: DefaultApiCreateExpenseRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createExpense(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiCreateProposalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createProposal(requestParameters: DefaultApiCreateProposalRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createProposal(requestParameters.createProposalInterceptorDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiCreateRoomChatRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createRoomChat(requestParameters: DefaultApiCreateRoomChatRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createRoomChat(requestParameters.createRoomChatDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createUser(requestParameters: DefaultApiCreateUserRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createUser(requestParameters.tenderCreateUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiCreate0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public create_3(requestParameters: DefaultApiCreate0Request, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).create_3(requestParameters.createBeneficiariesDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiCreate1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public create_4(requestParameters: DefaultApiCreate1Request, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).create_4(requestParameters.createProposalFollowUpDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiCreate2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public create_5(requestParameters: DefaultApiCreate2Request, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).create_5(requestParameters.createTrackDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteAllMine(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteAllMine(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiDeleteDraftRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteDraft(requestParameters: DefaultApiDeleteDraftRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteDraft(requestParameters.proposalDeleteDraftDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiDeleteTrackBudgetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteTrackBudget(requestParameters: DefaultApiDeleteTrackBudgetRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteTrackBudget(requestParameters.deleteTrackBudgetDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteUser(requestParameters: DefaultApiDeleteUserRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteUser(requestParameters.tenderDeleteUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiFetchAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public fetchAll(requestParameters: DefaultApiFetchAllRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).fetchAll(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.trackName, requestParameters.includeGeneral, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiFetchAll0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public fetchAll_6(requestParameters: DefaultApiFetchAll0Request = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).fetchAll_6(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.fileName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiFetchAmandementListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public fetchAmandementList(requestParameters: DefaultApiFetchAmandementListRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).fetchAmandementList(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.projectName, requestParameters.entity, requestParameters.employeeName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiFetchAmandementRequestListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public fetchAmandementRequestList(requestParameters: DefaultApiFetchAmandementRequestListRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).fetchAmandementRequestList(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.projectName, requestParameters.entity, requestParameters.employeeName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiFetchAppointmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public fetchAppointment(requestParameters: DefaultApiFetchAppointmentRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).fetchAppointment(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.status, requestParameters.month, requestParameters.year, requestParameters.userId, requestParameters.employeeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiFetchByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public fetchById(requestParameters: DefaultApiFetchByIdRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).fetchById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiFetchClosingReportListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public fetchClosingReportList(requestParameters: DefaultApiFetchClosingReportListRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).fetchClosingReportList(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.projectName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiFetchLastChatRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public fetchLastChat(requestParameters: DefaultApiFetchLastChatRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).fetchLastChat(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiFetchOldProposalListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public fetchOldProposalList(requestParameters: DefaultApiFetchOldProposalListRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).fetchOldProposalList(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.projectName, requestParameters.outterStatus, requestParameters.projectNumber, requestParameters.employeeName, requestParameters.projectTrack, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiFetchPaymentAdjustmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public fetchPaymentAdjustment(requestParameters: DefaultApiFetchPaymentAdjustmentRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).fetchPaymentAdjustment(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.type, requestParameters.projectName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiFetchProposalListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public fetchProposalList(requestParameters: DefaultApiFetchProposalListRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).fetchProposalList(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.projectName, requestParameters.outterStatus, requestParameters.projectNumber, requestParameters.employeeName, requestParameters.projectTrack, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiFetchRejectionListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public fetchRejectionList(requestParameters: DefaultApiFetchRejectionListRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).fetchRejectionList(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.projectName, requestParameters.trackId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiFetchTrackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public fetchTrack(requestParameters: DefaultApiFetchTrackRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).fetchTrack(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public fetchingMetalPrice(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).fetchingMetalPrice(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiFindRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public find(requestParameters: DefaultApiFindRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).find(requestParameters.requestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findAll(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiFindAll0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findAll_7(requestParameters: DefaultApiFindAll0Request = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findAll_7(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiFindBankDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findBankDetails(requestParameters: DefaultApiFindBankDetailsRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findBankDetails(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiFindBankListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findBankList(requestParameters: DefaultApiFindBankListRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findBankList(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiFindByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findById(requestParameters: DefaultApiFindByIdRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiFindById0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findById_8(requestParameters: DefaultApiFindById0Request, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findById_8(requestParameters.id, requestParameters.relations, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiFindClientProposalByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findClientProposalById(requestParameters: DefaultApiFindClientProposalByIdRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findClientProposalById(requestParameters.userId, requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user comment by id
     * @param {DefaultApiFindCommentByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findCommentById(requestParameters: DefaultApiFindCommentByIdRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findCommentById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiFindEditRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findEditRequest(requestParameters: DefaultApiFindEditRequestRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findEditRequest(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.associationName, requestParameters.status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiFindMessagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findMessages(requestParameters: DefaultApiFindMessagesRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findMessages(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.content, requestParameters.senderId, requestParameters.contentTitle, requestParameters.roomId, requestParameters.groupMessage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findOne(requestParameters: DefaultApiFindOneRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user comment with filter
     * @param {DefaultApiFindOneCommentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findOneComment(requestParameters: DefaultApiFindOneCommentRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findOneComment(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.commentOwnerId, requestParameters.organizationId, requestParameters.parentCommentId, requestParameters.campaignId, requestParameters.projectId, requestParameters.itemId, requestParameters.sortBy, requestParameters.sortMethod, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiFindProposalListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findProposalList(requestParameters: DefaultApiFindProposalListRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findProposalList(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.employeeName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiFindTrackBudgetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findTrackBudgets(requestParameters: DefaultApiFindTrackBudgetsRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findTrackBudgets(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiFindTrackBudgetsByTrackIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findTrackBudgetsByTrackId(requestParameters: DefaultApiFindTrackBudgetsByTrackIdRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findTrackBudgetsByTrackId(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiFindUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findUsers(requestParameters: DefaultApiFindUsersRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findUsers(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.employeeName, requestParameters.associationName, requestParameters.trackId, requestParameters.userTypeId, requestParameters.employeePath, requestParameters.accountStatus, requestParameters.clientField, requestParameters.email, requestParameters.hideInternal, requestParameters.hideExternal, requestParameters.singleRole, requestParameters.includeSchedule, requestParameters.splitRoles, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiForgotPasswordRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public forgotPasswordRequest(requestParameters: DefaultApiForgotPasswordRequestRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).forgotPasswordRequest(requestParameters.forgotPasswordRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login with fusion auth
     * @param {DefaultApiFusionLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public fusionLogin(requestParameters: DefaultApiFusionLoginRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).fusionLogin(requestParameters.loginRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register user with fusion auth
     * @param {DefaultApiFusionRegisterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public fusionRegister(requestParameters: DefaultApiFusionRegisterRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).fusionRegister(requestParameters.registerRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get ALL USER comment without paginated
     * @param {DefaultApiGetAllCommentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllComment(requestParameters: DefaultApiGetAllCommentRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllComment(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.commentOwnerId, requestParameters.organizationId, requestParameters.parentCommentId, requestParameters.campaignId, requestParameters.projectId, requestParameters.itemId, requestParameters.sortBy, requestParameters.sortMethod, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get ALL USER Comment Paginated
     * @param {DefaultApiGetAllCommentPaginatedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllCommentPaginated(requestParameters: DefaultApiGetAllCommentPaginatedRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllCommentPaginated(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.commentOwnerId, requestParameters.organizationId, requestParameters.parentCommentId, requestParameters.campaignId, requestParameters.projectId, requestParameters.itemId, requestParameters.sortBy, requestParameters.sortMethod, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllPartnersStatistics(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllPartnersStatistics(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllStatistics(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllStatistics(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllUser(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiGetAmandementByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAmandementById(requestParameters: DefaultApiGetAmandementByIdRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAmandementById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiGetBasketListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBasketList(requestParameters: DefaultApiGetBasketListRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBasketList(requestParameters.donorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiGetBudgetInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBudgetInfo(requestParameters: DefaultApiGetBudgetInfoRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBudgetInfo(requestParameters.startDate, requestParameters.endDate, requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiGetClientSchedulesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getClientSchedules(requestParameters: DefaultApiGetClientSchedulesRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getClientSchedules(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCurrentUserTrack(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCurrentUserTrack(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiGetExpenseListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getExpenseList(requestParameters: DefaultApiGetExpenseListRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getExpenseList(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getHello(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getHello(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiGetMetalPriceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMetalPrice(requestParameters: DefaultApiGetMetalPriceRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMetalPrice(requestParameters.base, requestParameters.symbols, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiGetMyAppointmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMyAppointments(requestParameters: DefaultApiGetMyAppointmentsRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMyAppointments(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.status, requestParameters.month, requestParameters.year, requestParameters.userId, requestParameters.employeeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get CURRENT USER comment
     * @param {DefaultApiGetMyCommentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMyComment(requestParameters: DefaultApiGetMyCommentRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMyComment(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.commentOwnerId, requestParameters.organizationId, requestParameters.parentCommentId, requestParameters.campaignId, requestParameters.projectId, requestParameters.itemId, requestParameters.sortBy, requestParameters.sortMethod, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get CURRENT USER comment PAGINATED
     * @param {DefaultApiGetMyCommentPaginatedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMyCommentPaginated(requestParameters: DefaultApiGetMyCommentPaginatedRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMyCommentPaginated(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.commentOwnerId, requestParameters.organizationId, requestParameters.parentCommentId, requestParameters.campaignId, requestParameters.projectId, requestParameters.itemId, requestParameters.sortBy, requestParameters.sortMethod, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMyProfile(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMyProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMySchedules(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMySchedules(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiGetOneUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getOneUser(requestParameters: DefaultApiGetOneUserRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getOneUser(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiGetPartnersReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPartnersReport(requestParameters: DefaultApiGetPartnersReportRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPartnersReport(requestParameters.startDate, requestParameters.endDate, requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPendingCount(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPendingCount(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiGetPreviousProposalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPreviousProposal(requestParameters: DefaultApiGetPreviousProposalRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPreviousProposal(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.outterStatus, requestParameters.projectName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiGetProjectBeneficiariesReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProjectBeneficiariesReport(requestParameters: DefaultApiGetProjectBeneficiariesReportRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getProjectBeneficiariesReport(requestParameters.startDate, requestParameters.endDate, requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProposalCount(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getProposalCount(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiGetSummaryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSummary(requestParameters: DefaultApiGetSummaryRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSummary(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiGetTransactionAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTransactionAll(requestParameters: DefaultApiGetTransactionAllRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTransactionAll(requestParameters.organizationId, requestParameters.sortStatus, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiGetTransactionListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTransactionList(requestParameters: DefaultApiGetTransactionListRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTransactionList(requestParameters.organizationId, requestParameters.sortStatus, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login with fusion auth
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public googleLogin(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).googleLogin(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login with fusion auth
     * @param {DefaultApiHandleGoogleCallbackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public handleGoogleCallback(requestParameters: DefaultApiHandleGoogleCallbackRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).handleGoogleCallback(requestParameters.handleGoogleCallbackDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiHideRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public hide(requestParameters: DefaultApiHideRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).hide(requestParameters.baseNotificationDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public hideAllMine(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).hideAllMine(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiInsertPaymentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public insertPayment(requestParameters: DefaultApiInsertPaymentRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).insertPayment(requestParameters.createProposalPaymentDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiInsertPaymentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public insertPayments(requestParameters: DefaultApiInsertPaymentsRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).insertPayments(requestParameters.createProposalPaymentDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiInterceptorSaveDraftRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public interceptorSaveDraft(requestParameters: DefaultApiInterceptorSaveDraftRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).interceptorSaveDraft(requestParameters.proposalSaveDraftInterceptorDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public liveness(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).liveness(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public login(requestParameters: DefaultApiLoginRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).login(requestParameters.loginRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiLogin0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public login_9(requestParameters: DefaultApiLogin0Request, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).login_9(requestParameters.loginRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public msegatTest(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).msegatTest(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiMyInboxRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public myInbox(requestParameters: DefaultApiMyInboxRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).myInbox(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.senderId, requestParameters.receiverId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiMyOutboxRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public myOutbox(requestParameters: DefaultApiMyOutboxRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).myOutbox(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.senderId, requestParameters.receiverId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiOldLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public oldLogin(requestParameters: DefaultApiOldLoginRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).oldLogin(requestParameters.loginRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public payStripWebHook(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).payStripWebHook(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postEditRequest(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postEditRequest(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public read(requestParameters: DefaultApiReadRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).read(requestParameters.baseNotificationDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readAll(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readiness(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readiness(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public register(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).register(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiRegisterClientRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public registerClient(requestParameters: DefaultApiRegisterClientRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).registerClient(requestParameters.registerTenderDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiRegisterOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public registerOrganization(requestParameters: DefaultApiRegisterOrganizationRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).registerOrganization(requestParameters.registerOrganizationDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiRegister0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public register_10(requestParameters: DefaultApiRegister0Request, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).register_10(requestParameters.gSRegisterRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiRegister1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public register_11(requestParameters: DefaultApiRegister1Request, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).register_11(requestParameters.registerTenderDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiRejectEditRequestsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rejectEditRequests(requestParameters: DefaultApiRejectEditRequestsRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rejectEditRequests(requestParameters.rejectEditRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public remove(requestParameters: DefaultApiRemoveRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).remove(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiReqPayStripeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public reqPayStripe(requestParameters: DefaultApiReqPayStripeRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).reqPayStripe(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public request(requestParameters: DefaultApiRequestRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).request(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiRequestCartRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public requestCart(requestParameters: DefaultApiRequestCartRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).requestCart(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiRequestCart0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public requestCart_12(requestParameters: DefaultApiRequestCart0Request, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).requestCart_12(requestParameters.paymentPaytabsDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiRequestInProcessRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public requestInProcess(requestParameters: DefaultApiRequestInProcessRequest = {}, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).requestInProcess(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.type, requestParameters.trackId, requestParameters.vat, requestParameters.projectName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiRequestSingleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public requestSingle(requestParameters: DefaultApiRequestSingleRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).requestSingle(requestParameters.paymentPaytabsDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiResetPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public resetPassword(requestParameters: DefaultApiResetPasswordRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).resetPassword(requestParameters.gSResetPassword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiResetPasswordRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public resetPasswordRequest(requestParameters: DefaultApiResetPasswordRequestRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).resetPasswordRequest(requestParameters.forgotPasswordRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiResponseInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public responseInvitation(requestParameters: DefaultApiResponseInvitationRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).responseInvitation(requestParameters.invitationResponseDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiSendRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public send(requestParameters: DefaultApiSendRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).send(requestParameters.sendNewEmailDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiSendAmandementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendAmandement(requestParameters: DefaultApiSendAmandementRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sendAmandement(requestParameters.sendAmandementDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiSendAmandementCqrsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendAmandementCqrs(requestParameters: DefaultApiSendAmandementCqrsRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sendAmandementCqrs(requestParameters.sendAmandementDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiSendCloseReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendCloseReport(requestParameters: DefaultApiSendCloseReportRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sendCloseReport(requestParameters.sendClosingReportDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiSendClosingReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendClosingReport(requestParameters: DefaultApiSendClosingReportRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sendClosingReport(requestParameters.sendClosingReportDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiSendEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendEmail(requestParameters: DefaultApiSendEmailRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sendEmail(requestParameters.messageDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiSendEmailVerifRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendEmailVerif(requestParameters: DefaultApiSendEmailVerifRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sendEmailVerif(requestParameters.sendEmailVerifDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiSendRevisionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendRevision(requestParameters: DefaultApiSendRevisionRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sendRevision(requestParameters.sendRevisionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiSend0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public send_13(requestParameters: DefaultApiSend0Request, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).send_13(requestParameters.createMessageDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiSoftDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public softDelete(requestParameters: DefaultApiSoftDeleteRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).softDelete(requestParameters.getByIdDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Soft delete comment
     * @param {DefaultApiSoftDeleteCommentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public softDeleteComment(requestParameters: DefaultApiSoftDeleteCommentRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).softDeleteComment(requestParameters.deleteCommentsDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Soft delete current user comment
     * @param {DefaultApiSoftDeleteMyCommentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public softDeleteMyComments(requestParameters: DefaultApiSoftDeleteMyCommentsRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).softDeleteMyComments(requestParameters.deleteCommentsDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public startup(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).startup(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiSubmitForgotPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public submitForgotPassword(requestParameters: DefaultApiSubmitForgotPasswordRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).submitForgotPassword(requestParameters.submitChangePasswordDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiSubmitForgotPassword0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public submitForgotPassword_14(requestParameters: DefaultApiSubmitForgotPassword0Request, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).submitForgotPassword_14(requestParameters.submitChangePasswordDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public testClusterAdmin(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).testClusterAdmin(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public testDonor(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).testDonor(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public testNonProfit(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).testNonProfit(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public testOperator(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).testOperator(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public testSuperAdmin(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).testSuperAdmin(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public testVendor(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).testVendor(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiToogleReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public toogleRead(requestParameters: DefaultApiToogleReadRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).toogleRead(requestParameters.toogleReadMessageDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public twilioTest(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).twilioTest(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public update(requestParameters: DefaultApiUpdateRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).update(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiUpdateBanksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateBanks(requestParameters: DefaultApiUpdateBanksRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateBanks(requestParameters.bankListCreateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiUpdateBasketRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateBasket(requestParameters: DefaultApiUpdateBasketRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateBasket(requestParameters.basketId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiUpdatePaymentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updatePayment(requestParameters: DefaultApiUpdatePaymentRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updatePayment(requestParameters.updatePaymentDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiUpdatePaymentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updatePayments(requestParameters: DefaultApiUpdatePaymentsRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updatePayments(requestParameters.updatePaymentDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiUpdateProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateProfile(requestParameters: DefaultApiUpdateProfileRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateProfile(requestParameters.updateProfileDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiUpdateStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateStatus(requestParameters: DefaultApiUpdateStatusRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateStatus(requestParameters.userStatusUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiUpdateTrackBudgetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateTrackBudget(requestParameters: DefaultApiUpdateTrackBudgetRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateTrackBudget(requestParameters.updateTrackBudgetDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateUser(requestParameters: DefaultApiUpdateUserRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateUser(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateUserProfile(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateUserProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiUpdateUser0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateUser_15(requestParameters: DefaultApiUpdateUser0Request, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateUser_15(requestParameters.updateUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiUpdate0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public update_16(requestParameters: DefaultApiUpdate0Request, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).update_16(requestParameters.updateBeneficiaryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiUpdate1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public update_17(requestParameters: DefaultApiUpdate1Request, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).update_17(requestParameters.updateTrackDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiUpsertSchedulesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public upsertSchedules(requestParameters: DefaultApiUpsertSchedulesRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).upsertSchedules(requestParameters.createScheduleDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiVerifyEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public verifyEmail(requestParameters: DefaultApiVerifyEmailRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).verifyEmail(requestParameters.token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiVerifyUserCheckRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public verifyUserCheck(requestParameters: DefaultApiVerifyUserCheckRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).verifyUserCheck(requestParameters.gSVerifyUser, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DonorApi - axios parameter creator
 * @export
 */
export const DonorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Apply to become vendor from donor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyVendor: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/donor/apply-vendor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Donor Payment
         * @param {DonorPaymentSubmitDto} donorPaymentSubmitDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (donorPaymentSubmitDto: DonorPaymentSubmitDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'donorPaymentSubmitDto' is not null or undefined
            assertParamExists('create', 'donorPaymentSubmitDto', donorPaymentSubmitDto)
            const localVarPath = `/donor/payment/submit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(donorPaymentSubmitDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DonorUpdateProfileDto} donorUpdateProfileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDonor: async (donorUpdateProfileDto: DonorUpdateProfileDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'donorUpdateProfileDto' is not null or undefined
            assertParamExists('createDonor', 'donorUpdateProfileDto', donorUpdateProfileDto)
            const localVarPath = `/donor/anonymous/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(donorUpdateProfileDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Donor Payment
         * @param {DonorDonateDto} donorDonateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        donate: async (donorDonateDto: DonorDonateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'donorDonateDto' is not null or undefined
            assertParamExists('donate', 'donorDonateDto', donorDonateDto)
            const localVarPath = `/donor/donate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(donorDonateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Donor Payment
         * @param {DonorDonateItemDto} donorDonateItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        donateItem: async (donorDonateItemDto: DonorDonateItemDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'donorDonateItemDto' is not null or undefined
            assertParamExists('donateItem', 'donorDonateItemDto', donorDonateItemDto)
            const localVarPath = `/donor/donate-item`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(donorDonateItemDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Donor Payment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        donateItemCallback: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/donor/donate-item/callback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Paytabs webhook handler
         * @param {string} signature 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        donatePaytabsWebhook: async (signature: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signature' is not null or undefined
            assertParamExists('donatePaytabsWebhook', 'signature', signature)
            const localVarPath = `/donor/donatePaytabs/webhook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (signature != null) {
                localVarHeaderParameter['signature'] = String(signature);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Stripe webhook handler
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        donateStripeWebhook: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/donor/donateStripe/webhook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of success donation history by donorId
         * @param {string} donorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSuccessDonation: async (donorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'donorId' is not null or undefined
            assertParamExists('getAllSuccessDonation', 'donorId', donorId)
            const localVarPath = `/donor/{donorId}/history/getAllSuccess`
                .replace(`{${"donorId"}}`, encodeURIComponent(String(donorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {string} donorUserId 
         * @param {string} sortStatus 
         * @param {string} sortDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDonationLogs: async (organizationId: string, donorUserId: string, sortStatus: string, sortDate: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getDonationLogs', 'organizationId', organizationId)
            // verify required parameter 'donorUserId' is not null or undefined
            assertParamExists('getDonationLogs', 'donorUserId', donorUserId)
            // verify required parameter 'sortStatus' is not null or undefined
            assertParamExists('getDonationLogs', 'sortStatus', sortStatus)
            // verify required parameter 'sortDate' is not null or undefined
            assertParamExists('getDonationLogs', 'sortDate', sortDate)
            const localVarPath = `/donor/getDonationLogs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (organizationId !== undefined) {
                localVarQueryParameter['organizationId'] = organizationId;
            }

            if (donorUserId !== undefined) {
                localVarQueryParameter['donorUserId'] = donorUserId;
            }

            if (sortStatus !== undefined) {
                localVarQueryParameter['sortStatus'] = sortStatus;
            }

            if (sortDate !== undefined) {
                localVarQueryParameter['sortDate'] = sortDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} donorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDonor: async (donorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'donorId' is not null or undefined
            assertParamExists('getDonor', 'donorId', donorId)
            const localVarPath = `/donor/{donorId}`
                .replace(`{${"donorId"}}`, encodeURIComponent(String(donorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get insight donation log for donor
         * @param {string} donorId 
         * @param {string} organizationId 
         * @param {string} period 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDonorInsight: async (donorId: string, organizationId: string, period: string, startDate: string, endDate: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'donorId' is not null or undefined
            assertParamExists('getDonorInsight', 'donorId', donorId)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getDonorInsight', 'organizationId', organizationId)
            // verify required parameter 'period' is not null or undefined
            assertParamExists('getDonorInsight', 'period', period)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('getDonorInsight', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('getDonorInsight', 'endDate', endDate)
            const localVarPath = `/donor/{donorId}/insight`
                .replace(`{${"donorId"}}`, encodeURIComponent(String(donorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (organizationId !== undefined) {
                localVarQueryParameter['organizationId'] = organizationId;
            }

            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDonorList: async (page?: number, limit?: number, sort?: string, sortingField?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/donor/donorList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDonorListAll: async (organizationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getDonorListAll', 'organizationId', organizationId)
            const localVarPath = `/donor/organization/{organizationId}/manager/getListAll`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Donor Payment
         * @param {string} donorId 
         * @param {string} currencyCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTotalDonation: async (donorId: string, currencyCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'donorId' is not null or undefined
            assertParamExists('getTotalDonation', 'donorId', donorId)
            // verify required parameter 'currencyCode' is not null or undefined
            assertParamExists('getTotalDonation', 'currencyCode', currencyCode)
            const localVarPath = `/donor/totalDonation/{donorId}`
                .replace(`{${"donorId"}}`, encodeURIComponent(String(donorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (currencyCode !== undefined) {
                localVarQueryParameter['currencyCode'] = currencyCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Donation Donor Summary Dashboard
         * @param {string} donorId 
         * @param {string} currencyCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTotalDonationDonor: async (donorId: string, currencyCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'donorId' is not null or undefined
            assertParamExists('getTotalDonationDonor', 'donorId', donorId)
            // verify required parameter 'currencyCode' is not null or undefined
            assertParamExists('getTotalDonationDonor', 'currencyCode', currencyCode)
            const localVarPath = `/donor/totalDonationDonor/{donorId}`
                .replace(`{${"donorId"}}`, encodeURIComponent(String(donorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (currencyCode !== undefined) {
                localVarQueryParameter['currencyCode'] = currencyCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrxDonorList: async (page?: number, limit?: number, sort?: string, sortingField?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/donor/donorTransaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} donorId 
         * @param {DonorUpdateProfileDto} donorUpdateProfileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDonor: async (donorId: string, donorUpdateProfileDto: DonorUpdateProfileDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'donorId' is not null or undefined
            assertParamExists('updateDonor', 'donorId', donorId)
            // verify required parameter 'donorUpdateProfileDto' is not null or undefined
            assertParamExists('updateDonor', 'donorUpdateProfileDto', donorUpdateProfileDto)
            const localVarPath = `/donor/{donorId}`
                .replace(`{${"donorId"}}`, encodeURIComponent(String(donorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(donorUpdateProfileDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DonorApi - functional programming interface
 * @export
 */
export const DonorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DonorApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Apply to become vendor from donor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applyVendor(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.applyVendor(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Donor Payment
         * @param {DonorPaymentSubmitDto} donorPaymentSubmitDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(donorPaymentSubmitDto: DonorPaymentSubmitDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(donorPaymentSubmitDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DonorUpdateProfileDto} donorUpdateProfileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDonor(donorUpdateProfileDto: DonorUpdateProfileDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDonor(donorUpdateProfileDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Donor Payment
         * @param {DonorDonateDto} donorDonateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async donate(donorDonateDto: DonorDonateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.donate(donorDonateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Donor Payment
         * @param {DonorDonateItemDto} donorDonateItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async donateItem(donorDonateItemDto: DonorDonateItemDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.donateItem(donorDonateItemDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Donor Payment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async donateItemCallback(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.donateItemCallback(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Paytabs webhook handler
         * @param {string} signature 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async donatePaytabsWebhook(signature: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.donatePaytabsWebhook(signature, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Stripe webhook handler
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async donateStripeWebhook(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.donateStripeWebhook(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get list of success donation history by donorId
         * @param {string} donorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSuccessDonation(donorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSuccessDonation(donorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {string} donorUserId 
         * @param {string} sortStatus 
         * @param {string} sortDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDonationLogs(organizationId: string, donorUserId: string, sortStatus: string, sortDate: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDonationLogs(organizationId, donorUserId, sortStatus, sortDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} donorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDonor(donorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDonor(donorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get insight donation log for donor
         * @param {string} donorId 
         * @param {string} organizationId 
         * @param {string} period 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDonorInsight(donorId: string, organizationId: string, period: string, startDate: string, endDate: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDonorInsight(donorId, organizationId, period, startDate, endDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDonorList(page?: number, limit?: number, sort?: string, sortingField?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDonorList(page, limit, sort, sortingField, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDonorListAll(organizationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDonorListAll(organizationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Donor Payment
         * @param {string} donorId 
         * @param {string} currencyCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTotalDonation(donorId: string, currencyCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTotalDonation(donorId, currencyCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Donation Donor Summary Dashboard
         * @param {string} donorId 
         * @param {string} currencyCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTotalDonationDonor(donorId: string, currencyCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTotalDonationDonor(donorId, currencyCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrxDonorList(page?: number, limit?: number, sort?: string, sortingField?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTrxDonorList(page, limit, sort, sortingField, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} donorId 
         * @param {DonorUpdateProfileDto} donorUpdateProfileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDonor(donorId: string, donorUpdateProfileDto: DonorUpdateProfileDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDonor(donorId, donorUpdateProfileDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DonorApi - factory interface
 * @export
 */
export const DonorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DonorApiFp(configuration)
    return {
        /**
         * 
         * @summary Apply to become vendor from donor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyVendor(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.applyVendor(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Donor Payment
         * @param {DonorApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: DonorApiCreateRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.create(requestParameters.donorPaymentSubmitDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DonorApiCreateDonorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDonor(requestParameters: DonorApiCreateDonorRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createDonor(requestParameters.donorUpdateProfileDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Donor Payment
         * @param {DonorApiDonateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        donate(requestParameters: DonorApiDonateRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.donate(requestParameters.donorDonateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Donor Payment
         * @param {DonorApiDonateItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        donateItem(requestParameters: DonorApiDonateItemRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.donateItem(requestParameters.donorDonateItemDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Donor Payment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        donateItemCallback(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.donateItemCallback(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Paytabs webhook handler
         * @param {DonorApiDonatePaytabsWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        donatePaytabsWebhook(requestParameters: DonorApiDonatePaytabsWebhookRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.donatePaytabsWebhook(requestParameters.signature, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Stripe webhook handler
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        donateStripeWebhook(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.donateStripeWebhook(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of success donation history by donorId
         * @param {DonorApiGetAllSuccessDonationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSuccessDonation(requestParameters: DonorApiGetAllSuccessDonationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAllSuccessDonation(requestParameters.donorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DonorApiGetDonationLogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDonationLogs(requestParameters: DonorApiGetDonationLogsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getDonationLogs(requestParameters.organizationId, requestParameters.donorUserId, requestParameters.sortStatus, requestParameters.sortDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DonorApiGetDonorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDonor(requestParameters: DonorApiGetDonorRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getDonor(requestParameters.donorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get insight donation log for donor
         * @param {DonorApiGetDonorInsightRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDonorInsight(requestParameters: DonorApiGetDonorInsightRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getDonorInsight(requestParameters.donorId, requestParameters.organizationId, requestParameters.period, requestParameters.startDate, requestParameters.endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DonorApiGetDonorListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDonorList(requestParameters: DonorApiGetDonorListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getDonorList(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DonorApiGetDonorListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDonorListAll(requestParameters: DonorApiGetDonorListAllRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getDonorListAll(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Donor Payment
         * @param {DonorApiGetTotalDonationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTotalDonation(requestParameters: DonorApiGetTotalDonationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getTotalDonation(requestParameters.donorId, requestParameters.currencyCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Donation Donor Summary Dashboard
         * @param {DonorApiGetTotalDonationDonorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTotalDonationDonor(requestParameters: DonorApiGetTotalDonationDonorRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getTotalDonationDonor(requestParameters.donorId, requestParameters.currencyCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DonorApiGetTrxDonorListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrxDonorList(requestParameters: DonorApiGetTrxDonorListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getTrxDonorList(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DonorApiUpdateDonorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDonor(requestParameters: DonorApiUpdateDonorRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateDonor(requestParameters.donorId, requestParameters.donorUpdateProfileDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for create operation in DonorApi.
 * @export
 * @interface DonorApiCreateRequest
 */
export interface DonorApiCreateRequest {
    /**
     * 
     * @type {DonorPaymentSubmitDto}
     * @memberof DonorApiCreate
     */
    readonly donorPaymentSubmitDto: DonorPaymentSubmitDto
}

/**
 * Request parameters for createDonor operation in DonorApi.
 * @export
 * @interface DonorApiCreateDonorRequest
 */
export interface DonorApiCreateDonorRequest {
    /**
     * 
     * @type {DonorUpdateProfileDto}
     * @memberof DonorApiCreateDonor
     */
    readonly donorUpdateProfileDto: DonorUpdateProfileDto
}

/**
 * Request parameters for donate operation in DonorApi.
 * @export
 * @interface DonorApiDonateRequest
 */
export interface DonorApiDonateRequest {
    /**
     * 
     * @type {DonorDonateDto}
     * @memberof DonorApiDonate
     */
    readonly donorDonateDto: DonorDonateDto
}

/**
 * Request parameters for donateItem operation in DonorApi.
 * @export
 * @interface DonorApiDonateItemRequest
 */
export interface DonorApiDonateItemRequest {
    /**
     * 
     * @type {DonorDonateItemDto}
     * @memberof DonorApiDonateItem
     */
    readonly donorDonateItemDto: DonorDonateItemDto
}

/**
 * Request parameters for donatePaytabsWebhook operation in DonorApi.
 * @export
 * @interface DonorApiDonatePaytabsWebhookRequest
 */
export interface DonorApiDonatePaytabsWebhookRequest {
    /**
     * 
     * @type {string}
     * @memberof DonorApiDonatePaytabsWebhook
     */
    readonly signature: string
}

/**
 * Request parameters for getAllSuccessDonation operation in DonorApi.
 * @export
 * @interface DonorApiGetAllSuccessDonationRequest
 */
export interface DonorApiGetAllSuccessDonationRequest {
    /**
     * 
     * @type {string}
     * @memberof DonorApiGetAllSuccessDonation
     */
    readonly donorId: string
}

/**
 * Request parameters for getDonationLogs operation in DonorApi.
 * @export
 * @interface DonorApiGetDonationLogsRequest
 */
export interface DonorApiGetDonationLogsRequest {
    /**
     * 
     * @type {string}
     * @memberof DonorApiGetDonationLogs
     */
    readonly organizationId: string

    /**
     * 
     * @type {string}
     * @memberof DonorApiGetDonationLogs
     */
    readonly donorUserId: string

    /**
     * 
     * @type {string}
     * @memberof DonorApiGetDonationLogs
     */
    readonly sortStatus: string

    /**
     * 
     * @type {string}
     * @memberof DonorApiGetDonationLogs
     */
    readonly sortDate: string
}

/**
 * Request parameters for getDonor operation in DonorApi.
 * @export
 * @interface DonorApiGetDonorRequest
 */
export interface DonorApiGetDonorRequest {
    /**
     * 
     * @type {string}
     * @memberof DonorApiGetDonor
     */
    readonly donorId: string
}

/**
 * Request parameters for getDonorInsight operation in DonorApi.
 * @export
 * @interface DonorApiGetDonorInsightRequest
 */
export interface DonorApiGetDonorInsightRequest {
    /**
     * 
     * @type {string}
     * @memberof DonorApiGetDonorInsight
     */
    readonly donorId: string

    /**
     * 
     * @type {string}
     * @memberof DonorApiGetDonorInsight
     */
    readonly organizationId: string

    /**
     * 
     * @type {string}
     * @memberof DonorApiGetDonorInsight
     */
    readonly period: string

    /**
     * 
     * @type {string}
     * @memberof DonorApiGetDonorInsight
     */
    readonly startDate: string

    /**
     * 
     * @type {string}
     * @memberof DonorApiGetDonorInsight
     */
    readonly endDate: string
}

/**
 * Request parameters for getDonorList operation in DonorApi.
 * @export
 * @interface DonorApiGetDonorListRequest
 */
export interface DonorApiGetDonorListRequest {
    /**
     * 
     * @type {number}
     * @memberof DonorApiGetDonorList
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DonorApiGetDonorList
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof DonorApiGetDonorList
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof DonorApiGetDonorList
     */
    readonly sortingField?: string
}

/**
 * Request parameters for getDonorListAll operation in DonorApi.
 * @export
 * @interface DonorApiGetDonorListAllRequest
 */
export interface DonorApiGetDonorListAllRequest {
    /**
     * 
     * @type {string}
     * @memberof DonorApiGetDonorListAll
     */
    readonly organizationId: string
}

/**
 * Request parameters for getTotalDonation operation in DonorApi.
 * @export
 * @interface DonorApiGetTotalDonationRequest
 */
export interface DonorApiGetTotalDonationRequest {
    /**
     * 
     * @type {string}
     * @memberof DonorApiGetTotalDonation
     */
    readonly donorId: string

    /**
     * 
     * @type {string}
     * @memberof DonorApiGetTotalDonation
     */
    readonly currencyCode: string
}

/**
 * Request parameters for getTotalDonationDonor operation in DonorApi.
 * @export
 * @interface DonorApiGetTotalDonationDonorRequest
 */
export interface DonorApiGetTotalDonationDonorRequest {
    /**
     * 
     * @type {string}
     * @memberof DonorApiGetTotalDonationDonor
     */
    readonly donorId: string

    /**
     * 
     * @type {string}
     * @memberof DonorApiGetTotalDonationDonor
     */
    readonly currencyCode: string
}

/**
 * Request parameters for getTrxDonorList operation in DonorApi.
 * @export
 * @interface DonorApiGetTrxDonorListRequest
 */
export interface DonorApiGetTrxDonorListRequest {
    /**
     * 
     * @type {number}
     * @memberof DonorApiGetTrxDonorList
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof DonorApiGetTrxDonorList
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof DonorApiGetTrxDonorList
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof DonorApiGetTrxDonorList
     */
    readonly sortingField?: string
}

/**
 * Request parameters for updateDonor operation in DonorApi.
 * @export
 * @interface DonorApiUpdateDonorRequest
 */
export interface DonorApiUpdateDonorRequest {
    /**
     * 
     * @type {string}
     * @memberof DonorApiUpdateDonor
     */
    readonly donorId: string

    /**
     * 
     * @type {DonorUpdateProfileDto}
     * @memberof DonorApiUpdateDonor
     */
    readonly donorUpdateProfileDto: DonorUpdateProfileDto
}

/**
 * DonorApi - object-oriented interface
 * @export
 * @class DonorApi
 * @extends {BaseAPI}
 */
export class DonorApi extends BaseAPI {
    /**
     * 
     * @summary Apply to become vendor from donor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonorApi
     */
    public applyVendor(options?: AxiosRequestConfig) {
        return DonorApiFp(this.configuration).applyVendor(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Donor Payment
     * @param {DonorApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonorApi
     */
    public create(requestParameters: DonorApiCreateRequest, options?: AxiosRequestConfig) {
        return DonorApiFp(this.configuration).create(requestParameters.donorPaymentSubmitDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DonorApiCreateDonorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonorApi
     */
    public createDonor(requestParameters: DonorApiCreateDonorRequest, options?: AxiosRequestConfig) {
        return DonorApiFp(this.configuration).createDonor(requestParameters.donorUpdateProfileDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Donor Payment
     * @param {DonorApiDonateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonorApi
     */
    public donate(requestParameters: DonorApiDonateRequest, options?: AxiosRequestConfig) {
        return DonorApiFp(this.configuration).donate(requestParameters.donorDonateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Donor Payment
     * @param {DonorApiDonateItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonorApi
     */
    public donateItem(requestParameters: DonorApiDonateItemRequest, options?: AxiosRequestConfig) {
        return DonorApiFp(this.configuration).donateItem(requestParameters.donorDonateItemDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Donor Payment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonorApi
     */
    public donateItemCallback(options?: AxiosRequestConfig) {
        return DonorApiFp(this.configuration).donateItemCallback(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Paytabs webhook handler
     * @param {DonorApiDonatePaytabsWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonorApi
     */
    public donatePaytabsWebhook(requestParameters: DonorApiDonatePaytabsWebhookRequest, options?: AxiosRequestConfig) {
        return DonorApiFp(this.configuration).donatePaytabsWebhook(requestParameters.signature, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Stripe webhook handler
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonorApi
     */
    public donateStripeWebhook(options?: AxiosRequestConfig) {
        return DonorApiFp(this.configuration).donateStripeWebhook(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of success donation history by donorId
     * @param {DonorApiGetAllSuccessDonationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonorApi
     */
    public getAllSuccessDonation(requestParameters: DonorApiGetAllSuccessDonationRequest, options?: AxiosRequestConfig) {
        return DonorApiFp(this.configuration).getAllSuccessDonation(requestParameters.donorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DonorApiGetDonationLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonorApi
     */
    public getDonationLogs(requestParameters: DonorApiGetDonationLogsRequest, options?: AxiosRequestConfig) {
        return DonorApiFp(this.configuration).getDonationLogs(requestParameters.organizationId, requestParameters.donorUserId, requestParameters.sortStatus, requestParameters.sortDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DonorApiGetDonorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonorApi
     */
    public getDonor(requestParameters: DonorApiGetDonorRequest, options?: AxiosRequestConfig) {
        return DonorApiFp(this.configuration).getDonor(requestParameters.donorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get insight donation log for donor
     * @param {DonorApiGetDonorInsightRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonorApi
     */
    public getDonorInsight(requestParameters: DonorApiGetDonorInsightRequest, options?: AxiosRequestConfig) {
        return DonorApiFp(this.configuration).getDonorInsight(requestParameters.donorId, requestParameters.organizationId, requestParameters.period, requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DonorApiGetDonorListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonorApi
     */
    public getDonorList(requestParameters: DonorApiGetDonorListRequest = {}, options?: AxiosRequestConfig) {
        return DonorApiFp(this.configuration).getDonorList(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DonorApiGetDonorListAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonorApi
     */
    public getDonorListAll(requestParameters: DonorApiGetDonorListAllRequest, options?: AxiosRequestConfig) {
        return DonorApiFp(this.configuration).getDonorListAll(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Donor Payment
     * @param {DonorApiGetTotalDonationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonorApi
     */
    public getTotalDonation(requestParameters: DonorApiGetTotalDonationRequest, options?: AxiosRequestConfig) {
        return DonorApiFp(this.configuration).getTotalDonation(requestParameters.donorId, requestParameters.currencyCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Donation Donor Summary Dashboard
     * @param {DonorApiGetTotalDonationDonorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonorApi
     */
    public getTotalDonationDonor(requestParameters: DonorApiGetTotalDonationDonorRequest, options?: AxiosRequestConfig) {
        return DonorApiFp(this.configuration).getTotalDonationDonor(requestParameters.donorId, requestParameters.currencyCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DonorApiGetTrxDonorListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonorApi
     */
    public getTrxDonorList(requestParameters: DonorApiGetTrxDonorListRequest = {}, options?: AxiosRequestConfig) {
        return DonorApiFp(this.configuration).getTrxDonorList(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DonorApiUpdateDonorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DonorApi
     */
    public updateDonor(requestParameters: DonorApiUpdateDonorRequest, options?: AxiosRequestConfig) {
        return DonorApiFp(this.configuration).updateDonor(requestParameters.donorId, requestParameters.donorUpdateProfileDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * HrApi - axios parameter creator
 * @export
 */
export const HrApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete hr
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_delete', 'id', id)
            const localVarPath = `/hr/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Hr Data
         * @param {CreateHrDto} createHrDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (createHrDto: CreateHrDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createHrDto' is not null or undefined
            assertParamExists('create', 'createHrDto', createHrDto)
            const localVarPath = `/hr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createHrDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Hr
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllHr: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/hr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get hr by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/hr/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update hr
         * @param {string} id 
         * @param {UpdateHrDto} updateHrDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (id: string, updateHrDto: UpdateHrDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update', 'id', id)
            // verify required parameter 'updateHrDto' is not null or undefined
            assertParamExists('update', 'updateHrDto', updateHrDto)
            const localVarPath = `/hr/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateHrDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HrApi - functional programming interface
 * @export
 */
export const HrApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HrApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete hr
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Hr Data
         * @param {CreateHrDto} createHrDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(createHrDto: CreateHrDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(createHrDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get All Hr
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllHr(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllHr(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get hr by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update hr
         * @param {string} id 
         * @param {UpdateHrDto} updateHrDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(id: string, updateHrDto: UpdateHrDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(id, updateHrDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HrApi - factory interface
 * @export
 */
export const HrApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HrApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete hr
         * @param {HrApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(requestParameters: HrApiDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp._delete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Hr Data
         * @param {HrApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: HrApiCreateRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.create(requestParameters.createHrDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Hr
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllHr(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAllHr(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get hr by id
         * @param {HrApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: HrApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update hr
         * @param {HrApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters: HrApiUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.update(requestParameters.id, requestParameters.updateHrDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for _delete operation in HrApi.
 * @export
 * @interface HrApiDeleteRequest
 */
export interface HrApiDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof HrApiDelete
     */
    readonly id: string
}

/**
 * Request parameters for create operation in HrApi.
 * @export
 * @interface HrApiCreateRequest
 */
export interface HrApiCreateRequest {
    /**
     * 
     * @type {CreateHrDto}
     * @memberof HrApiCreate
     */
    readonly createHrDto: CreateHrDto
}

/**
 * Request parameters for getById operation in HrApi.
 * @export
 * @interface HrApiGetByIdRequest
 */
export interface HrApiGetByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof HrApiGetById
     */
    readonly id: string
}

/**
 * Request parameters for update operation in HrApi.
 * @export
 * @interface HrApiUpdateRequest
 */
export interface HrApiUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof HrApiUpdate
     */
    readonly id: string

    /**
     * 
     * @type {UpdateHrDto}
     * @memberof HrApiUpdate
     */
    readonly updateHrDto: UpdateHrDto
}

/**
 * HrApi - object-oriented interface
 * @export
 * @class HrApi
 * @extends {BaseAPI}
 */
export class HrApi extends BaseAPI {
    /**
     * 
     * @summary Delete hr
     * @param {HrApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HrApi
     */
    public _delete(requestParameters: HrApiDeleteRequest, options?: AxiosRequestConfig) {
        return HrApiFp(this.configuration)._delete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Hr Data
     * @param {HrApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HrApi
     */
    public create(requestParameters: HrApiCreateRequest, options?: AxiosRequestConfig) {
        return HrApiFp(this.configuration).create(requestParameters.createHrDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Hr
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HrApi
     */
    public getAllHr(options?: AxiosRequestConfig) {
        return HrApiFp(this.configuration).getAllHr(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get hr by id
     * @param {HrApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HrApi
     */
    public getById(requestParameters: HrApiGetByIdRequest, options?: AxiosRequestConfig) {
        return HrApiFp(this.configuration).getById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update hr
     * @param {HrApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HrApi
     */
    public update(requestParameters: HrApiUpdateRequest, options?: AxiosRequestConfig) {
        return HrApiFp(this.configuration).update(requestParameters.id, requestParameters.updateHrDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ItemApi - axios parameter creator
 * @export
 */
export const ItemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/item/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Items viewed by operator
         * @param {string} operatorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllItemsByOperatorId: async (operatorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'operatorId' is not null or undefined
            assertParamExists('getAllItemsByOperatorId', 'operatorId', operatorId)
            const localVarPath = `/item/manager/operator/{operatorId}/getListAll`
                .replace(`{${"operatorId"}}`, encodeURIComponent(String(operatorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Items viewed by manager
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProjects: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/item/manager/getListAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary set flag to delete campaign
         * @param {ItemSetDeletedFlagDto} itemSetDeletedFlagDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDeletedFlag: async (itemSetDeletedFlagDto: ItemSetDeletedFlagDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemSetDeletedFlagDto' is not null or undefined
            assertParamExists('setDeletedFlag', 'itemSetDeletedFlagDto', itemSetDeletedFlagDto)
            const localVarPath = `/item/setDeletedFlagBatch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(itemSetDeletedFlagDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update project
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProject: async (itemId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('updateProject', 'itemId', itemId)
            const localVarPath = `/item/update/{itemId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ItemApi - functional programming interface
 * @export
 */
export const ItemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ItemApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get All Items viewed by operator
         * @param {string} operatorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllItemsByOperatorId(operatorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllItemsByOperatorId(operatorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get All Items viewed by manager
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllProjects(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllProjects(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary set flag to delete campaign
         * @param {ItemSetDeletedFlagDto} itemSetDeletedFlagDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setDeletedFlag(itemSetDeletedFlagDto: ItemSetDeletedFlagDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setDeletedFlag(itemSetDeletedFlagDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update project
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProject(itemId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProject(itemId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ItemApi - factory interface
 * @export
 */
export const ItemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ItemApiFp(configuration)
    return {
        /**
         * 
         * @summary Create item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.create(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Items viewed by operator
         * @param {ItemApiGetAllItemsByOperatorIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllItemsByOperatorId(requestParameters: ItemApiGetAllItemsByOperatorIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAllItemsByOperatorId(requestParameters.operatorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Items viewed by manager
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProjects(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAllProjects(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary set flag to delete campaign
         * @param {ItemApiSetDeletedFlagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDeletedFlag(requestParameters: ItemApiSetDeletedFlagRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.setDeletedFlag(requestParameters.itemSetDeletedFlagDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update project
         * @param {ItemApiUpdateProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProject(requestParameters: ItemApiUpdateProjectRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateProject(requestParameters.itemId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAllItemsByOperatorId operation in ItemApi.
 * @export
 * @interface ItemApiGetAllItemsByOperatorIdRequest
 */
export interface ItemApiGetAllItemsByOperatorIdRequest {
    /**
     * 
     * @type {string}
     * @memberof ItemApiGetAllItemsByOperatorId
     */
    readonly operatorId: string
}

/**
 * Request parameters for setDeletedFlag operation in ItemApi.
 * @export
 * @interface ItemApiSetDeletedFlagRequest
 */
export interface ItemApiSetDeletedFlagRequest {
    /**
     * 
     * @type {ItemSetDeletedFlagDto}
     * @memberof ItemApiSetDeletedFlag
     */
    readonly itemSetDeletedFlagDto: ItemSetDeletedFlagDto
}

/**
 * Request parameters for updateProject operation in ItemApi.
 * @export
 * @interface ItemApiUpdateProjectRequest
 */
export interface ItemApiUpdateProjectRequest {
    /**
     * 
     * @type {string}
     * @memberof ItemApiUpdateProject
     */
    readonly itemId: string
}

/**
 * ItemApi - object-oriented interface
 * @export
 * @class ItemApi
 * @extends {BaseAPI}
 */
export class ItemApi extends BaseAPI {
    /**
     * 
     * @summary Create item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public create(options?: AxiosRequestConfig) {
        return ItemApiFp(this.configuration).create(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Items viewed by operator
     * @param {ItemApiGetAllItemsByOperatorIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public getAllItemsByOperatorId(requestParameters: ItemApiGetAllItemsByOperatorIdRequest, options?: AxiosRequestConfig) {
        return ItemApiFp(this.configuration).getAllItemsByOperatorId(requestParameters.operatorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Items viewed by manager
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public getAllProjects(options?: AxiosRequestConfig) {
        return ItemApiFp(this.configuration).getAllProjects(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary set flag to delete campaign
     * @param {ItemApiSetDeletedFlagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public setDeletedFlag(requestParameters: ItemApiSetDeletedFlagRequest, options?: AxiosRequestConfig) {
        return ItemApiFp(this.configuration).setDeletedFlag(requestParameters.itemSetDeletedFlagDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update project
     * @param {ItemApiUpdateProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public updateProject(requestParameters: ItemApiUpdateProjectRequest, options?: AxiosRequestConfig) {
        return ItemApiFp(this.configuration).updateProject(requestParameters.itemId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ManagerApi - axios parameter creator
 * @export
 */
export const ManagerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Chart Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChartData: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/manager/getChartData`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ManagerApi - functional programming interface
 * @export
 */
export const ManagerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ManagerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Chart Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChartData(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChartData(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ManagerApi - factory interface
 * @export
 */
export const ManagerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ManagerApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Chart Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChartData(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getChartData(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ManagerApi - object-oriented interface
 * @export
 * @class ManagerApi
 * @extends {BaseAPI}
 */
export class ManagerApi extends BaseAPI {
    /**
     * 
     * @summary Get Chart Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagerApi
     */
    public getChartData(options?: AxiosRequestConfig) {
        return ManagerApiFp(this.configuration).getChartData(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OperatorApi - axios parameter creator
 * @export
 */
export const OperatorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Chart Data
         * @param {string} operatorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChartData: async (operatorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'operatorId' is not null or undefined
            assertParamExists('getChartData', 'operatorId', operatorId)
            const localVarPath = `/operator/{operatorId}/getChartData`
                .replace(`{${"operatorId"}}`, encodeURIComponent(String(operatorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get List All Operator
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [name] 
         * @param {string} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListAll: async (page?: number, limit?: number, sort?: string, sortingField?: string, name?: string, sortBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/operator/getListAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get operator details
         * @param {string} operatorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperatorDetail: async (operatorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'operatorId' is not null or undefined
            assertParamExists('getOperatorDetail', 'operatorId', operatorId)
            const localVarPath = `/operator/{operatorId}/detail`
                .replace(`{${"operatorId"}}`, encodeURIComponent(String(operatorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OperatorApi - functional programming interface
 * @export
 */
export const OperatorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OperatorApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Chart Data
         * @param {string} operatorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChartData(operatorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChartData(operatorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get List All Operator
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [name] 
         * @param {string} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListAll(page?: number, limit?: number, sort?: string, sortingField?: string, name?: string, sortBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListAll(page, limit, sort, sortingField, name, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get operator details
         * @param {string} operatorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOperatorDetail(operatorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOperatorDetail(operatorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OperatorApi - factory interface
 * @export
 */
export const OperatorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OperatorApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Chart Data
         * @param {OperatorApiGetChartDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChartData(requestParameters: OperatorApiGetChartDataRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getChartData(requestParameters.operatorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get List All Operator
         * @param {OperatorApiGetListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListAll(requestParameters: OperatorApiGetListAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getListAll(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.name, requestParameters.sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get operator details
         * @param {OperatorApiGetOperatorDetailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperatorDetail(requestParameters: OperatorApiGetOperatorDetailRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getOperatorDetail(requestParameters.operatorId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getChartData operation in OperatorApi.
 * @export
 * @interface OperatorApiGetChartDataRequest
 */
export interface OperatorApiGetChartDataRequest {
    /**
     * 
     * @type {string}
     * @memberof OperatorApiGetChartData
     */
    readonly operatorId: string
}

/**
 * Request parameters for getListAll operation in OperatorApi.
 * @export
 * @interface OperatorApiGetListAllRequest
 */
export interface OperatorApiGetListAllRequest {
    /**
     * 
     * @type {number}
     * @memberof OperatorApiGetListAll
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof OperatorApiGetListAll
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof OperatorApiGetListAll
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof OperatorApiGetListAll
     */
    readonly sortingField?: string

    /**
     * 
     * @type {string}
     * @memberof OperatorApiGetListAll
     */
    readonly name?: string

    /**
     * 
     * @type {string}
     * @memberof OperatorApiGetListAll
     */
    readonly sortBy?: string
}

/**
 * Request parameters for getOperatorDetail operation in OperatorApi.
 * @export
 * @interface OperatorApiGetOperatorDetailRequest
 */
export interface OperatorApiGetOperatorDetailRequest {
    /**
     * 
     * @type {string}
     * @memberof OperatorApiGetOperatorDetail
     */
    readonly operatorId: string
}

/**
 * OperatorApi - object-oriented interface
 * @export
 * @class OperatorApi
 * @extends {BaseAPI}
 */
export class OperatorApi extends BaseAPI {
    /**
     * 
     * @summary Get Chart Data
     * @param {OperatorApiGetChartDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApi
     */
    public getChartData(requestParameters: OperatorApiGetChartDataRequest, options?: AxiosRequestConfig) {
        return OperatorApiFp(this.configuration).getChartData(requestParameters.operatorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get List All Operator
     * @param {OperatorApiGetListAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApi
     */
    public getListAll(requestParameters: OperatorApiGetListAllRequest = {}, options?: AxiosRequestConfig) {
        return OperatorApiFp(this.configuration).getListAll(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.name, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get operator details
     * @param {OperatorApiGetOperatorDetailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApi
     */
    public getOperatorDetail(requestParameters: OperatorApiGetOperatorDetailRequest, options?: AxiosRequestConfig) {
        return OperatorApiFp(this.configuration).getOperatorDetail(requestParameters.operatorId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrgsApi - axios parameter creator
 * @export
 */
export const OrgsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNotification: async (organizationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('addNotification', 'organizationId', organizationId)
            const localVarPath = `/orgs/{organizationId}/notifications/add`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {PaymentGateWayDto} paymentGateWayDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPaymentGateway: async (organizationId: string, paymentGateWayDto: PaymentGateWayDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('addPaymentGateway', 'organizationId', organizationId)
            // verify required parameter 'paymentGateWayDto' is not null or undefined
            assertParamExists('addPaymentGateway', 'paymentGateWayDto', paymentGateWayDto)
            const localVarPath = `/orgs/{organizationId}/paymentGateway`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentGateWayDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAboutUs: async (organizationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('createAboutUs', 'organizationId', organizationId)
            const localVarPath = `/orgs/{organizationId}/aboutUs`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {AppearancenDto} appearancenDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAppearance: async (organizationId: string, appearancenDto: AppearancenDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('createAppearance', 'organizationId', organizationId)
            // verify required parameter 'appearancenDto' is not null or undefined
            assertParamExists('createAppearance', 'appearancenDto', appearancenDto)
            const localVarPath = `/orgs/appearance/{organizationId}/create`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(appearancenDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBlog: async (organizationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('createBlog', 'organizationId', organizationId)
            const localVarPath = `/orgs/{organizationId}/blog`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create contactUs
         * @param {string} organizationId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContactUs: async (organizationId: string, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('createContactUs', 'organizationId', organizationId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createContactUs', 'body', body)
            const localVarPath = `/orgs/{organizationId}/contactUs`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFaq: async (body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createFaq', 'body', body)
            const localVarPath = `/orgs/faq`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLandingPage: async (organizationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('createLandingPage', 'organizationId', organizationId)
            const localVarPath = `/orgs/{organizationId}/landingPage`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNotificationSettings: async (body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createNotificationSettings', 'body', body)
            const localVarPath = `/orgs/notification-settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update aboutUs
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editAboutUs: async (organizationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('editAboutUs', 'organizationId', organizationId)
            const localVarPath = `/orgs/{organizationId}/aboutUs`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update blog
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editBlog: async (organizationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('editBlog', 'organizationId', organizationId)
            const localVarPath = `/orgs/{organizationId}/blog`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update contactUs
         * @param {string} organizationId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editContactUs: async (organizationId: string, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('editContactUs', 'organizationId', organizationId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('editContactUs', 'body', body)
            const localVarPath = `/orgs/{organizationId}/contactUs`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update landingPage
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editLandingPage: async (organizationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('editLandingPage', 'organizationId', organizationId)
            const localVarPath = `/orgs/{organizationId}/landingPage`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orgs/getListAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAboutUs: async (organizationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getAboutUs', 'organizationId', organizationId)
            const localVarPath = `/orgs/{organizationId}/aboutUs`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all organization overview (superadmin)
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOrgAdmin: async (page?: number, limit?: number, sort?: string, sortingField?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orgs/getAllOrgAdmin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppearance: async (organizationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getAppearance', 'organizationId', organizationId)
            const localVarPath = `/orgs/appearance/{organizationId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlog: async (organizationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getBlog', 'organizationId', organizationId)
            const localVarPath = `/orgs/{organizationId}/blog`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContactUs: async (organizationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getContactUs', 'organizationId', organizationId)
            const localVarPath = `/orgs/{organizationId}/contactUs`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDonorList: async (organizationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getDonorList', 'organizationId', organizationId)
            const localVarPath = `/orgs/donors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (organizationId !== undefined) {
                localVarQueryParameter['organizationId'] = organizationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDonorsList: async (page?: number, limit?: number, sort?: string, sortingField?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orgs/donor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFaqList: async (organizationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getFaqList', 'organizationId', organizationId)
            const localVarPath = `/orgs/faq`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (organizationId !== undefined) {
                localVarQueryParameter['organizationId'] = organizationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {string} period 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInsightSummary: async (organizationId: string, period: string, startDate: string, endDate: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getInsightSummary', 'organizationId', organizationId)
            // verify required parameter 'period' is not null or undefined
            assertParamExists('getInsightSummary', 'period', period)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('getInsightSummary', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('getInsightSummary', 'endDate', endDate)
            const localVarPath = `/orgs/insight`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (organizationId !== undefined) {
                localVarQueryParameter['organizationId'] = organizationId;
            }

            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {string} donorId 
         * @param {string} period 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInsightSummaryDonorId: async (organizationId: string, donorId: string, period: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getInsightSummaryDonorId', 'organizationId', organizationId)
            // verify required parameter 'donorId' is not null or undefined
            assertParamExists('getInsightSummaryDonorId', 'donorId', donorId)
            // verify required parameter 'period' is not null or undefined
            assertParamExists('getInsightSummaryDonorId', 'period', period)
            const localVarPath = `/orgs/donor/{organizationId}/{donorId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"donorId"}}`, encodeURIComponent(String(donorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLandingPage: async (organizationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getLandingPage', 'organizationId', organizationId)
            const localVarPath = `/orgs/{organizationId}/landingPage`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationList: async (organizationId: string, type: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getNotificationList', 'organizationId', organizationId)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getNotificationList', 'type', type)
            const localVarPath = `/orgs/notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (organizationId !== undefined) {
                localVarQueryParameter['organizationId'] = organizationId;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationSettings: async (organizationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getNotificationSettings', 'organizationId', organizationId)
            const localVarPath = `/orgs/notification-settings/{organizationId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization: async (organizationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getOrganization', 'organizationId', organizationId)
            const localVarPath = `/orgs/{organizationId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentGatewayList: async (organizationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getPaymentGatewayList', 'organizationId', organizationId)
            const localVarPath = `/orgs/{organizationId}/paymentGateway`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {AppearancenDto} appearancenDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAppearance: async (organizationId: string, appearancenDto: AppearancenDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('updateAppearance', 'organizationId', organizationId)
            // verify required parameter 'appearancenDto' is not null or undefined
            assertParamExists('updateAppearance', 'appearancenDto', appearancenDto)
            const localVarPath = `/orgs/appearance/{organizationId}/update`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(appearancenDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} faqId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFaq: async (faqId: string, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'faqId' is not null or undefined
            assertParamExists('updateFaq', 'faqId', faqId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateFaq', 'body', body)
            const localVarPath = `/orgs/faq/{faqId}`
                .replace(`{${"faqId"}}`, encodeURIComponent(String(faqId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNotificationSettings: async (organizationId: string, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('updateNotificationSettings', 'organizationId', organizationId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateNotificationSettings', 'body', body)
            const localVarPath = `/orgs/notification-settings/{organizationId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganization: async (organizationId: string, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('updateOrganization', 'organizationId', organizationId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateOrganization', 'body', body)
            const localVarPath = `/orgs/{organizationId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {PaymentGateWayDto} paymentGateWayDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentGateway: async (organizationId: string, paymentGateWayDto: PaymentGateWayDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('updatePaymentGateway', 'organizationId', organizationId)
            // verify required parameter 'paymentGateWayDto' is not null or undefined
            assertParamExists('updatePaymentGateway', 'paymentGateWayDto', paymentGateWayDto)
            const localVarPath = `/orgs/{organizationId}/paymentGateway`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentGateWayDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrgsApi - functional programming interface
 * @export
 */
export const OrgsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrgsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNotification(organizationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNotification(organizationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {PaymentGateWayDto} paymentGateWayDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPaymentGateway(organizationId: string, paymentGateWayDto: PaymentGateWayDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPaymentGateway(organizationId, paymentGateWayDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAboutUs(organizationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAboutUs(organizationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {AppearancenDto} appearancenDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAppearance(organizationId: string, appearancenDto: AppearancenDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAppearance(organizationId, appearancenDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBlog(organizationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBlog(organizationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary create contactUs
         * @param {string} organizationId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createContactUs(organizationId: string, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createContactUs(organizationId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFaq(body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFaq(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLandingPage(organizationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLandingPage(organizationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNotificationSettings(body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNotificationSettings(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update aboutUs
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editAboutUs(organizationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editAboutUs(organizationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update blog
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editBlog(organizationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editBlog(organizationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update contactUs
         * @param {string} organizationId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editContactUs(organizationId: string, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editContactUs(organizationId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update landingPage
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editLandingPage(organizationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editLandingPage(organizationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAboutUs(organizationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAboutUs(organizationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all organization overview (superadmin)
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllOrgAdmin(page?: number, limit?: number, sort?: string, sortingField?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllOrgAdmin(page, limit, sort, sortingField, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppearance(organizationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAppearance(organizationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBlog(organizationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBlog(organizationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContactUs(organizationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContactUs(organizationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDonorList(organizationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDonorList(organizationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDonorsList(page?: number, limit?: number, sort?: string, sortingField?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDonorsList(page, limit, sort, sortingField, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFaqList(organizationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFaqList(organizationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {string} period 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInsightSummary(organizationId: string, period: string, startDate: string, endDate: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInsightSummary(organizationId, period, startDate, endDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {string} donorId 
         * @param {string} period 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInsightSummaryDonorId(organizationId: string, donorId: string, period: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInsightSummaryDonorId(organizationId, donorId, period, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLandingPage(organizationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLandingPage(organizationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNotificationList(organizationId: string, type: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNotificationList(organizationId, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNotificationSettings(organizationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNotificationSettings(organizationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganization(organizationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganization(organizationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaymentGatewayList(organizationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPaymentGatewayList(organizationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {AppearancenDto} appearancenDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAppearance(organizationId: string, appearancenDto: AppearancenDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAppearance(organizationId, appearancenDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} faqId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFaq(faqId: string, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFaq(faqId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateNotificationSettings(organizationId: string, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateNotificationSettings(organizationId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrganization(organizationId: string, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrganization(organizationId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {PaymentGateWayDto} paymentGateWayDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePaymentGateway(organizationId: string, paymentGateWayDto: PaymentGateWayDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePaymentGateway(organizationId, paymentGateWayDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrgsApi - factory interface
 * @export
 */
export const OrgsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrgsApiFp(configuration)
    return {
        /**
         * 
         * @param {OrgsApiAddNotificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNotification(requestParameters: OrgsApiAddNotificationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addNotification(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrgsApiAddPaymentGatewayRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPaymentGateway(requestParameters: OrgsApiAddPaymentGatewayRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addPaymentGateway(requestParameters.organizationId, requestParameters.paymentGateWayDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrgsApiCreateAboutUsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAboutUs(requestParameters: OrgsApiCreateAboutUsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createAboutUs(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrgsApiCreateAppearanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAppearance(requestParameters: OrgsApiCreateAppearanceRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createAppearance(requestParameters.organizationId, requestParameters.appearancenDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrgsApiCreateBlogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBlog(requestParameters: OrgsApiCreateBlogRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createBlog(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create contactUs
         * @param {OrgsApiCreateContactUsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContactUs(requestParameters: OrgsApiCreateContactUsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createContactUs(requestParameters.organizationId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrgsApiCreateFaqRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFaq(requestParameters: OrgsApiCreateFaqRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createFaq(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrgsApiCreateLandingPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLandingPage(requestParameters: OrgsApiCreateLandingPageRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createLandingPage(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrgsApiCreateNotificationSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNotificationSettings(requestParameters: OrgsApiCreateNotificationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createNotificationSettings(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update aboutUs
         * @param {OrgsApiEditAboutUsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editAboutUs(requestParameters: OrgsApiEditAboutUsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.editAboutUs(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update blog
         * @param {OrgsApiEditBlogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editBlog(requestParameters: OrgsApiEditBlogRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.editBlog(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update contactUs
         * @param {OrgsApiEditContactUsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editContactUs(requestParameters: OrgsApiEditContactUsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.editContactUs(requestParameters.organizationId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update landingPage
         * @param {OrgsApiEditLandingPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editLandingPage(requestParameters: OrgsApiEditLandingPageRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.editLandingPage(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.findAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrgsApiGetAboutUsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAboutUs(requestParameters: OrgsApiGetAboutUsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAboutUs(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all organization overview (superadmin)
         * @param {OrgsApiGetAllOrgAdminRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOrgAdmin(requestParameters: OrgsApiGetAllOrgAdminRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAllOrgAdmin(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrgsApiGetAppearanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppearance(requestParameters: OrgsApiGetAppearanceRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAppearance(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrgsApiGetBlogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlog(requestParameters: OrgsApiGetBlogRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getBlog(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrgsApiGetContactUsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContactUs(requestParameters: OrgsApiGetContactUsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getContactUs(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrgsApiGetDonorListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDonorList(requestParameters: OrgsApiGetDonorListRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getDonorList(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrgsApiGetDonorsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDonorsList(requestParameters: OrgsApiGetDonorsListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getDonorsList(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrgsApiGetFaqListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFaqList(requestParameters: OrgsApiGetFaqListRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getFaqList(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrgsApiGetInsightSummaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInsightSummary(requestParameters: OrgsApiGetInsightSummaryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getInsightSummary(requestParameters.organizationId, requestParameters.period, requestParameters.startDate, requestParameters.endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrgsApiGetInsightSummaryDonorIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInsightSummaryDonorId(requestParameters: OrgsApiGetInsightSummaryDonorIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getInsightSummaryDonorId(requestParameters.organizationId, requestParameters.donorId, requestParameters.period, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrgsApiGetLandingPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLandingPage(requestParameters: OrgsApiGetLandingPageRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getLandingPage(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrgsApiGetNotificationListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationList(requestParameters: OrgsApiGetNotificationListRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getNotificationList(requestParameters.organizationId, requestParameters.type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrgsApiGetNotificationSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationSettings(requestParameters: OrgsApiGetNotificationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getNotificationSettings(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrgsApiGetOrganizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization(requestParameters: OrgsApiGetOrganizationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getOrganization(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrgsApiGetPaymentGatewayListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentGatewayList(requestParameters: OrgsApiGetPaymentGatewayListRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getPaymentGatewayList(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrgsApiUpdateAppearanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAppearance(requestParameters: OrgsApiUpdateAppearanceRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateAppearance(requestParameters.organizationId, requestParameters.appearancenDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrgsApiUpdateFaqRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFaq(requestParameters: OrgsApiUpdateFaqRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateFaq(requestParameters.faqId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrgsApiUpdateNotificationSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNotificationSettings(requestParameters: OrgsApiUpdateNotificationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateNotificationSettings(requestParameters.organizationId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrgsApiUpdateOrganizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganization(requestParameters: OrgsApiUpdateOrganizationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateOrganization(requestParameters.organizationId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrgsApiUpdatePaymentGatewayRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentGateway(requestParameters: OrgsApiUpdatePaymentGatewayRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatePaymentGateway(requestParameters.organizationId, requestParameters.paymentGateWayDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNotification operation in OrgsApi.
 * @export
 * @interface OrgsApiAddNotificationRequest
 */
export interface OrgsApiAddNotificationRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgsApiAddNotification
     */
    readonly organizationId: string
}

/**
 * Request parameters for addPaymentGateway operation in OrgsApi.
 * @export
 * @interface OrgsApiAddPaymentGatewayRequest
 */
export interface OrgsApiAddPaymentGatewayRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgsApiAddPaymentGateway
     */
    readonly organizationId: string

    /**
     * 
     * @type {PaymentGateWayDto}
     * @memberof OrgsApiAddPaymentGateway
     */
    readonly paymentGateWayDto: PaymentGateWayDto
}

/**
 * Request parameters for createAboutUs operation in OrgsApi.
 * @export
 * @interface OrgsApiCreateAboutUsRequest
 */
export interface OrgsApiCreateAboutUsRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgsApiCreateAboutUs
     */
    readonly organizationId: string
}

/**
 * Request parameters for createAppearance operation in OrgsApi.
 * @export
 * @interface OrgsApiCreateAppearanceRequest
 */
export interface OrgsApiCreateAppearanceRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgsApiCreateAppearance
     */
    readonly organizationId: string

    /**
     * 
     * @type {AppearancenDto}
     * @memberof OrgsApiCreateAppearance
     */
    readonly appearancenDto: AppearancenDto
}

/**
 * Request parameters for createBlog operation in OrgsApi.
 * @export
 * @interface OrgsApiCreateBlogRequest
 */
export interface OrgsApiCreateBlogRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgsApiCreateBlog
     */
    readonly organizationId: string
}

/**
 * Request parameters for createContactUs operation in OrgsApi.
 * @export
 * @interface OrgsApiCreateContactUsRequest
 */
export interface OrgsApiCreateContactUsRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgsApiCreateContactUs
     */
    readonly organizationId: string

    /**
     * 
     * @type {object}
     * @memberof OrgsApiCreateContactUs
     */
    readonly body: object
}

/**
 * Request parameters for createFaq operation in OrgsApi.
 * @export
 * @interface OrgsApiCreateFaqRequest
 */
export interface OrgsApiCreateFaqRequest {
    /**
     * 
     * @type {object}
     * @memberof OrgsApiCreateFaq
     */
    readonly body: object
}

/**
 * Request parameters for createLandingPage operation in OrgsApi.
 * @export
 * @interface OrgsApiCreateLandingPageRequest
 */
export interface OrgsApiCreateLandingPageRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgsApiCreateLandingPage
     */
    readonly organizationId: string
}

/**
 * Request parameters for createNotificationSettings operation in OrgsApi.
 * @export
 * @interface OrgsApiCreateNotificationSettingsRequest
 */
export interface OrgsApiCreateNotificationSettingsRequest {
    /**
     * 
     * @type {object}
     * @memberof OrgsApiCreateNotificationSettings
     */
    readonly body: object
}

/**
 * Request parameters for editAboutUs operation in OrgsApi.
 * @export
 * @interface OrgsApiEditAboutUsRequest
 */
export interface OrgsApiEditAboutUsRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgsApiEditAboutUs
     */
    readonly organizationId: string
}

/**
 * Request parameters for editBlog operation in OrgsApi.
 * @export
 * @interface OrgsApiEditBlogRequest
 */
export interface OrgsApiEditBlogRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgsApiEditBlog
     */
    readonly organizationId: string
}

/**
 * Request parameters for editContactUs operation in OrgsApi.
 * @export
 * @interface OrgsApiEditContactUsRequest
 */
export interface OrgsApiEditContactUsRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgsApiEditContactUs
     */
    readonly organizationId: string

    /**
     * 
     * @type {object}
     * @memberof OrgsApiEditContactUs
     */
    readonly body: object
}

/**
 * Request parameters for editLandingPage operation in OrgsApi.
 * @export
 * @interface OrgsApiEditLandingPageRequest
 */
export interface OrgsApiEditLandingPageRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgsApiEditLandingPage
     */
    readonly organizationId: string
}

/**
 * Request parameters for getAboutUs operation in OrgsApi.
 * @export
 * @interface OrgsApiGetAboutUsRequest
 */
export interface OrgsApiGetAboutUsRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgsApiGetAboutUs
     */
    readonly organizationId: string
}

/**
 * Request parameters for getAllOrgAdmin operation in OrgsApi.
 * @export
 * @interface OrgsApiGetAllOrgAdminRequest
 */
export interface OrgsApiGetAllOrgAdminRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgsApiGetAllOrgAdmin
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof OrgsApiGetAllOrgAdmin
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof OrgsApiGetAllOrgAdmin
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof OrgsApiGetAllOrgAdmin
     */
    readonly sortingField?: string
}

/**
 * Request parameters for getAppearance operation in OrgsApi.
 * @export
 * @interface OrgsApiGetAppearanceRequest
 */
export interface OrgsApiGetAppearanceRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgsApiGetAppearance
     */
    readonly organizationId: string
}

/**
 * Request parameters for getBlog operation in OrgsApi.
 * @export
 * @interface OrgsApiGetBlogRequest
 */
export interface OrgsApiGetBlogRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgsApiGetBlog
     */
    readonly organizationId: string
}

/**
 * Request parameters for getContactUs operation in OrgsApi.
 * @export
 * @interface OrgsApiGetContactUsRequest
 */
export interface OrgsApiGetContactUsRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgsApiGetContactUs
     */
    readonly organizationId: string
}

/**
 * Request parameters for getDonorList operation in OrgsApi.
 * @export
 * @interface OrgsApiGetDonorListRequest
 */
export interface OrgsApiGetDonorListRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgsApiGetDonorList
     */
    readonly organizationId: string
}

/**
 * Request parameters for getDonorsList operation in OrgsApi.
 * @export
 * @interface OrgsApiGetDonorsListRequest
 */
export interface OrgsApiGetDonorsListRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgsApiGetDonorsList
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof OrgsApiGetDonorsList
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof OrgsApiGetDonorsList
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof OrgsApiGetDonorsList
     */
    readonly sortingField?: string
}

/**
 * Request parameters for getFaqList operation in OrgsApi.
 * @export
 * @interface OrgsApiGetFaqListRequest
 */
export interface OrgsApiGetFaqListRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgsApiGetFaqList
     */
    readonly organizationId: string
}

/**
 * Request parameters for getInsightSummary operation in OrgsApi.
 * @export
 * @interface OrgsApiGetInsightSummaryRequest
 */
export interface OrgsApiGetInsightSummaryRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgsApiGetInsightSummary
     */
    readonly organizationId: string

    /**
     * 
     * @type {string}
     * @memberof OrgsApiGetInsightSummary
     */
    readonly period: string

    /**
     * 
     * @type {string}
     * @memberof OrgsApiGetInsightSummary
     */
    readonly startDate: string

    /**
     * 
     * @type {string}
     * @memberof OrgsApiGetInsightSummary
     */
    readonly endDate: string
}

/**
 * Request parameters for getInsightSummaryDonorId operation in OrgsApi.
 * @export
 * @interface OrgsApiGetInsightSummaryDonorIdRequest
 */
export interface OrgsApiGetInsightSummaryDonorIdRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgsApiGetInsightSummaryDonorId
     */
    readonly organizationId: string

    /**
     * 
     * @type {string}
     * @memberof OrgsApiGetInsightSummaryDonorId
     */
    readonly donorId: string

    /**
     * 
     * @type {string}
     * @memberof OrgsApiGetInsightSummaryDonorId
     */
    readonly period: string
}

/**
 * Request parameters for getLandingPage operation in OrgsApi.
 * @export
 * @interface OrgsApiGetLandingPageRequest
 */
export interface OrgsApiGetLandingPageRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgsApiGetLandingPage
     */
    readonly organizationId: string
}

/**
 * Request parameters for getNotificationList operation in OrgsApi.
 * @export
 * @interface OrgsApiGetNotificationListRequest
 */
export interface OrgsApiGetNotificationListRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgsApiGetNotificationList
     */
    readonly organizationId: string

    /**
     * 
     * @type {string}
     * @memberof OrgsApiGetNotificationList
     */
    readonly type: string
}

/**
 * Request parameters for getNotificationSettings operation in OrgsApi.
 * @export
 * @interface OrgsApiGetNotificationSettingsRequest
 */
export interface OrgsApiGetNotificationSettingsRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgsApiGetNotificationSettings
     */
    readonly organizationId: string
}

/**
 * Request parameters for getOrganization operation in OrgsApi.
 * @export
 * @interface OrgsApiGetOrganizationRequest
 */
export interface OrgsApiGetOrganizationRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgsApiGetOrganization
     */
    readonly organizationId: string
}

/**
 * Request parameters for getPaymentGatewayList operation in OrgsApi.
 * @export
 * @interface OrgsApiGetPaymentGatewayListRequest
 */
export interface OrgsApiGetPaymentGatewayListRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgsApiGetPaymentGatewayList
     */
    readonly organizationId: string
}

/**
 * Request parameters for updateAppearance operation in OrgsApi.
 * @export
 * @interface OrgsApiUpdateAppearanceRequest
 */
export interface OrgsApiUpdateAppearanceRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgsApiUpdateAppearance
     */
    readonly organizationId: string

    /**
     * 
     * @type {AppearancenDto}
     * @memberof OrgsApiUpdateAppearance
     */
    readonly appearancenDto: AppearancenDto
}

/**
 * Request parameters for updateFaq operation in OrgsApi.
 * @export
 * @interface OrgsApiUpdateFaqRequest
 */
export interface OrgsApiUpdateFaqRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgsApiUpdateFaq
     */
    readonly faqId: string

    /**
     * 
     * @type {object}
     * @memberof OrgsApiUpdateFaq
     */
    readonly body: object
}

/**
 * Request parameters for updateNotificationSettings operation in OrgsApi.
 * @export
 * @interface OrgsApiUpdateNotificationSettingsRequest
 */
export interface OrgsApiUpdateNotificationSettingsRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgsApiUpdateNotificationSettings
     */
    readonly organizationId: string

    /**
     * 
     * @type {object}
     * @memberof OrgsApiUpdateNotificationSettings
     */
    readonly body: object
}

/**
 * Request parameters for updateOrganization operation in OrgsApi.
 * @export
 * @interface OrgsApiUpdateOrganizationRequest
 */
export interface OrgsApiUpdateOrganizationRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgsApiUpdateOrganization
     */
    readonly organizationId: string

    /**
     * 
     * @type {object}
     * @memberof OrgsApiUpdateOrganization
     */
    readonly body: object
}

/**
 * Request parameters for updatePaymentGateway operation in OrgsApi.
 * @export
 * @interface OrgsApiUpdatePaymentGatewayRequest
 */
export interface OrgsApiUpdatePaymentGatewayRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgsApiUpdatePaymentGateway
     */
    readonly organizationId: string

    /**
     * 
     * @type {PaymentGateWayDto}
     * @memberof OrgsApiUpdatePaymentGateway
     */
    readonly paymentGateWayDto: PaymentGateWayDto
}

/**
 * OrgsApi - object-oriented interface
 * @export
 * @class OrgsApi
 * @extends {BaseAPI}
 */
export class OrgsApi extends BaseAPI {
    /**
     * 
     * @param {OrgsApiAddNotificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public addNotification(requestParameters: OrgsApiAddNotificationRequest, options?: AxiosRequestConfig) {
        return OrgsApiFp(this.configuration).addNotification(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrgsApiAddPaymentGatewayRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public addPaymentGateway(requestParameters: OrgsApiAddPaymentGatewayRequest, options?: AxiosRequestConfig) {
        return OrgsApiFp(this.configuration).addPaymentGateway(requestParameters.organizationId, requestParameters.paymentGateWayDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrgsApiCreateAboutUsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public createAboutUs(requestParameters: OrgsApiCreateAboutUsRequest, options?: AxiosRequestConfig) {
        return OrgsApiFp(this.configuration).createAboutUs(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrgsApiCreateAppearanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public createAppearance(requestParameters: OrgsApiCreateAppearanceRequest, options?: AxiosRequestConfig) {
        return OrgsApiFp(this.configuration).createAppearance(requestParameters.organizationId, requestParameters.appearancenDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrgsApiCreateBlogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public createBlog(requestParameters: OrgsApiCreateBlogRequest, options?: AxiosRequestConfig) {
        return OrgsApiFp(this.configuration).createBlog(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create contactUs
     * @param {OrgsApiCreateContactUsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public createContactUs(requestParameters: OrgsApiCreateContactUsRequest, options?: AxiosRequestConfig) {
        return OrgsApiFp(this.configuration).createContactUs(requestParameters.organizationId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrgsApiCreateFaqRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public createFaq(requestParameters: OrgsApiCreateFaqRequest, options?: AxiosRequestConfig) {
        return OrgsApiFp(this.configuration).createFaq(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrgsApiCreateLandingPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public createLandingPage(requestParameters: OrgsApiCreateLandingPageRequest, options?: AxiosRequestConfig) {
        return OrgsApiFp(this.configuration).createLandingPage(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrgsApiCreateNotificationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public createNotificationSettings(requestParameters: OrgsApiCreateNotificationSettingsRequest, options?: AxiosRequestConfig) {
        return OrgsApiFp(this.configuration).createNotificationSettings(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update aboutUs
     * @param {OrgsApiEditAboutUsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public editAboutUs(requestParameters: OrgsApiEditAboutUsRequest, options?: AxiosRequestConfig) {
        return OrgsApiFp(this.configuration).editAboutUs(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update blog
     * @param {OrgsApiEditBlogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public editBlog(requestParameters: OrgsApiEditBlogRequest, options?: AxiosRequestConfig) {
        return OrgsApiFp(this.configuration).editBlog(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update contactUs
     * @param {OrgsApiEditContactUsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public editContactUs(requestParameters: OrgsApiEditContactUsRequest, options?: AxiosRequestConfig) {
        return OrgsApiFp(this.configuration).editContactUs(requestParameters.organizationId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update landingPage
     * @param {OrgsApiEditLandingPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public editLandingPage(requestParameters: OrgsApiEditLandingPageRequest, options?: AxiosRequestConfig) {
        return OrgsApiFp(this.configuration).editLandingPage(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public findAll(options?: AxiosRequestConfig) {
        return OrgsApiFp(this.configuration).findAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrgsApiGetAboutUsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public getAboutUs(requestParameters: OrgsApiGetAboutUsRequest, options?: AxiosRequestConfig) {
        return OrgsApiFp(this.configuration).getAboutUs(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all organization overview (superadmin)
     * @param {OrgsApiGetAllOrgAdminRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public getAllOrgAdmin(requestParameters: OrgsApiGetAllOrgAdminRequest = {}, options?: AxiosRequestConfig) {
        return OrgsApiFp(this.configuration).getAllOrgAdmin(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrgsApiGetAppearanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public getAppearance(requestParameters: OrgsApiGetAppearanceRequest, options?: AxiosRequestConfig) {
        return OrgsApiFp(this.configuration).getAppearance(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrgsApiGetBlogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public getBlog(requestParameters: OrgsApiGetBlogRequest, options?: AxiosRequestConfig) {
        return OrgsApiFp(this.configuration).getBlog(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrgsApiGetContactUsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public getContactUs(requestParameters: OrgsApiGetContactUsRequest, options?: AxiosRequestConfig) {
        return OrgsApiFp(this.configuration).getContactUs(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrgsApiGetDonorListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public getDonorList(requestParameters: OrgsApiGetDonorListRequest, options?: AxiosRequestConfig) {
        return OrgsApiFp(this.configuration).getDonorList(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrgsApiGetDonorsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public getDonorsList(requestParameters: OrgsApiGetDonorsListRequest = {}, options?: AxiosRequestConfig) {
        return OrgsApiFp(this.configuration).getDonorsList(requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrgsApiGetFaqListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public getFaqList(requestParameters: OrgsApiGetFaqListRequest, options?: AxiosRequestConfig) {
        return OrgsApiFp(this.configuration).getFaqList(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrgsApiGetInsightSummaryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public getInsightSummary(requestParameters: OrgsApiGetInsightSummaryRequest, options?: AxiosRequestConfig) {
        return OrgsApiFp(this.configuration).getInsightSummary(requestParameters.organizationId, requestParameters.period, requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrgsApiGetInsightSummaryDonorIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public getInsightSummaryDonorId(requestParameters: OrgsApiGetInsightSummaryDonorIdRequest, options?: AxiosRequestConfig) {
        return OrgsApiFp(this.configuration).getInsightSummaryDonorId(requestParameters.organizationId, requestParameters.donorId, requestParameters.period, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrgsApiGetLandingPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public getLandingPage(requestParameters: OrgsApiGetLandingPageRequest, options?: AxiosRequestConfig) {
        return OrgsApiFp(this.configuration).getLandingPage(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrgsApiGetNotificationListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public getNotificationList(requestParameters: OrgsApiGetNotificationListRequest, options?: AxiosRequestConfig) {
        return OrgsApiFp(this.configuration).getNotificationList(requestParameters.organizationId, requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrgsApiGetNotificationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public getNotificationSettings(requestParameters: OrgsApiGetNotificationSettingsRequest, options?: AxiosRequestConfig) {
        return OrgsApiFp(this.configuration).getNotificationSettings(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrgsApiGetOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public getOrganization(requestParameters: OrgsApiGetOrganizationRequest, options?: AxiosRequestConfig) {
        return OrgsApiFp(this.configuration).getOrganization(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrgsApiGetPaymentGatewayListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public getPaymentGatewayList(requestParameters: OrgsApiGetPaymentGatewayListRequest, options?: AxiosRequestConfig) {
        return OrgsApiFp(this.configuration).getPaymentGatewayList(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrgsApiUpdateAppearanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public updateAppearance(requestParameters: OrgsApiUpdateAppearanceRequest, options?: AxiosRequestConfig) {
        return OrgsApiFp(this.configuration).updateAppearance(requestParameters.organizationId, requestParameters.appearancenDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrgsApiUpdateFaqRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public updateFaq(requestParameters: OrgsApiUpdateFaqRequest, options?: AxiosRequestConfig) {
        return OrgsApiFp(this.configuration).updateFaq(requestParameters.faqId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrgsApiUpdateNotificationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public updateNotificationSettings(requestParameters: OrgsApiUpdateNotificationSettingsRequest, options?: AxiosRequestConfig) {
        return OrgsApiFp(this.configuration).updateNotificationSettings(requestParameters.organizationId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrgsApiUpdateOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public updateOrganization(requestParameters: OrgsApiUpdateOrganizationRequest, options?: AxiosRequestConfig) {
        return OrgsApiFp(this.configuration).updateOrganization(requestParameters.organizationId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrgsApiUpdatePaymentGatewayRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgsApi
     */
    public updatePaymentGateway(requestParameters: OrgsApiUpdatePaymentGatewayRequest, options?: AxiosRequestConfig) {
        return OrgsApiFp(this.configuration).updatePaymentGateway(requestParameters.organizationId, requestParameters.paymentGateWayDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProjectApi - axios parameter creator
 * @export
 */
export const ProjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Approve project
         * @param {ProjectStatusUpdateDto} projectStatusUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveProject: async (projectStatusUpdateDto: ProjectStatusUpdateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectStatusUpdateDto' is not null or undefined
            assertParamExists('approveProject', 'projectStatusUpdateDto', projectStatusUpdateDto)
            const localVarPath = `/project/approve`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projectStatusUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Project
         * @param {ProjectCreateDto} projectCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject: async (projectCreateDto: ProjectCreateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectCreateDto' is not null or undefined
            assertParamExists('createProject', 'projectCreateDto', projectCreateDto)
            const localVarPath = `/project/createProject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projectCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary permanent delete project!
         * @param {string} organizationId 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProject: async (organizationId: string, projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('deleteProject', 'organizationId', organizationId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deleteProject', 'projectId', projectId)
            const localVarPath = `/project/deleteProject/{organizationId}/{projectId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Projects viewed by manager
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProjects: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/project/manager/getListAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Projects viewed by operator
         * @param {string} operatorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProjectsByOperatorId: async (operatorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'operatorId' is not null or undefined
            assertParamExists('getAllProjectsByOperatorId', 'operatorId', operatorId)
            const localVarPath = `/project/manager/operator/{operatorId}/getListAll`
                .replace(`{${"operatorId"}}`, encodeURIComponent(String(operatorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Projects viewed by donor
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProjectsForDonors: async (organizationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getAllProjectsForDonors', 'organizationId', organizationId)
            const localVarPath = `/project/donor/organization/{organizationId}/getAllPublished`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of my projects
         * @param {string} organizationId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [createdBy] 
         * @param {string} [updatedBy] 
         * @param {string} [appliedBy] 
         * @param {string} [operatorUserId] 
         * @param {number} [maxDiameterSize] 
         * @param {number} [minDiameterSize] 
         * @param {number} [toiletSize] 
         * @param {number} [prayerMinCapacity] 
         * @param {number} [prayerMaxCapacity] 
         * @param {string} [hasAc] 
         * @param {string} [hasClassroom] 
         * @param {string} [hasGreenSpace] 
         * @param {string} [hasFemaleSection] 
         * @param {string} [hasParking] 
         * @param {string} [isDeleted] 
         * @param {string} [isPublished] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyProjects: async (organizationId: string, page?: number, limit?: number, sort?: string, sortingField?: string, createdBy?: string, updatedBy?: string, appliedBy?: string, operatorUserId?: string, maxDiameterSize?: number, minDiameterSize?: number, toiletSize?: number, prayerMinCapacity?: number, prayerMaxCapacity?: number, hasAc?: string, hasClassroom?: string, hasGreenSpace?: string, hasFemaleSection?: string, hasParking?: string, isDeleted?: string, isPublished?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getMyProjects', 'organizationId', organizationId)
            const localVarPath = `/project/getMyProjects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (organizationId !== undefined) {
                localVarQueryParameter['organizationId'] = organizationId;
            }

            if (createdBy !== undefined) {
                localVarQueryParameter['createdBy'] = createdBy;
            }

            if (updatedBy !== undefined) {
                localVarQueryParameter['updatedBy'] = updatedBy;
            }

            if (appliedBy !== undefined) {
                localVarQueryParameter['appliedBy'] = appliedBy;
            }

            if (operatorUserId !== undefined) {
                localVarQueryParameter['operatorUserId'] = operatorUserId;
            }

            if (maxDiameterSize !== undefined) {
                localVarQueryParameter['maxDiameterSize'] = maxDiameterSize;
            }

            if (minDiameterSize !== undefined) {
                localVarQueryParameter['minDiameterSize'] = minDiameterSize;
            }

            if (toiletSize !== undefined) {
                localVarQueryParameter['toiletSize'] = toiletSize;
            }

            if (prayerMinCapacity !== undefined) {
                localVarQueryParameter['prayerMinCapacity'] = prayerMinCapacity;
            }

            if (prayerMaxCapacity !== undefined) {
                localVarQueryParameter['prayerMaxCapacity'] = prayerMaxCapacity;
            }

            if (hasAc !== undefined) {
                localVarQueryParameter['hasAc'] = hasAc;
            }

            if (hasClassroom !== undefined) {
                localVarQueryParameter['hasClassroom'] = hasClassroom;
            }

            if (hasGreenSpace !== undefined) {
                localVarQueryParameter['hasGreenSpace'] = hasGreenSpace;
            }

            if (hasFemaleSection !== undefined) {
                localVarQueryParameter['hasFemaleSection'] = hasFemaleSection;
            }

            if (hasParking !== undefined) {
                localVarQueryParameter['hasParking'] = hasParking;
            }

            if (isDeleted !== undefined) {
                localVarQueryParameter['isDeleted'] = isDeleted;
            }

            if (isPublished !== undefined) {
                localVarQueryParameter['isPublished'] = isPublished;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a project detail by projectId
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectDetailById: async (projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectDetailById', 'projectId', projectId)
            const localVarPath = `/project/detail/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Projects viewed by manager
         * @param {string} organizationId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [createdBy] 
         * @param {string} [updatedBy] 
         * @param {string} [appliedBy] 
         * @param {string} [operatorUserId] 
         * @param {number} [maxDiameterSize] 
         * @param {number} [minDiameterSize] 
         * @param {number} [toiletSize] 
         * @param {number} [prayerMinCapacity] 
         * @param {number} [prayerMaxCapacity] 
         * @param {string} [hasAc] 
         * @param {string} [hasClassroom] 
         * @param {string} [hasGreenSpace] 
         * @param {string} [hasFemaleSection] 
         * @param {string} [hasParking] 
         * @param {string} [isDeleted] 
         * @param {string} [isPublished] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectList: async (organizationId: string, page?: number, limit?: number, sort?: string, sortingField?: string, createdBy?: string, updatedBy?: string, appliedBy?: string, operatorUserId?: string, maxDiameterSize?: number, minDiameterSize?: number, toiletSize?: number, prayerMinCapacity?: number, prayerMaxCapacity?: number, hasAc?: string, hasClassroom?: string, hasGreenSpace?: string, hasFemaleSection?: string, hasParking?: string, isDeleted?: string, isPublished?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getProjectList', 'organizationId', organizationId)
            const localVarPath = `/project/manager/getProjectList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortingField !== undefined) {
                localVarQueryParameter['sorting_field'] = sortingField;
            }

            if (organizationId !== undefined) {
                localVarQueryParameter['organizationId'] = organizationId;
            }

            if (createdBy !== undefined) {
                localVarQueryParameter['createdBy'] = createdBy;
            }

            if (updatedBy !== undefined) {
                localVarQueryParameter['updatedBy'] = updatedBy;
            }

            if (appliedBy !== undefined) {
                localVarQueryParameter['appliedBy'] = appliedBy;
            }

            if (operatorUserId !== undefined) {
                localVarQueryParameter['operatorUserId'] = operatorUserId;
            }

            if (maxDiameterSize !== undefined) {
                localVarQueryParameter['maxDiameterSize'] = maxDiameterSize;
            }

            if (minDiameterSize !== undefined) {
                localVarQueryParameter['minDiameterSize'] = minDiameterSize;
            }

            if (toiletSize !== undefined) {
                localVarQueryParameter['toiletSize'] = toiletSize;
            }

            if (prayerMinCapacity !== undefined) {
                localVarQueryParameter['prayerMinCapacity'] = prayerMinCapacity;
            }

            if (prayerMaxCapacity !== undefined) {
                localVarQueryParameter['prayerMaxCapacity'] = prayerMaxCapacity;
            }

            if (hasAc !== undefined) {
                localVarQueryParameter['hasAc'] = hasAc;
            }

            if (hasClassroom !== undefined) {
                localVarQueryParameter['hasClassroom'] = hasClassroom;
            }

            if (hasGreenSpace !== undefined) {
                localVarQueryParameter['hasGreenSpace'] = hasGreenSpace;
            }

            if (hasFemaleSection !== undefined) {
                localVarQueryParameter['hasFemaleSection'] = hasFemaleSection;
            }

            if (hasParking !== undefined) {
                localVarQueryParameter['hasParking'] = hasParking;
            }

            if (isDeleted !== undefined) {
                localVarQueryParameter['isDeleted'] = isDeleted;
            }

            if (isPublished !== undefined) {
                localVarQueryParameter['isPublished'] = isPublished;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Approve project
         * @param {ProjectStatusUpdateDto} projectStatusUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectProject: async (projectStatusUpdateDto: ProjectStatusUpdateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectStatusUpdateDto' is not null or undefined
            assertParamExists('rejectProject', 'projectStatusUpdateDto', projectStatusUpdateDto)
            const localVarPath = `/project/reject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projectStatusUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary set flag to delete campaign
         * @param {ProjectSetDeletedFlagDto} projectSetDeletedFlagDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDeletedFlag: async (projectSetDeletedFlagDto: ProjectSetDeletedFlagDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSetDeletedFlagDto' is not null or undefined
            assertParamExists('setDeletedFlag', 'projectSetDeletedFlagDto', projectSetDeletedFlagDto)
            const localVarPath = `/project/setDeletedFlagBatch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projectSetDeletedFlagDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update project
         * @param {string} projectId 
         * @param {ProjectUpdateDto} projectUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProject: async (projectId: string, projectUpdateDto: ProjectUpdateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updateProject', 'projectId', projectId)
            // verify required parameter 'projectUpdateDto' is not null or undefined
            assertParamExists('updateProject', 'projectUpdateDto', projectUpdateDto)
            const localVarPath = `/project/updateProject/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projectUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectApi - functional programming interface
 * @export
 */
export const ProjectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Approve project
         * @param {ProjectStatusUpdateDto} projectStatusUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approveProject(projectStatusUpdateDto: ProjectStatusUpdateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.approveProject(projectStatusUpdateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Project
         * @param {ProjectCreateDto} projectCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProject(projectCreateDto: ProjectCreateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProject(projectCreateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary permanent delete project!
         * @param {string} organizationId 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProject(organizationId: string, projectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProject(organizationId, projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get All Projects viewed by manager
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllProjects(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllProjects(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get All Projects viewed by operator
         * @param {string} operatorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllProjectsByOperatorId(operatorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllProjectsByOperatorId(operatorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get All Projects viewed by donor
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllProjectsForDonors(organizationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllProjectsForDonors(organizationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get list of my projects
         * @param {string} organizationId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [createdBy] 
         * @param {string} [updatedBy] 
         * @param {string} [appliedBy] 
         * @param {string} [operatorUserId] 
         * @param {number} [maxDiameterSize] 
         * @param {number} [minDiameterSize] 
         * @param {number} [toiletSize] 
         * @param {number} [prayerMinCapacity] 
         * @param {number} [prayerMaxCapacity] 
         * @param {string} [hasAc] 
         * @param {string} [hasClassroom] 
         * @param {string} [hasGreenSpace] 
         * @param {string} [hasFemaleSection] 
         * @param {string} [hasParking] 
         * @param {string} [isDeleted] 
         * @param {string} [isPublished] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyProjects(organizationId: string, page?: number, limit?: number, sort?: string, sortingField?: string, createdBy?: string, updatedBy?: string, appliedBy?: string, operatorUserId?: string, maxDiameterSize?: number, minDiameterSize?: number, toiletSize?: number, prayerMinCapacity?: number, prayerMaxCapacity?: number, hasAc?: string, hasClassroom?: string, hasGreenSpace?: string, hasFemaleSection?: string, hasParking?: string, isDeleted?: string, isPublished?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyProjects(organizationId, page, limit, sort, sortingField, createdBy, updatedBy, appliedBy, operatorUserId, maxDiameterSize, minDiameterSize, toiletSize, prayerMinCapacity, prayerMaxCapacity, hasAc, hasClassroom, hasGreenSpace, hasFemaleSection, hasParking, isDeleted, isPublished, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a project detail by projectId
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectDetailById(projectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectDetailById(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get All Projects viewed by manager
         * @param {string} organizationId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [sort] 
         * @param {string} [sortingField] 
         * @param {string} [createdBy] 
         * @param {string} [updatedBy] 
         * @param {string} [appliedBy] 
         * @param {string} [operatorUserId] 
         * @param {number} [maxDiameterSize] 
         * @param {number} [minDiameterSize] 
         * @param {number} [toiletSize] 
         * @param {number} [prayerMinCapacity] 
         * @param {number} [prayerMaxCapacity] 
         * @param {string} [hasAc] 
         * @param {string} [hasClassroom] 
         * @param {string} [hasGreenSpace] 
         * @param {string} [hasFemaleSection] 
         * @param {string} [hasParking] 
         * @param {string} [isDeleted] 
         * @param {string} [isPublished] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectList(organizationId: string, page?: number, limit?: number, sort?: string, sortingField?: string, createdBy?: string, updatedBy?: string, appliedBy?: string, operatorUserId?: string, maxDiameterSize?: number, minDiameterSize?: number, toiletSize?: number, prayerMinCapacity?: number, prayerMaxCapacity?: number, hasAc?: string, hasClassroom?: string, hasGreenSpace?: string, hasFemaleSection?: string, hasParking?: string, isDeleted?: string, isPublished?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectList(organizationId, page, limit, sort, sortingField, createdBy, updatedBy, appliedBy, operatorUserId, maxDiameterSize, minDiameterSize, toiletSize, prayerMinCapacity, prayerMaxCapacity, hasAc, hasClassroom, hasGreenSpace, hasFemaleSection, hasParking, isDeleted, isPublished, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Approve project
         * @param {ProjectStatusUpdateDto} projectStatusUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rejectProject(projectStatusUpdateDto: ProjectStatusUpdateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rejectProject(projectStatusUpdateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary set flag to delete campaign
         * @param {ProjectSetDeletedFlagDto} projectSetDeletedFlagDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setDeletedFlag(projectSetDeletedFlagDto: ProjectSetDeletedFlagDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setDeletedFlag(projectSetDeletedFlagDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update project
         * @param {string} projectId 
         * @param {ProjectUpdateDto} projectUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProject(projectId: string, projectUpdateDto: ProjectUpdateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProject(projectId, projectUpdateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectApi - factory interface
 * @export
 */
export const ProjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectApiFp(configuration)
    return {
        /**
         * 
         * @summary Approve project
         * @param {ProjectApiApproveProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveProject(requestParameters: ProjectApiApproveProjectRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.approveProject(requestParameters.projectStatusUpdateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Project
         * @param {ProjectApiCreateProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject(requestParameters: ProjectApiCreateProjectRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createProject(requestParameters.projectCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary permanent delete project!
         * @param {ProjectApiDeleteProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProject(requestParameters: ProjectApiDeleteProjectRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteProject(requestParameters.organizationId, requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Projects viewed by manager
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProjects(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAllProjects(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Projects viewed by operator
         * @param {ProjectApiGetAllProjectsByOperatorIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProjectsByOperatorId(requestParameters: ProjectApiGetAllProjectsByOperatorIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAllProjectsByOperatorId(requestParameters.operatorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Projects viewed by donor
         * @param {ProjectApiGetAllProjectsForDonorsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProjectsForDonors(requestParameters: ProjectApiGetAllProjectsForDonorsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAllProjectsForDonors(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of my projects
         * @param {ProjectApiGetMyProjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyProjects(requestParameters: ProjectApiGetMyProjectsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getMyProjects(requestParameters.organizationId, requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.createdBy, requestParameters.updatedBy, requestParameters.appliedBy, requestParameters.operatorUserId, requestParameters.maxDiameterSize, requestParameters.minDiameterSize, requestParameters.toiletSize, requestParameters.prayerMinCapacity, requestParameters.prayerMaxCapacity, requestParameters.hasAc, requestParameters.hasClassroom, requestParameters.hasGreenSpace, requestParameters.hasFemaleSection, requestParameters.hasParking, requestParameters.isDeleted, requestParameters.isPublished, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a project detail by projectId
         * @param {ProjectApiGetProjectDetailByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectDetailById(requestParameters: ProjectApiGetProjectDetailByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getProjectDetailById(requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Projects viewed by manager
         * @param {ProjectApiGetProjectListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectList(requestParameters: ProjectApiGetProjectListRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getProjectList(requestParameters.organizationId, requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.createdBy, requestParameters.updatedBy, requestParameters.appliedBy, requestParameters.operatorUserId, requestParameters.maxDiameterSize, requestParameters.minDiameterSize, requestParameters.toiletSize, requestParameters.prayerMinCapacity, requestParameters.prayerMaxCapacity, requestParameters.hasAc, requestParameters.hasClassroom, requestParameters.hasGreenSpace, requestParameters.hasFemaleSection, requestParameters.hasParking, requestParameters.isDeleted, requestParameters.isPublished, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Approve project
         * @param {ProjectApiRejectProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectProject(requestParameters: ProjectApiRejectProjectRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.rejectProject(requestParameters.projectStatusUpdateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary set flag to delete campaign
         * @param {ProjectApiSetDeletedFlagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDeletedFlag(requestParameters: ProjectApiSetDeletedFlagRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.setDeletedFlag(requestParameters.projectSetDeletedFlagDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update project
         * @param {ProjectApiUpdateProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProject(requestParameters: ProjectApiUpdateProjectRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateProject(requestParameters.projectId, requestParameters.projectUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for approveProject operation in ProjectApi.
 * @export
 * @interface ProjectApiApproveProjectRequest
 */
export interface ProjectApiApproveProjectRequest {
    /**
     * 
     * @type {ProjectStatusUpdateDto}
     * @memberof ProjectApiApproveProject
     */
    readonly projectStatusUpdateDto: ProjectStatusUpdateDto
}

/**
 * Request parameters for createProject operation in ProjectApi.
 * @export
 * @interface ProjectApiCreateProjectRequest
 */
export interface ProjectApiCreateProjectRequest {
    /**
     * 
     * @type {ProjectCreateDto}
     * @memberof ProjectApiCreateProject
     */
    readonly projectCreateDto: ProjectCreateDto
}

/**
 * Request parameters for deleteProject operation in ProjectApi.
 * @export
 * @interface ProjectApiDeleteProjectRequest
 */
export interface ProjectApiDeleteProjectRequest {
    /**
     * 
     * @type {string}
     * @memberof ProjectApiDeleteProject
     */
    readonly organizationId: string

    /**
     * 
     * @type {string}
     * @memberof ProjectApiDeleteProject
     */
    readonly projectId: string
}

/**
 * Request parameters for getAllProjectsByOperatorId operation in ProjectApi.
 * @export
 * @interface ProjectApiGetAllProjectsByOperatorIdRequest
 */
export interface ProjectApiGetAllProjectsByOperatorIdRequest {
    /**
     * 
     * @type {string}
     * @memberof ProjectApiGetAllProjectsByOperatorId
     */
    readonly operatorId: string
}

/**
 * Request parameters for getAllProjectsForDonors operation in ProjectApi.
 * @export
 * @interface ProjectApiGetAllProjectsForDonorsRequest
 */
export interface ProjectApiGetAllProjectsForDonorsRequest {
    /**
     * 
     * @type {string}
     * @memberof ProjectApiGetAllProjectsForDonors
     */
    readonly organizationId: string
}

/**
 * Request parameters for getMyProjects operation in ProjectApi.
 * @export
 * @interface ProjectApiGetMyProjectsRequest
 */
export interface ProjectApiGetMyProjectsRequest {
    /**
     * 
     * @type {string}
     * @memberof ProjectApiGetMyProjects
     */
    readonly organizationId: string

    /**
     * 
     * @type {number}
     * @memberof ProjectApiGetMyProjects
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ProjectApiGetMyProjects
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof ProjectApiGetMyProjects
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof ProjectApiGetMyProjects
     */
    readonly sortingField?: string

    /**
     * 
     * @type {string}
     * @memberof ProjectApiGetMyProjects
     */
    readonly createdBy?: string

    /**
     * 
     * @type {string}
     * @memberof ProjectApiGetMyProjects
     */
    readonly updatedBy?: string

    /**
     * 
     * @type {string}
     * @memberof ProjectApiGetMyProjects
     */
    readonly appliedBy?: string

    /**
     * 
     * @type {string}
     * @memberof ProjectApiGetMyProjects
     */
    readonly operatorUserId?: string

    /**
     * 
     * @type {number}
     * @memberof ProjectApiGetMyProjects
     */
    readonly maxDiameterSize?: number

    /**
     * 
     * @type {number}
     * @memberof ProjectApiGetMyProjects
     */
    readonly minDiameterSize?: number

    /**
     * 
     * @type {number}
     * @memberof ProjectApiGetMyProjects
     */
    readonly toiletSize?: number

    /**
     * 
     * @type {number}
     * @memberof ProjectApiGetMyProjects
     */
    readonly prayerMinCapacity?: number

    /**
     * 
     * @type {number}
     * @memberof ProjectApiGetMyProjects
     */
    readonly prayerMaxCapacity?: number

    /**
     * 
     * @type {string}
     * @memberof ProjectApiGetMyProjects
     */
    readonly hasAc?: string

    /**
     * 
     * @type {string}
     * @memberof ProjectApiGetMyProjects
     */
    readonly hasClassroom?: string

    /**
     * 
     * @type {string}
     * @memberof ProjectApiGetMyProjects
     */
    readonly hasGreenSpace?: string

    /**
     * 
     * @type {string}
     * @memberof ProjectApiGetMyProjects
     */
    readonly hasFemaleSection?: string

    /**
     * 
     * @type {string}
     * @memberof ProjectApiGetMyProjects
     */
    readonly hasParking?: string

    /**
     * 
     * @type {string}
     * @memberof ProjectApiGetMyProjects
     */
    readonly isDeleted?: string

    /**
     * 
     * @type {string}
     * @memberof ProjectApiGetMyProjects
     */
    readonly isPublished?: string
}

/**
 * Request parameters for getProjectDetailById operation in ProjectApi.
 * @export
 * @interface ProjectApiGetProjectDetailByIdRequest
 */
export interface ProjectApiGetProjectDetailByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof ProjectApiGetProjectDetailById
     */
    readonly projectId: string
}

/**
 * Request parameters for getProjectList operation in ProjectApi.
 * @export
 * @interface ProjectApiGetProjectListRequest
 */
export interface ProjectApiGetProjectListRequest {
    /**
     * 
     * @type {string}
     * @memberof ProjectApiGetProjectList
     */
    readonly organizationId: string

    /**
     * 
     * @type {number}
     * @memberof ProjectApiGetProjectList
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ProjectApiGetProjectList
     */
    readonly limit?: number

    /**
     * 
     * @type {string}
     * @memberof ProjectApiGetProjectList
     */
    readonly sort?: string

    /**
     * 
     * @type {string}
     * @memberof ProjectApiGetProjectList
     */
    readonly sortingField?: string

    /**
     * 
     * @type {string}
     * @memberof ProjectApiGetProjectList
     */
    readonly createdBy?: string

    /**
     * 
     * @type {string}
     * @memberof ProjectApiGetProjectList
     */
    readonly updatedBy?: string

    /**
     * 
     * @type {string}
     * @memberof ProjectApiGetProjectList
     */
    readonly appliedBy?: string

    /**
     * 
     * @type {string}
     * @memberof ProjectApiGetProjectList
     */
    readonly operatorUserId?: string

    /**
     * 
     * @type {number}
     * @memberof ProjectApiGetProjectList
     */
    readonly maxDiameterSize?: number

    /**
     * 
     * @type {number}
     * @memberof ProjectApiGetProjectList
     */
    readonly minDiameterSize?: number

    /**
     * 
     * @type {number}
     * @memberof ProjectApiGetProjectList
     */
    readonly toiletSize?: number

    /**
     * 
     * @type {number}
     * @memberof ProjectApiGetProjectList
     */
    readonly prayerMinCapacity?: number

    /**
     * 
     * @type {number}
     * @memberof ProjectApiGetProjectList
     */
    readonly prayerMaxCapacity?: number

    /**
     * 
     * @type {string}
     * @memberof ProjectApiGetProjectList
     */
    readonly hasAc?: string

    /**
     * 
     * @type {string}
     * @memberof ProjectApiGetProjectList
     */
    readonly hasClassroom?: string

    /**
     * 
     * @type {string}
     * @memberof ProjectApiGetProjectList
     */
    readonly hasGreenSpace?: string

    /**
     * 
     * @type {string}
     * @memberof ProjectApiGetProjectList
     */
    readonly hasFemaleSection?: string

    /**
     * 
     * @type {string}
     * @memberof ProjectApiGetProjectList
     */
    readonly hasParking?: string

    /**
     * 
     * @type {string}
     * @memberof ProjectApiGetProjectList
     */
    readonly isDeleted?: string

    /**
     * 
     * @type {string}
     * @memberof ProjectApiGetProjectList
     */
    readonly isPublished?: string
}

/**
 * Request parameters for rejectProject operation in ProjectApi.
 * @export
 * @interface ProjectApiRejectProjectRequest
 */
export interface ProjectApiRejectProjectRequest {
    /**
     * 
     * @type {ProjectStatusUpdateDto}
     * @memberof ProjectApiRejectProject
     */
    readonly projectStatusUpdateDto: ProjectStatusUpdateDto
}

/**
 * Request parameters for setDeletedFlag operation in ProjectApi.
 * @export
 * @interface ProjectApiSetDeletedFlagRequest
 */
export interface ProjectApiSetDeletedFlagRequest {
    /**
     * 
     * @type {ProjectSetDeletedFlagDto}
     * @memberof ProjectApiSetDeletedFlag
     */
    readonly projectSetDeletedFlagDto: ProjectSetDeletedFlagDto
}

/**
 * Request parameters for updateProject operation in ProjectApi.
 * @export
 * @interface ProjectApiUpdateProjectRequest
 */
export interface ProjectApiUpdateProjectRequest {
    /**
     * 
     * @type {string}
     * @memberof ProjectApiUpdateProject
     */
    readonly projectId: string

    /**
     * 
     * @type {ProjectUpdateDto}
     * @memberof ProjectApiUpdateProject
     */
    readonly projectUpdateDto: ProjectUpdateDto
}

/**
 * ProjectApi - object-oriented interface
 * @export
 * @class ProjectApi
 * @extends {BaseAPI}
 */
export class ProjectApi extends BaseAPI {
    /**
     * 
     * @summary Approve project
     * @param {ProjectApiApproveProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public approveProject(requestParameters: ProjectApiApproveProjectRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).approveProject(requestParameters.projectStatusUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Project
     * @param {ProjectApiCreateProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public createProject(requestParameters: ProjectApiCreateProjectRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).createProject(requestParameters.projectCreateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary permanent delete project!
     * @param {ProjectApiDeleteProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public deleteProject(requestParameters: ProjectApiDeleteProjectRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).deleteProject(requestParameters.organizationId, requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Projects viewed by manager
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getAllProjects(options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).getAllProjects(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Projects viewed by operator
     * @param {ProjectApiGetAllProjectsByOperatorIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getAllProjectsByOperatorId(requestParameters: ProjectApiGetAllProjectsByOperatorIdRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).getAllProjectsByOperatorId(requestParameters.operatorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Projects viewed by donor
     * @param {ProjectApiGetAllProjectsForDonorsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getAllProjectsForDonors(requestParameters: ProjectApiGetAllProjectsForDonorsRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).getAllProjectsForDonors(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of my projects
     * @param {ProjectApiGetMyProjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getMyProjects(requestParameters: ProjectApiGetMyProjectsRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).getMyProjects(requestParameters.organizationId, requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.createdBy, requestParameters.updatedBy, requestParameters.appliedBy, requestParameters.operatorUserId, requestParameters.maxDiameterSize, requestParameters.minDiameterSize, requestParameters.toiletSize, requestParameters.prayerMinCapacity, requestParameters.prayerMaxCapacity, requestParameters.hasAc, requestParameters.hasClassroom, requestParameters.hasGreenSpace, requestParameters.hasFemaleSection, requestParameters.hasParking, requestParameters.isDeleted, requestParameters.isPublished, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a project detail by projectId
     * @param {ProjectApiGetProjectDetailByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getProjectDetailById(requestParameters: ProjectApiGetProjectDetailByIdRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).getProjectDetailById(requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Projects viewed by manager
     * @param {ProjectApiGetProjectListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getProjectList(requestParameters: ProjectApiGetProjectListRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).getProjectList(requestParameters.organizationId, requestParameters.page, requestParameters.limit, requestParameters.sort, requestParameters.sortingField, requestParameters.createdBy, requestParameters.updatedBy, requestParameters.appliedBy, requestParameters.operatorUserId, requestParameters.maxDiameterSize, requestParameters.minDiameterSize, requestParameters.toiletSize, requestParameters.prayerMinCapacity, requestParameters.prayerMaxCapacity, requestParameters.hasAc, requestParameters.hasClassroom, requestParameters.hasGreenSpace, requestParameters.hasFemaleSection, requestParameters.hasParking, requestParameters.isDeleted, requestParameters.isPublished, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Approve project
     * @param {ProjectApiRejectProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public rejectProject(requestParameters: ProjectApiRejectProjectRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).rejectProject(requestParameters.projectStatusUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary set flag to delete campaign
     * @param {ProjectApiSetDeletedFlagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public setDeletedFlag(requestParameters: ProjectApiSetDeletedFlagRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).setDeletedFlag(requestParameters.projectSetDeletedFlagDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update project
     * @param {ProjectApiUpdateProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public updateProject(requestParameters: ProjectApiUpdateProjectRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).updateProject(requestParameters.projectId, requestParameters.projectUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * QaHelperApi - axios parameter creator
 * @export
 */
export const QaHelperApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {QaProposalCreateDto} qaProposalCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProposal: async (qaProposalCreateDto: QaProposalCreateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'qaProposalCreateDto' is not null or undefined
            assertParamExists('createProposal', 'qaProposalCreateDto', qaProposalCreateDto)
            const localVarPath = `/qa-helper/proposal/create-moderator`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(qaProposalCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {QaProposalCreateSupervisorDto} qaProposalCreateSupervisorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProposalSupervisor: async (qaProposalCreateSupervisorDto: QaProposalCreateSupervisorDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'qaProposalCreateSupervisorDto' is not null or undefined
            assertParamExists('createProposalSupervisor', 'qaProposalCreateSupervisorDto', qaProposalCreateSupervisorDto)
            const localVarPath = `/qa-helper/proposal/create-supervisor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(qaProposalCreateSupervisorDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProposal: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteProposal', 'id', id)
            const localVarPath = `/qa-helper/proposal/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QaHelperApi - functional programming interface
 * @export
 */
export const QaHelperApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QaHelperApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {QaProposalCreateDto} qaProposalCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProposal(qaProposalCreateDto: QaProposalCreateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProposal(qaProposalCreateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {QaProposalCreateSupervisorDto} qaProposalCreateSupervisorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProposalSupervisor(qaProposalCreateSupervisorDto: QaProposalCreateSupervisorDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProposalSupervisor(qaProposalCreateSupervisorDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProposal(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProposal(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * QaHelperApi - factory interface
 * @export
 */
export const QaHelperApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QaHelperApiFp(configuration)
    return {
        /**
         * 
         * @param {QaHelperApiCreateProposalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProposal(requestParameters: QaHelperApiCreateProposalRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createProposal(requestParameters.qaProposalCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {QaHelperApiCreateProposalSupervisorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProposalSupervisor(requestParameters: QaHelperApiCreateProposalSupervisorRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createProposalSupervisor(requestParameters.qaProposalCreateSupervisorDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {QaHelperApiDeleteProposalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProposal(requestParameters: QaHelperApiDeleteProposalRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteProposal(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createProposal operation in QaHelperApi.
 * @export
 * @interface QaHelperApiCreateProposalRequest
 */
export interface QaHelperApiCreateProposalRequest {
    /**
     * 
     * @type {QaProposalCreateDto}
     * @memberof QaHelperApiCreateProposal
     */
    readonly qaProposalCreateDto: QaProposalCreateDto
}

/**
 * Request parameters for createProposalSupervisor operation in QaHelperApi.
 * @export
 * @interface QaHelperApiCreateProposalSupervisorRequest
 */
export interface QaHelperApiCreateProposalSupervisorRequest {
    /**
     * 
     * @type {QaProposalCreateSupervisorDto}
     * @memberof QaHelperApiCreateProposalSupervisor
     */
    readonly qaProposalCreateSupervisorDto: QaProposalCreateSupervisorDto
}

/**
 * Request parameters for deleteProposal operation in QaHelperApi.
 * @export
 * @interface QaHelperApiDeleteProposalRequest
 */
export interface QaHelperApiDeleteProposalRequest {
    /**
     * 
     * @type {string}
     * @memberof QaHelperApiDeleteProposal
     */
    readonly id: string
}

/**
 * QaHelperApi - object-oriented interface
 * @export
 * @class QaHelperApi
 * @extends {BaseAPI}
 */
export class QaHelperApi extends BaseAPI {
    /**
     * 
     * @param {QaHelperApiCreateProposalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QaHelperApi
     */
    public createProposal(requestParameters: QaHelperApiCreateProposalRequest, options?: AxiosRequestConfig) {
        return QaHelperApiFp(this.configuration).createProposal(requestParameters.qaProposalCreateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {QaHelperApiCreateProposalSupervisorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QaHelperApi
     */
    public createProposalSupervisor(requestParameters: QaHelperApiCreateProposalSupervisorRequest, options?: AxiosRequestConfig) {
        return QaHelperApiFp(this.configuration).createProposalSupervisor(requestParameters.qaProposalCreateSupervisorDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {QaHelperApiDeleteProposalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QaHelperApi
     */
    public deleteProposal(requestParameters: QaHelperApiDeleteProposalRequest, options?: AxiosRequestConfig) {
        return QaHelperApiFp(this.configuration).deleteProposal(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReferralApi - axios parameter creator
 * @export
 */
export const ReferralApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/referral/getListAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSummary: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/referral/getSummary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopFiveByProjectByZone: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/referral/getTopFiveByProjectByZone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReferralApi - functional programming interface
 * @export
 */
export const ReferralApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReferralApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSummary(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSummary(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTopFiveByProjectByZone(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTopFiveByProjectByZone(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReferralApi - factory interface
 * @export
 */
export const ReferralApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReferralApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.findAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSummary(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getSummary(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopFiveByProjectByZone(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getTopFiveByProjectByZone(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReferralApi - object-oriented interface
 * @export
 * @class ReferralApi
 * @extends {BaseAPI}
 */
export class ReferralApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralApi
     */
    public findAll(options?: AxiosRequestConfig) {
        return ReferralApiFp(this.configuration).findAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralApi
     */
    public getSummary(options?: AxiosRequestConfig) {
        return ReferralApiFp(this.configuration).getSummary(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralApi
     */
    public getTopFiveByProjectByZone(options?: AxiosRequestConfig) {
        return ReferralApiFp(this.configuration).getTopFiveByProjectByZone(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TicketApi - axios parameter creator
 * @export
 */
export const TicketApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Ticket
         * @param {CreateTicketDto} createTicketDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (createTicketDto: CreateTicketDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTicketDto' is not null or undefined
            assertParamExists('create', 'createTicketDto', createTicketDto)
            const localVarPath = `/ticket/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTicketDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Ticket with its status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTickets: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ticket/getListAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TicketApi - functional programming interface
 * @export
 */
export const TicketApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TicketApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Ticket
         * @param {CreateTicketDto} createTicketDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(createTicketDto: CreateTicketDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(createTicketDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get All Ticket with its status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTickets(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllTickets(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TicketApi - factory interface
 * @export
 */
export const TicketApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TicketApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Ticket
         * @param {TicketApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: TicketApiCreateRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.create(requestParameters.createTicketDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Ticket with its status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTickets(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAllTickets(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for create operation in TicketApi.
 * @export
 * @interface TicketApiCreateRequest
 */
export interface TicketApiCreateRequest {
    /**
     * 
     * @type {CreateTicketDto}
     * @memberof TicketApiCreate
     */
    readonly createTicketDto: CreateTicketDto
}

/**
 * TicketApi - object-oriented interface
 * @export
 * @class TicketApi
 * @extends {BaseAPI}
 */
export class TicketApi extends BaseAPI {
    /**
     * 
     * @summary Create Ticket
     * @param {TicketApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketApi
     */
    public create(requestParameters: TicketApiCreateRequest, options?: AxiosRequestConfig) {
        return TicketApiFp(this.configuration).create(requestParameters.createTicketDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Ticket with its status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketApi
     */
    public getAllTickets(options?: AxiosRequestConfig) {
        return TicketApiFp(this.configuration).getAllTickets(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * VendorApi - axios parameter creator
 * @export
 */
export const VendorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vendor/getListAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Chart Data
         * @param {string} vendorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChartData: async (vendorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vendorId' is not null or undefined
            assertParamExists('getChartData', 'vendorId', vendorId)
            const localVarPath = `/vendor/{vendorId}/getChartData`
                .replace(`{${"vendorId"}}`, encodeURIComponent(String(vendorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Summary
         * @param {string} vendorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSummary: async (vendorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vendorId' is not null or undefined
            assertParamExists('getSummary', 'vendorId', vendorId)
            const localVarPath = `/vendor/{vendorId}/summary`
                .replace(`{${"vendorId"}}`, encodeURIComponent(String(vendorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Vendor
         * @param {string} vendorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVendor: async (vendorId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vendorId' is not null or undefined
            assertParamExists('getVendor', 'vendorId', vendorId)
            const localVarPath = `/vendor/{vendorId}`
                .replace(`{${"vendorId"}}`, encodeURIComponent(String(vendorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VendorApi - functional programming interface
 * @export
 */
export const VendorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VendorApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Chart Data
         * @param {string} vendorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChartData(vendorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChartData(vendorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Summary
         * @param {string} vendorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSummary(vendorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSummary(vendorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Vendor
         * @param {string} vendorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVendor(vendorId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVendor(vendorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VendorApi - factory interface
 * @export
 */
export const VendorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VendorApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.findAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Chart Data
         * @param {VendorApiGetChartDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChartData(requestParameters: VendorApiGetChartDataRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getChartData(requestParameters.vendorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Summary
         * @param {VendorApiGetSummaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSummary(requestParameters: VendorApiGetSummaryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getSummary(requestParameters.vendorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Vendor
         * @param {VendorApiGetVendorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVendor(requestParameters: VendorApiGetVendorRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getVendor(requestParameters.vendorId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getChartData operation in VendorApi.
 * @export
 * @interface VendorApiGetChartDataRequest
 */
export interface VendorApiGetChartDataRequest {
    /**
     * 
     * @type {string}
     * @memberof VendorApiGetChartData
     */
    readonly vendorId: string
}

/**
 * Request parameters for getSummary operation in VendorApi.
 * @export
 * @interface VendorApiGetSummaryRequest
 */
export interface VendorApiGetSummaryRequest {
    /**
     * 
     * @type {string}
     * @memberof VendorApiGetSummary
     */
    readonly vendorId: string
}

/**
 * Request parameters for getVendor operation in VendorApi.
 * @export
 * @interface VendorApiGetVendorRequest
 */
export interface VendorApiGetVendorRequest {
    /**
     * 
     * @type {string}
     * @memberof VendorApiGetVendor
     */
    readonly vendorId: string
}

/**
 * VendorApi - object-oriented interface
 * @export
 * @class VendorApi
 * @extends {BaseAPI}
 */
export class VendorApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorApi
     */
    public findAll(options?: AxiosRequestConfig) {
        return VendorApiFp(this.configuration).findAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Chart Data
     * @param {VendorApiGetChartDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorApi
     */
    public getChartData(requestParameters: VendorApiGetChartDataRequest, options?: AxiosRequestConfig) {
        return VendorApiFp(this.configuration).getChartData(requestParameters.vendorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Summary
     * @param {VendorApiGetSummaryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorApi
     */
    public getSummary(requestParameters: VendorApiGetSummaryRequest, options?: AxiosRequestConfig) {
        return VendorApiFp(this.configuration).getSummary(requestParameters.vendorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Vendor
     * @param {VendorApiGetVendorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorApi
     */
    public getVendor(requestParameters: VendorApiGetVendorRequest, options?: AxiosRequestConfig) {
        return VendorApiFp(this.configuration).getVendor(requestParameters.vendorId, options).then((request) => request(this.axios, this.basePath));
    }
}


