generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}
model Authorities {
    authority_id String @id
    name String
    is_deleted Boolean @default(false)
    client_field_id String
    client_field_details ClientFields @relation(fields: [client_field_id], references: [client_field_id])

    client_data client_data[]
    @@map("authorities")
}

model ClientFields {
    client_field_id String @id
    name String
    is_deleted Boolean @default(false)

    client_data    client_data[]
    authorities    Authorities[]
    @@map("client_fields")
}
model Banner {
  id           String    @id
  type         String // internal / external
  title        String
  content      String
  track_id     String?
  track        track?    @relation(fields: [track_id], references: [id])
  logo         Json?
  expired_date DateTime  @db.Date
  expired_time String    @db.VarChar
  expired_at   BigInt    @default(0) // for storing the epoch time (for handling diffrent timezone between client locaiton, server and dev location)
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @default(now()) @db.Timestamptz(6)

  @@map("banners")
}

model bank_information {
  user_id                                              String
  bank_account_name                                    String?    @db.VarChar
  bank_account_number                                  String?    @db.VarChar
  bank_name                                            String?    @db.VarChar
  proposal_id                                          String?
  id                                                   String     @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  card_image                                           Json?
  is_deleted                                           Boolean?   @default(false)
  bank_id                                              String?    @db.VarChar
  created_at                                           DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at                                           DateTime?  @default(now()) @db.Timestamptz(6)
  user                                                 user       @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  proposal_bank_informationToproposal_proposal_bank_id proposal[] @relation("bank_informationToproposal_proposal_bank_id")
}

model client_data {
  id                       String       @id(map: "users_pkey")
  entity                   String?      @db.VarChar
  authority                String?      @db.VarChar
  authority_id             String?
  authority_detail         Authorities? @relation(fields: [authority_id], references: [authority_id])
  headquarters             String?      @db.VarChar
  date_of_esthablistmen    DateTime?    @db.Date
  num_of_beneficiaries     Int?
  num_of_employed_facility Int?
  governorate              String?
  governorate_id           String?
  governorate_detail       Governorate?  @relation(fields: [governorate_id], references: [governorate_id])
  region                   String?      @db.VarChar
  region_id                String?  
  region_detail            Region?       @relation(fields: [region_id], references: [region_id])
  entity_mobile            String?      @db.VarChar
  center_administration    String?      @db.VarChar
  twitter_acount           String?      @db.VarChar
  phone                    String?      @db.VarChar
  website                  String?      @db.VarChar
  password                 String?      @db.VarChar
  license_number           String?      @db.VarChar
  license_expired          DateTime?    @db.Date
  license_issue_date       DateTime?    @db.Date
  ceo_mobile               String?      @db.VarChar
  ceo_name                 String?      @db.VarChar
  data_entry_mobile        String?      @db.VarChar
  data_entry_name          String?      @db.VarChar
  data_entry_mail          String?      @db.VarChar
  created_at               DateTime?    @default(now()) @db.Timestamp(6)
  updated_at               DateTime?    @default(now()) @db.Timestamp(6)
  client_field             String?      @db.VarChar
  client_field_id          String?
  client_field_details     ClientFields? @relation(fields: [client_field_id], references: [client_field_id])
  user_id                  String       @unique
  license_file             Json?
  board_ofdec_file         Json?
  chairman_name            String?      @db.VarChar
  chairman_mobile          String?      @db.VarChar
  qid                      Int?
  user                     user         @relation("client_data_user_idTouser", fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  client_log               client_log[]
}

model employees_permissions {
  organization_id                    String?
  user_id                            String
  director_of_baptisms_department    Boolean? @default(false)
  director_of_initiatives_department Boolean? @default(false)
  director_of_mosque_administration  Boolean? @default(false)
  director_of_charity_department     Boolean? @default(false)
  president                          Boolean? @default(false)
  reports                            Boolean? @default(false)
  sorting_officer                    Boolean? @default(false)
  relationship_officer               Boolean? @default(false)
  treasurer                          Boolean? @default(false)
  acountant                          Boolean? @default(false)
  edit_drop_down_menus               Boolean? @default(false)
  entering_the_anual_plan            Boolean? @default(false)
  user_and_permision                 Boolean? @default(false)
  correspondence                     Boolean? @default(false)
  advisors_committee                 Boolean? @default(false)
  project_supervisor                 Boolean? @default(false)
  id                                 String   @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user                               user     @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

model message {
  id               String         @id
  room_id          String?
  owner_id         String?
  read_status      Boolean?       @default(false)
  created_at       DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?      @default(now()) @db.Timestamptz(6)
  content_type_id  String
  content_title    String?        @db.VarChar
  attachment       Json?
  reply_id         String?
  content          String?
  receiver_id      String?
  sender_role_as   String?
  receiver_role_as String?
  content_type     content_type   @relation(fields: [content_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sender           user?          @relation(fields: [owner_id], references: [id], onUpdate: Restrict, onDelete: Restrict)
  receiver         user?          @relation("message_receiver_idTouser", fields: [receiver_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  room_chat        room_chat?     @relation(fields: [room_id], references: [id], onDelete: Cascade)
  notification     notification[]
}

model organization {
  id           String @id
  organization String @db.Char(1)
}

model payment {
  id                 String          @id
  payment_amount     Decimal?        @db.Decimal
  proposal_id        String
  payment_date       DateTime?       @db.Date
  status             String?         @default("SET_BY_SUPERVISOR")
  number_of_payments Decimal?        @db.Decimal
  order              Decimal?        @db.Decimal
  created_at         DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?       @default(now()) @db.Timestamptz(6)
  cheques            cheque[]
  proposal           proposal        @relation(fields: [proposal_id], references: [id], onDelete: Cascade)
  payment_status     payment_status? @relation(fields: [status], references: [id], onDelete: Cascade)
}

model proposal {
  id                                  String                           @id
  project_name                        String                           @db.VarChar
  submitter_user_id                   String
  created_at                          DateTime                         @default(now()) @db.Timestamptz(6)
  project_track                       String?
  project_idea                        String?
  project_implement_date              DateTime?                        @db.Date
  project_location                    String?
  num_ofproject_binicficiaries        Int?
  project_goals                       String?
  project_outputs                     String?
  project_strengths                   String?
  project_risks                       String?
  pm_name                             String?                          @db.VarChar
  pm_email                            String?                          @db.VarChar
  pm_mobile                           String?                          @db.VarChar
  governorate                         String?
  governorate_id                      String?
  governorate_detail                  Governorate?  @relation(fields: [governorate_id], references: [governorate_id])
  region                              String?                          @db.VarChar
  region_id                           String?  
  region_detail                       Region?       @relation(fields: [region_id], references: [region_id])
  amount_required_fsupport            Decimal?                         @db.Decimal
  need_consultant                     Boolean?                         @default(false)
  step                                String?                          @default("ZERO")
  whole_budget                        Decimal?                         @db.Decimal
  state                               String?                          @default("MODERATOR")
  inner_status                        String?                          @default("CREATED_BY_CLIENT")
  previously_add_bank                 String[]
  outter_status                       String?                          @default("ONGOING")
  project_beneficiaries               String?                          @db.VarChar
  number_of_payments                  Decimal?                         @db.Decimal
  finance_id                          String?
  cashier_id                          String?
  project_manager_id                  String?
  supervisor_id                       String?
  project_attachments                 Json?
  letter_ofsupport_req                Json?
  on_revision                         Boolean?                         @default(false)
  on_consulting                       Boolean?                         @default(false)
  proposal_bank_id                    String?                          @db.Uuid
  partial_support_amount              Decimal?                         @db.Decimal
  project_beneficiaries_specific_type String?
  track_id                            String?                          @db.VarChar
  updated_at                          DateTime?                        @default(now()) @db.Timestamptz(6)
  clasification_field                 String?                          @db.VarChar
  closing_report                      Boolean?
  support_type                        Boolean?
  does_an_agreement                   Boolean?
  need_picture                        Boolean?
  support_outputs                     String?
  clause                              String?
  vat                                 Boolean?
  vat_percentage                      Int?
  inclu_or_exclu                      Boolean?
  fsupport_by_supervisor              Decimal?                         @db.Decimal
  number_of_payments_by_supervisor    Decimal?                         @db.Decimal
  chairman_of_board_of_directors      String?
  been_supported_before               Boolean?
  most_clents_projects                String?
  added_value                         String?
  reasons_to_accept                   String?
  target_group_num                    Int?
  target_group_type                   String?
  target_group_age                    String?
  been_made_before                    Boolean?
  remote_or_insite                    String?                          @db.VarChar
  old_inner_status                    String?                          @db.VarChar
  support_goal_id                     String?
  accreditation_type_id               String?
  execution_time                      Decimal?                         @db.Decimal
  oid                                 Int?
  project_number                      Int?                             @unique @default(autoincrement())
  project_numbers1                    Int                              @default(autoincrement())
  beneficiary_id                      String?
  beneficiary_details                 beneficiaries?                   @relation(fields: [beneficiary_id], references: [id])
  notification                        notification[]
  payments                            payment[]
  project_timeline                    project_timeline[]
  accreditation_type                  accreditation_type?              @relation(fields: [accreditation_type_id], references: [id])
  proposal_beneficiaries              proposal_beneficiaries?          @relation(fields: [project_beneficiaries], references: [id], onDelete: Cascade)
  project_tracks                      project_tracks?                  @relation(fields: [project_track], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "proposal_project_kind_id_fkey")
  project_manager                     user?                            @relation("proposal_project_manager_idTouser", fields: [project_manager_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  bank_information                    bank_information?                @relation("bank_informationToproposal_proposal_bank_id", fields: [proposal_bank_id], references: [id], onDelete: Cascade)
  proposal_request                    proposal_request?                @relation(fields: [outter_status], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "proposal_requested_fkey")
  user_type                           user_type?                       @relation(fields: [state], references: [id], onDelete: NoAction, onUpdate: NoAction)
  proposal_status                     proposal_status?                 @relation(fields: [inner_status], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "proposal_status_fkey")
  proposal_step                       proposal_step?                   @relation(fields: [step], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                                user                             @relation(fields: [submitter_user_id], references: [id], onDelete: Restrict,onUpdate: Restrict)
  supervisor                          user?                            @relation("proposal_supervisor_idTouser", fields: [supervisor_id], references: [id], onDelete: Restrict,onUpdate: Restrict)
  support_goal                        support_goal?                    @relation(fields: [support_goal_id], references: [id])
  track                               track?                           @relation(fields: [track_id], references: [id], onUpdate: NoAction)
  proposal_asked_edit_request         proposal_asked_edit_request[]
  proposal_assign                     proposal_assign[]
  proposal_closing_report             proposal_closing_report[]
  proposal_comment                    proposal_comment[]
  proposal_edit_request               proposal_edit_request?
  follow_ups                          proposal_follow_up[]
  proposal_item_budgets               proposal_item_budget[]
  proposal_logs                       proposal_log[]
  recommended_support_consultant      recommended_support_consultant[]
  payment_configuration               supervisor[]
  contact_us                          ContactUs[]
}

model proposal_comment {
  id          String    @id @unique
  proposal_id String
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  comment     String?
  user_id     String?
  proposal    proposal  @relation(fields: [proposal_id], references: [id], onUpdate: Restrict)
}

model proposal_item_budget {
  id          String    @id(map: "detail_project_budget_pkey")
  amount      Decimal   @db.Decimal
  explanation String
  clause      String    @db.Char(255)
  proposal_id String
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  proposal    proposal  @relation(fields: [proposal_id], references: [id], onDelete: Cascade)
}

model proposal_log {
  id            String         @id
  proposal_id   String
  created_at    DateTime       @default(now()) @db.Timestamptz(6)
  updated_at    DateTime       @default(now()) @db.Timestamptz(6)
  reviewer_id   String?
  state         String
  notes         String?
  action        String?        @db.VarChar
  message       String?        @db.VarChar
  user_role     String?        @db.VarChar
  response_time Int?
  reject_reason String?        @db.VarChar
  old_values    Json?
  new_values    Json?
  notification  notification[]
  user_type     user_type      @relation(fields: [state], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "proposal_log_assign_fkey")
  proposal      proposal       @relation(fields: [proposal_id], references: [id], onDelete: Cascade)
  reviewer      user?          @relation(fields: [reviewer_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "proposal_log_user_id_fkey")
}

model proposal_state {
  id String @id
}

model user {
  id                                                                          String                        @id @unique
  employee_name                                                               String?                       @db.VarChar
  mobile_number                                                               String?                       @db.VarChar
  email                                                                       String                        @unique @db.VarChar
  updated_at                                                                  DateTime?                     @default(now()) @db.Timestamptz(6)
  created_at                                                                  DateTime?                     @default(now()) @db.Timestamptz(6)
  employee_path                                                               String?                       @db.VarChar
  last_login                                                                  DateTime?                     @default(now()) @db.Timestamptz(6)
  status_id                                                                   String
  address                                                                     String?
  google_session                                                              Json?
  is_online                                                                   Boolean?
  track_id                                                                    String?
  uid                                                                         Int?
//   is_deleted                                                                  Boolean?
  appointment_appointment_employee_idTouser                                   appointment[]                 @relation("appointment_employee_idTouser")
  appointment_appointment_user_idTouser                                       appointment[]                 @relation("appointment_user_idTouser")
  bank_information                                                            bank_information[]
  client_data                                                                 client_data?                  @relation("client_data_user_idTouser")
  client_log                                                                  client_log[]
  edit_requests_edit_requests_reviewer_idTouser                               edit_requests[]               @relation("edit_requests_reviewer_idTouser")
  edit_requests_edit_requests_user_idTouser                                   edit_requests[]               @relation("edit_requests_user_idTouser")
  email_record_email_record_receiver_idTouser                                 email_record[]                @relation("email_record_receiver_idTouser")
  email_record_email_record_sender_idTouser                                   email_record[]                @relation("email_record_sender_idTouser")
  employees_permissions_employees_permissionsTouser                           employees_permissions[]
  file_manager                                                                file_manager[]
  message_messageTouser                                                       message[]
  message_message_receiver_idTouser                                           message[]                     @relation("message_receiver_idTouser")
  notifications                                                               notification[]                @relation("notification_user_idTouser")
  proposal_proposal_project_manager_idTouser                                  proposal[]                    @relation("proposal_project_manager_idTouser")
  proposals                                                                   proposal[]
  proposal_proposal_supervisor_idTouser                                       proposal[]                    @relation("proposal_supervisor_idTouser")
  proposal_asked_edit_request_proposal_asked_edit_request_sender_idTouser     proposal_asked_edit_request[] @relation("proposal_asked_edit_request_sender_idTouser")
  proposal_asked_edit_request_proposal_asked_edit_request_supervisor_idTouser proposal_asked_edit_request[] @relation("proposal_asked_edit_request_supervisor_idTouser")
  proposal_edit_request_proposal_edit_request_reviewer_idTouser               proposal_edit_request[]       @relation("proposal_edit_request_reviewer_idTouser")
  proposal_edit_request_proposal_edit_request_user_idTouser                   proposal_edit_request[]       @relation("proposal_edit_request_user_idTouser")
  proposal_follow_up_proposal_follow_up_user_idTouser                         proposal_follow_up[]          @relation("proposal_follow_up_user_idTouser")
  proposal_log                                                                proposal_log[]
  room_chat_as_participant1                                                   room_chat[]                   @relation("room_chat_participant1_user_idTouser")
  room_chat_as_participant2                                                   room_chat[]                   @relation("room_chat_participant2_user_idTouser")
  schedule                                                                    schedule[]
  employee_track                                                              project_tracks?               @relation(fields: [employee_path], references: [id], onDelete: NoAction, onUpdate: NoAction)
  track                                                                       track?                        @relation(fields: [track_id], references: [id], onDelete: Cascade)
  status                                                                      user_status                   @relation(fields: [status_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_user_status_id_fkey")
  roles                                                                       user_role[]
  user_status_log_userTouser_status_log_account_manager_id                    user_status_log[]             @relation("userTouser_status_log_account_manager_id")
  user_status_log_userTouser_status_log_user_id                               user_status_log[]             @relation("userTouser_status_log_user_id")
  submitted_contact_us                                                        ContactUs[]
}

model user_type {
  id              String            @id
  proposal        proposal[]
  proposal_assign proposal_assign[]
  proposal_log    proposal_log[]
  user_by_role    user_role[]
}

model proposal_assign {
  id          Int       @id @default(autoincrement())
  proposal_id String
  user_id     String
  assign      String
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  user_type   user_type @relation(fields: [assign], references: [id], onDelete: NoAction, onUpdate: NoAction)
  proposal    proposal  @relation(fields: [proposal_id], references: [id], onDelete: Cascade)
}

model proposal_follow_up {
  id             String    @id
  proposal_id    String
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @default(now()) @db.Timestamptz(6)
  attachments    Json?
  content        String?
  user_id        String
  submitter_role String
  employee_only  Boolean
  proposal       proposal  @relation(fields: [proposal_id], references: [id], onDelete: Cascade)
  user           user      @relation("proposal_follow_up_user_idTouser", fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

model proposal_status {
  id       String     @id
  proposal proposal[]
}

model client_log {
  id                       String      @id
  reviewer_id              String
  organization_id          String
  note_account_information String
  created_at               DateTime    @default(now()) @db.Timestamptz(6)
  updated_at               DateTime    @default(now()) @db.Timestamptz(6)
  status                   String
  client_data              client_data @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user                     user        @relation(fields: [reviewer_id], references: [id], onDelete: Restrict,onUpdate: Restrict)
  user_status              user_status @relation(fields: [status], references: [id], onDelete: NoAction, onUpdate: Cascade)
}

model proposal_request {
  id       String     @id
  proposal proposal[]
}

model supervisor {
  id                  String   @id
  user_id             String
  proposal_id         String
  clasification_field String   @db.VarChar
  closing_report      Boolean
  support_type        Boolean
  does_an_agreement   Boolean
  need_picture        Boolean
  number_of_payments  Decimal  @db.Decimal
  support_amount      Decimal  @db.Decimal
  notes               String?
  support_outputs     String?
  clause              String?
  vat                 Boolean?
  vat_percentage      Int?
  inclu_or_exclu      Boolean?
  support_goals       String?
  proposal            proposal @relation(fields: [proposal_id], references: [id], onDelete: Cascade)
}

model proposal_beneficiaries {
  id       String     @id
  proposal proposal[]
}

model proposal_step {
  id       String     @id
  proposal proposal[]
}

model cheque {
  id               String   @id
  payment_id       String
  deposit_date     DateTime @db.Date
  number           String   @db.VarChar
  transfer_receipt Json
  payment          payment  @relation(fields: [payment_id], references: [id], onDelete: Cascade)
}

model payment_status {
  id      String    @id
  payment payment[]
}

model correspondance_category {
  id        String      @id
  room_chat room_chat[]
}

model edit_request_status {
  id            String          @id
  edit_requests edit_requests[]
}

model project_tracks {
  id       String     @id(map: "project_kind_pkey") @unique(map: "project_kind_id_key")
  proposal proposal[]
  user     user[]
}

model room_chat {
  id                                        String                  @id
  correspondance_category_id                String
  participant1_user_id                      String?
  participant2_user_id                      String?
  created_at                                DateTime                @default(now()) @db.Timestamptz(6)
  updated_at                                DateTime                @default(now()) @db.Timestamptz(6)
  message                                   message[]
  correspondance_category                   correspondance_category @relation(fields: [correspondance_category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "room_chat_correspondance_category_fkey")
  user_room_chat_participant1_user_idTouser user?                   @relation("room_chat_participant1_user_idTouser", fields: [participant1_user_id], references: [id],onUpdate: Restrict, onDelete: Restrict)
  user_room_chat_participant2_user_idTouser user?                   @relation("room_chat_participant2_user_idTouser", fields: [participant2_user_id], references: [id],onUpdate: Restrict, onDelete: Restrict)
}

model ContactUs {
  contact_us_id                         Int        @id @default(autoincrement())
  inquiry_type                          String       
  title                                 String?        @db.VarChar()
  message                               String?        @db.VarChar()
  date_of_visit                         DateTime?
  visit_reason                          String?
  submitter_user_id                     String
  user                                  user           @relation(fields: [submitter_user_id], references: [id])
  proposal_id                           String?
  proposal                              proposal?      @relation(fields: [proposal_id], references: [id])
  created_at                            DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at                            DateTime?     @default(now()) @db.Timestamptz(6)
  
  @@map("contact_us")
}

model appointment {
  id                String         @id @default(dbgenerated("gen_random_uuid()"))
  employee_id       String
  user_id           String
  meeting_url       String         @db.VarChar
  calendar_url      String         @db.VarChar
  date              DateTime       @db.Date
  start_time        String         @db.VarChar
  end_time          String         @db.VarChar
  reject_reason     String?
  status            String         @db.VarChar
  day               String         @db.VarChar
  created_at        DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?      @default(now()) @db.Timestamptz(6)
  calendar_event_id String         @db.VarChar
  employee          user           @relation("appointment_employee_idTouser", fields: [employee_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  client            user           @relation("appointment_user_idTouser", fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  notification      notification[]
}

model schedule {
  id         String  @id
  user_id    String
  day        String  @db.VarChar
  start_time String? @db.VarChar
  end_time   String? @db.VarChar
  user       user    @relation(fields: [user_id], references: [id], onDelete: Restrict,onUpdate: Restrict)
}

model email_record {
  id          String    @id(map: "email_history_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String    @db.VarChar
  content     String
  sender_id   String
  receiver_id String
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  receiver    user      @relation("email_record_receiver_idTouser", fields: [receiver_id], references: [id], onDelete:Restrict, onUpdate: Restrict)
  sender      user      @relation("email_record_sender_idTouser", fields: [sender_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

model banks {
  id         String    @id
  bank_name  String?
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  is_deleted Boolean?  @default(false)
}

model beneficiaries {
  id         String     @id
  name       String     @db.VarChar
  is_deleted Boolean?   @default(false)
  proposals  proposal[]
}

model recommended_support_consultant {
  clause      String
  explanation String
  amount      Int
  id          String   @id
  proposal_id String
  proposal    proposal @relation(fields: [proposal_id], references: [id], onDelete: Cascade)
}

model track {
  id                   String           @id @db.VarChar
  name                 String?          @unique
  with_consultation    Boolean?         @default(false)
  created_at           DateTime?        @default(now()) @db.Timestamptz(6)
  is_deleted           Boolean?         @default(false)
  proposal             proposal[]
  track_section        track_section[]
  user                 user[]
  track_advertisements Banner[]
}

model track_section {
  id                  String          @id
  name                String          @db.VarChar
  budget              Float           @db.Real
  section_id          String?
  is_leaf             Boolean?        @default(false)
  track_id            String
  is_deleted          Boolean?        @default(false)
  track_section       track_section?  @relation("track_sectionTotrack_section", fields: [section_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  other_track_section track_section[] @relation("track_sectionTotrack_section")
  track               track           @relation(fields: [track_id], references: [id], onDelete: Cascade)
}

model user_status {
  id              String            @id(map: "client_status_pkey")
  client_log      client_log[]
  user            user[]
  user_status_log user_status_log[]
}

model user_role {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String
  user_type_id String
  user         user      @relation(fields: [user_id], references: [id], onDelete: Restrict,onUpdate: Restrict)
  user_type    user_type @relation(fields: [user_type_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

model content_type {
  id      String    @id
  message message[]
}

model accreditation_type {
  id       String     @id
  proposal proposal[]
}

model project_timeline {
  id          String   @id
  name        String   @db.VarChar
  start_date  DateTime @db.Date
  end_date    DateTime @db.Date
  proposal_id String
  proposal    proposal @relation(fields: [proposal_id], references: [id], onDelete: Cascade)
}

model support_goal {
  id       String     @id
  proposal proposal[]
}

model notification {
  id              String        @id
  content         String        @db.VarChar
  proposal_id     String?
  message_id      String?
  appointment_id  String?
  user_id         String
  type            String        @db.VarChar
  created_at      DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?     @default(now()) @db.Timestamptz(6)
  read_status     Boolean?      @default(false)
  subject         String
  proposal_log_id String?
  shown           Boolean       @default(true)
  specific_type   String?       @db.VarChar
  appointment     appointment?  @relation(fields: [appointment_id], references: [id])
  message         message?      @relation(fields: [message_id], references: [id], onDelete: Cascade)
  proposal        proposal?     @relation(fields: [proposal_id], references: [id])
  proposal_log    proposal_log? @relation(fields: [proposal_log_id], references: [id], onDelete: Cascade)
  user            user          @relation("notification_user_idTouser", fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

model NotificationFailedLogs {
  id        String  @id
  error_log String
  content   String
  subject   String
  type      String
  user_id   String
  email     String?
  phone     String?

  @@map("notification_failed_logs")
}

model user_status_log {
  id                     String      @id
  user_id                String
  account_manager_id     String?
  status_id              String
  notes                  String?
  created_at             DateTime?   @default(now()) @db.Timestamptz(6)
  account_manager_detail user?       @relation("userTouser_status_log_account_manager_id", fields: [account_manager_id], references: [id], onDelete: Restrict,onUpdate: Restrict)
  user_status            user_status @relation(fields: [status_id], references: [id], onDelete: Cascade)
  user_detail            user        @relation("userTouser_status_log_user_id", fields: [user_id], references: [id], onDelete: Restrict,onUpdate: Restrict)
}

model edit_requests {
  id                  String              @id(map: "edit_request_logs_pkey")
  user_id             String
  reviewer_id         String?
  status_id           String
  reject_reason       String?
  rejected_at         DateTime?           @db.Timestamptz(6)
  accepted_at         DateTime?           @db.Timestamptz(6)
  created_at          DateTime            @default(now()) @db.Timestamptz(6)
  new_value           String              @db.VarChar
  old_value           String              @db.VarChar
  reviewer            user?               @relation("edit_requests_reviewer_idTouser", fields: [reviewer_id], references: [id], onDelete: Restrict, onUpdate: Restrict,map: "edit_request_logs_reviwer_id_fkey")
  edit_request_status edit_request_status @relation(fields: [status_id], references: [id], onDelete: Cascade,onUpdate: Cascade, map: "edit_request_logs_status_id_fkey")
  user                user                @relation("edit_requests_user_idTouser", fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "edit_request_logs_user_id_fkey")
}

model file_manager {
  id                  String   @id
  name                String   @db.VarChar
  size                Decimal  @db.Decimal
  mimetype            String   @db.VarChar
  url                 String   @unique @db.VarChar
  table_name          String?  @db.VarChar
  column_name         String?  @db.VarChar
  user_id             String?
  is_deleted          Boolean  @default(false)
  created_at          DateTime @default(now()) @db.Timestamptz(6)
  updated_at          DateTime @default(now()) @db.Timestamptz(6)
  proposal_id         String?
  advertisement_id    String?
  bank_information_id String?
  fid                 Int?
  user                user?    @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

model bank_information2 {
  user_id             String?
  bank_account_name   String?  @db.VarChar
  bank_account_number String?  @db.VarChar
  bank_name           String?  @db.VarChar
  proposal_id         String?
  id                  String   @id @default("")
  card_image          String?
  is_deleted          Boolean? @default(false)
}

model client_data2 {
  id                       String    @id
  entity                   String?   @db.VarChar
  authority                String?   @db.VarChar
  headquarters             String?   @db.VarChar
  date_of_esthablistmen    DateTime? @db.Date
  num_of_beneficiaries     Int?
  num_of_employed_facility Int?
  governorate              String?
  region                   String?   @db.VarChar
  entity_mobile            String?   @db.VarChar
  center_administration    String?   @db.VarChar
  twitter_acount           String?   @db.VarChar
  phone                    String?   @db.VarChar
  website                  String?   @db.VarChar
  password                 String?   @db.VarChar
  license_number           String?   @db.VarChar
  license_expired          DateTime? @db.Date
  //   license_issue_date       DateTime? @db.Date
  license_issue_date       String?
  ceo_mobile               String?   @db.VarChar
  ceo_name                 String?   @db.VarChar
  data_entry_mobile        String?   @db.VarChar
  data_entry_name          String?   @db.VarChar
  data_entry_mail          String?   @db.VarChar
  created_at               DateTime? @db.Timestamp(6)
  updated_at               DateTime? @db.Timestamp(6)
  client_field             String?   @db.VarChar
  user_id                  String
  license_file             String?
  board_ofdec_file         String?
  chairman_name            String?   @db.VarChar
  chairman_mobile          String?   @db.VarChar
  qid                      Int?
}

model proposal_edit_request {
  id          String   @id
  detail      String
  user_id     String
  reviewer_id String
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)
  proposal_id String   @unique
  proposal    proposal @relation(fields: [proposal_id], references: [id], onDelete: Cascade)
  reviewer    user     @relation("proposal_edit_request_reviewer_idTouser", fields: [reviewer_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  user        user     @relation("proposal_edit_request_user_idTouser", fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

model proposal_asked_edit_request {
  id            String   @id
  notes         String   @db.VarChar
  sender_id     String
  sender_role   String   @db.VarChar
  proposal_id   String
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  status        String   @default("PENDING")
  supervisor_id String?
  proposal      proposal @relation(fields: [proposal_id], references: [id], onDelete: Cascade)
  sender        user     @relation("proposal_asked_edit_request_sender_idTouser", fields: [sender_id], references: [id], onDelete: Restrict,onUpdate: Restrict)
  supervisor    user?    @relation("proposal_asked_edit_request_supervisor_idTouser", fields: [supervisor_id], references: [id], onDelete: Restrict,onUpdate: Restrict)
}

model proposal_closing_report {
  id                      String    @id(map: "closing_report_request_pkey")
  proposal_id             String
  number_of_beneficiaries Int
  target_beneficiaries    String?    @db.VarChar // deprecated
  beneficiaries           ClosingReportBeneficiaries[]
  execution_place         String?    @db.VarChar // deprecated
  execution_places         ClosingReportExecutionPlaces[] 
  gender                  String?    @db.VarChar // deprecated
  genders                  ClosingReportGenders[] 
  project_duration        String    @db.VarChar
  number_project_duration Int       @default(0)
  project_repeated        String    @db.VarChar
  number_project_repeated Int       @default(0)
  number_of_volunteer     Int
  number_of_staff         Int
  attachments             Json
  images                  Json
  created_at              DateTime? @default(now()) @db.Timestamptz(6)
  updated_at              DateTime? @default(now()) @db.Timestamptz(6)
  proposal                proposal  @relation(fields: [proposal_id], references: [id], onDelete: Cascade, map: "closing_report_request_proposal_id_fkey")
}

model ClosingReportBeneficiaries {
    id String @id
    closing_report_id String
    closing_report proposal_closing_report @relation(fields: [closing_report_id], references: [id])
    selected_values String
    selected_numbers Int
    @@map("closing_report_beneficiaries")
}

model ClosingReportExecutionPlaces {
        id String @id
    closing_report_id String
    closing_report proposal_closing_report @relation(fields: [closing_report_id], references: [id])
    selected_values String
    selected_numbers Int
    @@map("closing_report_execution_places")
}

model ClosingReportGenders {
        id String @id
    closing_report_id String
    closing_report proposal_closing_report @relation(fields: [closing_report_id], references: [id])
    selected_values String
    selected_numbers Int
    @@map("closing_report_genders")
}



model user3 {
  id             String    @id
  employee_name  String?   @db.VarChar
  mobile_number  String?   @db.VarChar
  email          String    @db.VarChar
  updated_at     DateTime? @db.Date
  created_at     DateTime? @db.Date
  employee_path  String?   @db.VarChar
  last_login     DateTime? @db.Date
  uid            Int?
  status_id      String
  address        String?
  google_session String?
  is_online      String?
  fusionauth_id  String?
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model users_trf {
  uid              Int?
  name             String? @db.VarChar(50)
  pass             String? @db.VarChar(50)
  mail             String? @db.VarChar(50)
  mode             Int?
  sort             Int?
  threshold        Int?
  theme            String? @db.VarChar(50)
  signature        String? @db.VarChar(50)
  signature_format Int?
  created          BigInt?
  access           BigInt?
  login            BigInt?
  status           Int?
  timezone         String? @db.VarChar(50)
  language         String? @db.VarChar(50)
  picture          String? @db.VarChar(50)
  init             String? @db.VarChar(50)
  data             String? @db.VarChar(128)
  kind             Int?
  mob              BigInt?
  fid              Int?
  tmra_id          String? @db.VarChar(50)
  fusionauth_id    String?

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model tmp_client_proper {
  uid                   Int
  name                  String? @db.VarChar(60)
  pass                  String? @db.VarChar(32)
  mail                  String? @db.VarChar(64)
  mode                  Int
  sort                  Int?
  threshold             Int?
  theme                 String? @db.VarChar(255)
  signature             String? @db.VarChar(255)
  signature_format      Int     @db.SmallInt
  created               Int
  access                Int
  login                 Int
  status                Int
  timezone              String? @db.VarChar(8)
  language              String? @db.VarChar(12)
  picture               String? @db.VarChar(255)
  init                  String? @db.VarChar(64)
  data                  String?
  kind                  Int
  mob                   BigInt
  fid                   Int
  qid                   Int?
  nid                   Int?
  random                String? @db.VarChar(255)
  reg_name              String? @db.VarChar(255)
  reg_tax_1             Int?
  reg_tax_2             Int?
  reg_tel               BigInt?
  reg_fax               BigInt?
  reg_box               Int?
  reg_postal            Int?
  reg_site              String? @db.VarChar(255)
  reg_email             String? @db.VarChar(255)
  reg_bank_name         Int?
  reg_bank_account_name String? @db.VarChar(255)
  reg_bank_account_num  String? @db.VarChar(255)
  reg_bank_account_type Int?
  reg_area              Int?
  reg_city              Int?
  reg_center            Int?
  reg_center2           String? @db.VarChar(255)
  reg_twit              String?
  reg_face              String?
  reg_mob               BigInt?
  cont_mang_name        String? @db.VarChar(255)
  tmra_id               String? @db.VarChar(60)

  @@ignore
}

model client_data4 {
  id                       String    @id
  entity                   String?   @db.VarChar
  authority                String?   @db.VarChar
  headquarters             String?   @db.VarChar
  date_of_esthablistmen    DateTime? @db.Date
  num_of_beneficiaries     Int?
  num_of_employed_facility Int?
  governorate              String?
  region                   String?   @db.VarChar
  entity_mobile            String?   @db.VarChar
  center_administration    String?   @db.VarChar
  twitter_acount           String?   @db.VarChar
  phone                    String?   @db.VarChar
  website                  String?   @db.VarChar
  password                 String?   @db.VarChar
  license_number           String?   @db.VarChar
  license_expired          DateTime? @db.Date
  license_issue_date       String?
  ceo_mobile               String?   @db.VarChar
  ceo_name                 String?   @db.VarChar
  data_entry_mobile        String?   @db.VarChar
  data_entry_name          String?   @db.VarChar
  data_entry_mail          String?   @db.VarChar
  created_at               DateTime? @db.Timestamp(6)
  updated_at               DateTime? @db.Timestamp(6)
  client_field             String?   @db.VarChar
  user_id                  String
  license_file             String?
  board_ofdec_file         String?
  chairman_name            String?   @db.VarChar
  chairman_mobile          String?   @db.VarChar
  qid                      Int?
}

model bank_information3 {
  user_id             String
  bank_account_name   String?  @db.VarChar
  bank_account_number String?  @db.VarChar
  bank_name           String?  @db.VarChar
  proposal_id         String?
  id                  String   @id @default("")
  card_image          String?
  is_deleted          Boolean? @default(false)
}

model proposal2 {
  id                                  String  @id(map: "proposal2_pkey1")
  project_name                        String
  submitter_user_id                   String
  created_at                          String
  project_track                       String?
  project_idea                        String?
  project_implement_date              String?
  project_location                    String?
  num_ofproject_binicficiaries        String?
  project_goals                       String?
  project_outputs                     String?
  project_strengths                   String?
  project_risks                       String?
  pm_name                             String?
  pm_email                            String?
  pm_mobile                           String?
  governorate                         String?
  region                              String?
  amount_required_fsupport            String?
  need_consultant                     String? @default("false")
  step                                String? @default("ZERO")
  whole_budget                        String?
  state                               String? @default("MODERATOR")
  inner_status                        String? @default("CREATED_BY_CLIENT")
  previously_add_bank                 String?
  outter_status                       String? @default("ONGOING")
  project_beneficiaries               String?
  number_of_payments                  String?
  finance_id                          String?
  cashier_id                          String?
  project_manager_id                  String?
  supervisor_id                       String?
  project_attachments                 String?
  letter_ofsupport_req                String?
  on_revision                         String? @default("false")
  on_consulting                       String? @default("false")
  proposal_bank_id                    String?
  partial_support_amount              String?
  project_beneficiaries_specific_type String?
  track_id                            String?
  updated_at                          String? @default("now()")
  clasification_field                 String?
  closing_report                      String?
  support_type                        String?
  does_an_agreement                   String?
  need_picture                        String?
  support_outputs                     String?
  clause                              String?
  vat                                 String?
  vat_percentage                      String?
  inclu_or_exclu                      String?
  fsupport_by_supervisor              String?
  number_of_payments_by_supervisor    String?
  chairman_of_board_of_directors      String?
  been_supported_before               String?
  most_clents_projects                String?
  added_value                         String?
  reasons_to_accept                   String?
  target_group_num                    String?
  target_group_type                   String?
  target_group_age                    String?
  been_made_before                    String?
  remote_or_insite                    String?
  old_inner_status                    String?
  support_goal_id                     String?
  accreditation_type_id               String?
  execution_time                      String?
  project_number                      Int?
  oid                                 Int?
}

model user_role2 {
  id           String @id @db.Uuid
  user_id      String
  user_type_id String
}

model dept_1 {
  id              String  @id
  proj_id         String?
  dept_1_path     String?
  dept_1_tax_1    String?
  dept_1_tax_2    String?
  dept_1_tax_3    String?
  dept_1_tax_4    String?
  dept_1_tax_uid  String?
  dept_1_tax_uid2 String?
  dept_1_op       String?
  dept_1_notes    String?
}

model dept_1001 {
  id              String  @id
  proj_id         String?
  dept_1001_op    String?
  dept_1001_notes String?
}

model dept_1002 {
  id              String  @id
  proj_id         String?
  dept_1002_op    String?
  dept_1002_notes String?
}

model dept_2 {
  id               String  @id
  proj_id          String?
  dept_2_report    String?
  dept_2_notify    String?
  dept_2_agree     String?
  dept_2_op        String?
  dept_2_req       String?
  dept_2_pay_times String?
  dept_2_notes     String?
  dept_2_tax_1     String?
  dept_2_tax_2     String?
  dept_2_tax_3     String?
  dept_2_tax_4     String?
  dept_2_reject_st String?
  dept_2_notes1    String?
  dept_2_notes2    String?
  dept_2_notes3    String?
}

model dept_21 {
  id                String  @id
  proj_id           String?
  dept_21_report    String?
  dept_21_notify    String?
  dept_21_agree     String?
  dept_21_op        String?
  dept_21_req       String?
  dept_21_pay_times String?
  dept_21_notes     String?
  dept_21_tax_1     String?
  dept_21_tax_2     String?
  dept_21_tax_3     String?
  dept_21_tax_4     String?
  dept_21_reject_st String?
  dept_21_notes1    String?
  dept_21_notes2    String?
  dept_21_notes3    String?
}

model dept_22 {
  id                String  @id
  proj_id           String?
  dept_22_report    String?
  dept_22_notify    String?
  dept_22_agree     String?
  dept_22_op        String?
  dept_22_req       String?
  dept_22_pay_times String?
  dept_22_notes     String?
  dept_22_tax_1     String?
  dept_22_tax_2     String?
  dept_22_tax_3     String?
  dept_22_tax_4     String?
  dept_22_reject_st String?
  dept_22_notes1    String?
  dept_22_notes2    String?
  dept_22_notes3    String?
}

model dept_23 {
  id                String  @id
  proj_id           String?
  dept_23_report    String?
  dept_23_notify    String?
  dept_23_agree     String?
  dept_23_op        String?
  dept_23_req       String?
  dept_23_pay_times String?
  dept_23_notes     String?
  dept_23_tax_1     String?
  dept_23_tax_2     String?
  dept_23_tax_3     String?
  dept_23_tax_4     String?
  dept_23_reject_st String?
  dept_23_notes1    String?
  dept_23_notes2    String?
  dept_23_notes3    String?
}

model dept_3 {
  id               String  @id
  proj_id          String?
  dept_3_report    String?
  dept_3_notify    String?
  dept_3_agree     String?
  dept_3_op        String?
  dept_3_req       String?
  dept_3_pay_times String?
  dept_3_notes     String?
  dept_3_notes3    String?
}

model dept_4 {
  id               String  @id
  proj_id          String?
  dept_4_report    String?
  dept_4_notify    String?
  dept_4_agree     String?
  dept_4_op        String?
  dept_4_req       String?
  dept_4_pay_times String?
  dept_4_notes     String?
  dept_4_notes3    String?
}

model dept_5 {
  id               String  @id
  proj_id          String?
  dept_5_report    String?
  dept_5_notify    String?
  dept_5_agree     String?
  dept_5_op        String?
  dept_5_req       String?
  dept_5_pay_times String?
  dept_5_notes     String?
}

model dept_6 {
  id               String  @id
  proj_id          String?
  dept_6_report    String?
  dept_6_notify    String?
  dept_6_agree     String?
  dept_6_op        String?
  dept_6_req       String?
  dept_6_pay_times String?
  dept_6_notes     String?
}

model dept_61 {
  id              String  @id
  proj_id         String?
  dept_61_perm    String?
  dept_61_created String?
}

model dept_7 {
  id             String  @id
  proj_id        String?
  dept_7_perm    String?
  dept_7_created String?
}

model dept_71 {
  id          String  @id
  proj_id     String?
  dept_71_st  String?
  dept_71_pay String?
}

model dept_72 {
  id             String  @id
  proj_id        String?
  dept_72_st     String?
  dept_72_st_fid String?
  pay            String?
}

model dept_75 {
  id            String  @id
  proj_id       String?
  dept_75_notes String?
}

model dept_8 {
  id             String  @id
  proj_id        String?
  dept_8_perm    String?
  dept_8_created String?
}

model dept_9 {
  id             String  @id
  proj_id        String?
  dept_9_perm    String?
  dept_9_created String?
}

model dept_91 {
  id              String  @id
  proj_id         String?
  dept_91_num     String?
  dept_91_num_fid String?
  dept_91_date    String?
  pay             String?
}

model file_manager2 {
  id                  String   @id
  name                String   @db.VarChar
  size                Decimal  @db.Decimal
  mimetype            String   @db.VarChar
  url                 String?  @db.VarChar
  table_name          String?  @db.VarChar
  column_name         String?  @db.VarChar
  user_id             String?
  is_deleted          Boolean  @default(false)
  created_at          DateTime @default(now()) @db.Timestamptz(6)
  updated_at          DateTime @default(now()) @db.Timestamptz(6)
  proposal_id         String?
  bank_information_id String?
  fid                 String?
}

model file_manager3 {
  id                  String   @id
  name                String   @db.VarChar
  size                Decimal  @db.Decimal
  mimetype            String   @db.VarChar
  url                 String?  @db.VarChar
  table_name          String?  @db.VarChar
  column_name         String?  @db.VarChar
  user_id             String?
  is_deleted          Boolean  @default(false)
  created_at          DateTime @default(now()) @db.Timestamptz(6)
  updated_at          DateTime @default(now()) @db.Timestamptz(6)
  proposal_id         String?
  bank_information_id String?
  fid                 String?
}

model file_manager4 {
  id                  String   @id
  name                String   @db.VarChar
  size                Decimal  @db.Decimal
  mimetype            String   @db.VarChar
  url                 String?  @db.VarChar
  table_name          String?  @db.VarChar
  column_name         String?  @db.VarChar
  user_id             String?
  is_deleted          Boolean  @default(false)
  created_at          DateTime @default(now()) @db.Timestamptz(6)
  updated_at          DateTime @default(now()) @db.Timestamptz(6)
  proposal_id         String?
  bank_information_id String?
  fid                 String?
  source              String?
}

model file_manager5 {
  id                  String   @id
  name                String   @db.VarChar
  size                Decimal  @db.Decimal
  mimetype            String   @db.VarChar
  url                 String?  @db.VarChar
  table_name          String?  @db.VarChar
  column_name         String?  @db.VarChar
  user_id             String?
  is_deleted          Boolean  @default(false)
  created_at          DateTime @default(now()) @db.Timestamptz(6)
  updated_at          DateTime @default(now()) @db.Timestamptz(6)
  proposal_id         String?
  bank_information_id String?
  fid                 Int?
  source              String?
}

model file_manager6 {
  id                  String   @id
  name                String   @db.VarChar
  size                Decimal  @db.Decimal
  mimetype            String   @db.VarChar
  url                 String?  @db.VarChar
  table_name          String?  @db.VarChar
  column_name         String?  @db.VarChar
  user_id             String?
  is_deleted          Boolean  @default(false)
  created_at          DateTime @default(now()) @db.Timestamptz(6)
  updated_at          DateTime @default(now()) @db.Timestamptz(6)
  proposal_id         String?
  bank_information_id String?
  fid                 Int?
  source              String?
  path1               String?
  path2               String?
  path3               String?
  path4               String?
}

model files {
  fid       String  @id
  uid       String?
  filename  String?
  filepath  String?
  filemime  String?
  filesize  String?
  status    String?
  timestamp String?
  length    String?
  views     String?
  downloads String?
}

model proj_attach {
  id       String  @id
  proj_id  String?
  created  String?
  name     String?
  fid      String?
  uid      String?
  is_agree String?
}

model proj_money_paid {
  id            String  @id
  proj_id       String?
  pay           String?
  state         String?
  money         String?
  mdate         String?
  report        String?
  rdate         String?
  perm          String?
  paid          String?
  paid_acc      String?
  report_acc    String?
  date_paid     String?
  date_paid_acc String?
  reportTxt     String?
}

model proj_owners {
  id      String  @id
  uid     String?
  proj_id String?
  state   String?
  rate    String?
  value1  String?
  value2  String?
  value3  String?
}

model proj_req {
  id                           String  @id
  uid                          String
  year                         String
  proj_req_state               String?
  created                      String
  proj_req_proj                String?
  proj_req_tax_1               String
  proj_req_tax_2               String
  proj_req_tax_3               String
  proj_req_tax_4               String
  proj_req_teaser              String?
  proj_req_time                String?
  proj_req_output              String?
  proj_req_place               String?
  proj_req_date                String?
  proj_req_target              String
  proj_req_target2             String
  proj_req_money_req           String
  proj_req_money_req_fid       String
  proj_req_money_req_fid2      String
  proj_req_money_req_fid3      String
  proj_req_proj_manger         String?
  proj_req_proj_manger_mob     String?
  proj_req_proj_manger_mail    String?
  h_proj_req_bank              String?
  h_proj_req_bank_name         String?
  h_proj_req_bank_account_name String?
  h_proj_req_bank_account_num  String?
}

model proj_track {
  id      String  @id
  proj_id String?
  created String?
  leaved  String?
  sec_in  String?
  sec_out String?
  sec_uid String?
  state   String?
  ref_id  String?
  notify  String?
  notifyM String?
}

model proposal3 {
  id                                  String  @id(map: "proposal2_pkey")
  project_name                        String
  submitter_user_id                   String
  created_at                          String
  project_track                       String?
  project_idea                        String?
  project_implement_date              String?
  project_location                    String?
  num_ofproject_binicficiaries        String?
  project_goals                       String?
  project_outputs                     String?
  project_strengths                   String?
  project_risks                       String?
  pm_name                             String?
  pm_email                            String?
  pm_mobile                           String?
  governorate                         String?
  region                              String?
  amount_required_fsupport            String?
  need_consultant                     String? @default("false")
  step                                String? @default("ZERO")
  whole_budget                        String?
  state                               String? @default("MODERATOR")
  inner_status                        String? @default("CREATED_BY_CLIENT")
  previously_add_bank                 String?
  outter_status                       String? @default("ONGOING")
  project_beneficiaries               String?
  number_of_payments                  String?
  finance_id                          String?
  cashier_id                          String?
  project_manager_id                  String?
  supervisor_id                       String?
  project_attachments                 String?
  letter_ofsupport_req                String?
  on_revision                         String? @default("false")
  on_consulting                       String? @default("false")
  proposal_bank_id                    String?
  partial_support_amount              String?
  project_beneficiaries_specific_type String?
  track_id                            String?
  updated_at                          String? @default("now()")
  clasification_field                 String?
  closing_report                      String?
  support_type                        String?
  does_an_agreement                   String?
  need_picture                        String?
  support_outputs                     String?
  clause                              String?
  vat                                 String?
  vat_percentage                      String?
  inclu_or_exclu                      String?
  fsupport_by_supervisor              String?
  number_of_payments_by_supervisor    String?
  chairman_of_board_of_directors      String?
  been_supported_before               String?
  most_clents_projects                String?
  added_value                         String?
  reasons_to_accept                   String?
  target_group_num                    String?
  target_group_type                   String?
  target_group_age                    String?
  been_made_before                    String?
  remote_or_insite                    String?
  old_inner_status                    String?
  support_goal_id                     String?
  accreditation_type_id               String?
  execution_time                      String?
  project_number                      Int     @default(autoincrement())
  oid                                 Int?
}

model SmsGateway {
    id  String @id
    api_key String
    user_sender String
    username    String
    is_active   Boolean @default(false)
    is_default Boolean @default(false)
    is_deleted  Boolean @default(false)
    created_at          DateTime @default(now()) @db.Timestamptz(6)
  updated_at          DateTime @default(now()) @db.Timestamptz(6)
    @@map("sms_gateways")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model type_reg {
  nid              Int?
  cont_mang_name   String? @db.VarChar
  cont_mang_mob    BigInt?
  cont_mang_mail   String? @db.VarChar
  cont_client_name String? @db.VarChar
  cont_client_mob  BigInt?
  cont_client_mail String? @db.VarChar
  cont_state       Int?
  cont_proj_result Int?
  cont_notes       String? @db.VarChar
  cont_employ_uid  Int?
  cont_given_uid   Int?
  cont_mang_name2  String? @db.VarChar
  cont_mang_mob2   BigInt?

  @@ignore
}

model type_reg_cont {
  nid              String  @id
  cont_mang_name   String?
  cont_mang_mob    String?
  cont_mang_mail   String?
  cont_client_name String?
  cont_client_mob  String?
  cont_client_mail String?
  cont_state       String?
  cont_proj_result String?
  cont_notes       String?
  cont_employ_uid  String?
  cont_given_uid   String?
  cont_mang_name2  String?
  cont_mang_mob2   String?
}

model user4 {
  id             String    @id
  employee_name  String?   @db.VarChar
  mobile_number  String?   @db.VarChar
  email          String    @db.VarChar
  updated_at     DateTime? @db.Date
  created_at     DateTime? @db.Date
  employee_path  String?   @db.VarChar
  last_login     DateTime? @db.Date
  status_id      String
  address        String?
  google_session String?
  is_online      String?
  fusionauth_id  String?
  entity         String?
}

model backup_client_data_latest {
  id                       String    @id
  entity                   String?   @db.VarChar
  authority                String?   @db.VarChar
  headquarters             String?   @db.VarChar
  date_of_esthablistmen    DateTime? @db.Date
  num_of_beneficiaries     Int?
  num_of_employed_facility Int?
  governorate              String?
  region                   String?   @db.VarChar
  entity_mobile            String?   @db.VarChar
  center_administration    String?   @db.VarChar
  twitter_acount           String?   @db.VarChar
  phone                    String?   @db.VarChar
  website                  String?   @db.VarChar
  password                 String?   @db.VarChar
  license_number           String?   @db.VarChar
  license_expired          DateTime? @db.Date
  license_issue_date       DateTime? @db.Date
  ceo_mobile               String?   @db.VarChar
  ceo_name                 String?   @db.VarChar
  data_entry_mobile        String?   @db.VarChar
  data_entry_name          String?   @db.VarChar
  data_entry_mail          String?   @db.VarChar
  created_at               DateTime? @db.Timestamp(6)
  updated_at               DateTime? @db.Timestamp(6)
  client_field             String?   @db.VarChar
  user_id                  String?
  license_file             Json?
  board_ofdec_file         Json?
  chairman_name            String?   @db.VarChar
  chairman_mobile          String?   @db.VarChar
  qid                      Int?
}


model Region {
    region_id  String  @id
    name String
    is_deleted Boolean @default(false)
    governorate Governorate[]
    client_data client_data[]
    proposal    proposal[]

    @@map("regions")
}
model Governorate {
    governorate_id  String  @id
    name String
    region_id    String
    region_detail Region @relation(fields: [region_id], references: [region_id])
    is_deleted Boolean @default(false)

    client_data client_data[]
    proposal    proposal[]
    @@map("governorates")
}