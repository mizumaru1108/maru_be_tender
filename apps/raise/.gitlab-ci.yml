variables:
  DEVSECOPS_PROJECT_ID: 26870237

# ------------------------------------- build ------------------------------------------

'build tmra-raise':
  stage: build
  needs: []
  script:
    # - cp src/configuration.${APP_ENV}.ts src/configuration.ts
    - cd apps/raise
    - yarn workspaces focus --production
    # ensure Dockerfile COPY not failed: https://stackoverflow.com/a/70097693/122441
    - mkdir -vp node_modules
    - yarn build
    # - ls -F dist/
    - '[ -f "dist/main.js" ] || { ls -F dist/; echo "Error: Build was invalid. apps/raise/dist/main.js must exist after build! Hint: Make sure you only use src/ folder."; exit 1; }'
  artifacts:
    paths:
      - package.json
      - .pnp.*
      - .yarnrc.yml
      - .yarn/cache/
      - .yarn/unplugged/
      # - apps/pwa/dist/
      - apps/raise/dist/
      - node_modules/
      - apps/raise/node_modules/
      # - next-i18next.config.js
      # - next.config.js
      # - public/
      # - .next/
    expire_in: 1 week
  # environment:
  #   name: review/$CI_COMMIT_REF_SLUG
  rules:
    - if: '($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event")'
      changes:
        - 'apps/raise/**/*'
    # You can manually trigger the pipeline with APP_NAMES=tmra-raise
    - if: '$APP_NAMES =~ /\btmra-raise\b/'

# ------------------------------------- publish ------------------------------------------

'publish tmra-raise to non-prod':
  stage: publish
  needs: ['prepare version', 'build tmra-raise']
  variables:
    APP_NAME: tmra-raise
  cache: []
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  script:
    # see https://github.com/GoogleContainerTools/kaniko/issues/1227
    # https://docs.gitlab.com/ee/ci/docker/using_kaniko.html
    - mkdir -p /kaniko/.docker
    # Requires AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY in https://gitlab.com/lovia/lovia-billing/-/settings/ci_cd > Variables
    # - echo "{\"credHelpers\":{\"${DOCKER_REGISTRY}\":\"ecr-login\"}, \"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --cache=true --cache-repo="${CI_REGISTRY_IMAGE}"
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/apps/raise/Dockerfile"
      --build-arg=APP_VERSION="${APP_VERSION}"
      --destination "${CI_REGISTRY_IMAGE}/${APP_NAME}:${APP_VERSION}"
      --destination "${CI_REGISTRY_IMAGE}/${APP_NAME}:${APP_ENV}"
  rules:
    - if: '$CI_COMMIT_BRANCH == "stack/dev" && ($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event")'
      changes:
        - 'apps/raise/**/*'
    - if: '$CI_COMMIT_BRANCH == "stack/dev" && $APP_NAMES =~ /\btmra-raise\b/'
    - if: '$CI_COMMIT_BRANCH == "stack/qc" && ($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event")'
      changes:
        - 'apps/raise/**/*'
    - if: '$CI_COMMIT_BRANCH == "stack/qc" && $APP_NAMES =~ /\btmra-raise\b/'
    - if: '$CI_COMMIT_BRANCH == "stack/staging" && ($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event")'
      changes:
        - 'apps/raise/**/*'
    - if: '$CI_COMMIT_BRANCH == "stack/staging" && $APP_NAMES =~ /\btmra-raise\b/'

'publish tmra-raise to prod':
  stage: publish
  needs: ['prepare version', 'build tmra-raise']
  variables:
    APP_NAME: tmra-raise
  cache: []
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  script:
    # see https://github.com/GoogleContainerTools/kaniko/issues/1227
    # https://docs.gitlab.com/ee/ci/docker/using_kaniko.html
    - mkdir -p /kaniko/.docker
    # Requires AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY in https://gitlab.com/lovia/lovia-billing/-/settings/ci_cd > Variables
    # - echo "{\"credHelpers\":{\"${DOCKER_REGISTRY}\":\"ecr-login\"}, \"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --cache=true --cache-repo="${CI_REGISTRY_IMAGE}"
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/apps/raise/Dockerfile"
      --build-arg=APP_VERSION="${APP_VERSION}"
      --destination "${CI_REGISTRY_IMAGE}/${APP_NAME}:${APP_VERSION}"
      --destination "${CI_REGISTRY_IMAGE}/${APP_NAME}:${APP_ENV}"
      --destination "${CI_REGISTRY_IMAGE}/${APP_NAME}:latest"
  rules:
    - if: '$CI_COMMIT_BRANCH == "stack/prod" && ($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event")'
      changes:
        - 'apps/raise/**/*'
    - if: '$CI_COMMIT_BRANCH == "stack/prod" && $APP_NAMES =~ /\btmra-raise\b/'

# ------------------------------------- trigger-deploy ------------------------------------------

'trigger deploy tmra-raise to dev':
  stage: deploy
  needs:
    - job: prepare version
    - job: build tmra-raise
      artifacts: false
    - job: publish tmra-raise to non-prod
  variables:
    APP_NAME: tmra-raise
    APP_ENV: dev
  cache: []
  image: node:lts
  script:
    - echo "Deploying '$APP_NAME' version '$APP_VERSION' to environment '$APP_ENV' ..."
    - >-
      curl --fail --request POST
      --form token=$CI_JOB_TOKEN
      --form ref=main
      --form "variables[APP_NAMES]=$APP_NAME"
      --form "variables[APP_ENV]=$APP_ENV"
      --form "variables[APP_VERSION]=$APP_VERSION"
      "https://gitlab.com/api/v4/projects/$DEVSECOPS_PROJECT_ID/trigger/pipeline"
  environment:
    name: $APP_NAME-$APP_ENV
    url: https://api-${APP_ENV}.tmra.io/v2/raise
  rules:
    - if: '$CI_COMMIT_BRANCH == "stack/dev" && ($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event")'
      changes:
        - 'apps/raise/**/*'
    - if: '$CI_COMMIT_BRANCH == "stack/dev" && $APP_NAMES =~ /\btmra-raise\b/'

'trigger deploy tmra-raise to qc':
  stage: deploy
  needs:
    - job: prepare version
    - job: build tmra-raise
      artifacts: false
    - job: publish tmra-raise to non-prod
  variables:
    APP_NAME: tmra-raise
    APP_ENV: qc
  cache: []
  image: node:lts
  script:
    - echo "Deploying '$APP_NAME' version '$APP_VERSION' to environment '$APP_ENV' ..."
    - >-
      curl --fail --request POST
      --form token=$CI_JOB_TOKEN
      --form ref=main
      --form "variables[APP_NAMES]=$APP_NAME"
      --form "variables[APP_ENV]=$APP_ENV"
      --form "variables[APP_VERSION]=$APP_VERSION"
      "https://gitlab.com/api/v4/projects/$DEVSECOPS_PROJECT_ID/trigger/pipeline"
  environment:
    name: $APP_NAME-$APP_ENV
    url: https://api-${APP_ENV}.tmra.io/v2/raise
  rules:
    - if: '$CI_COMMIT_BRANCH == "stack/qc" && ($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event")'
      changes:
        - 'apps/raise/**/*'
    - if: '$CI_COMMIT_BRANCH == "stack/qc" && $APP_NAMES =~ /\btmra-raise\b/'

'trigger deploy tmra-raise to staging':
  stage: deploy
  needs:
    - job: prepare version
    - job: build tmra-raise
      artifacts: false
    - job: publish tmra-raise to non-prod
  variables:
    APP_NAME: tmra-raise
    APP_ENV: staging
  cache: []
  image: node:lts
  script:
    - echo "Deploying '$APP_NAME' version '$APP_VERSION' to environment '$APP_ENV' ..."
    - >-
      curl --fail --request POST
      --form token=$CI_JOB_TOKEN
      --form ref=main
      --form "variables[APP_NAMES]=$APP_NAME"
      --form "variables[APP_ENV]=$APP_ENV"
      --form "variables[APP_VERSION]=$APP_VERSION"
      "https://gitlab.com/api/v4/projects/$DEVSECOPS_PROJECT_ID/trigger/pipeline"
  environment:
    name: $APP_NAME-$APP_ENV
    url: https://api-${APP_ENV}.tmra.io/v2/raise
  rules:
    - if: '$CI_COMMIT_BRANCH == "stack/staging" && ($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event")'
      changes:
        - 'apps/raise/**/*'
    - if: '$CI_COMMIT_BRANCH == "stack/staging" && $APP_NAMES =~ /\btmra-raise\b/'

'trigger deploy tmra-raise to prod':
  stage: deploy
  needs:
    - job: prepare version
    - job: build tmra-raise
      artifacts: false
    - job: publish tmra-raise to prod
  variables:
    APP_NAME: tmra-raise
    APP_ENV: prod
  cache: []
  image: node:lts
  script:
    - echo "Deploying '$APP_NAME' version '$APP_VERSION' to environment '$APP_ENV' ..."
    - >-
      curl --fail --request POST
      --form token=$CI_JOB_TOKEN
      --form ref=main
      --form "variables[APP_NAMES]=$APP_NAME"
      --form "variables[APP_ENV]=$APP_ENV"
      --form "variables[APP_VERSION]=$APP_VERSION"
      "https://gitlab.com/api/v4/projects/$DEVSECOPS_PROJECT_ID/trigger/pipeline"
  environment:
    name: $APP_NAME-$APP_ENV
    url: https://api.tmra.io/v2/raise
  rules:
    - if: '$CI_COMMIT_BRANCH == "stack/prod" && ($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event")'
      changes:
        - 'apps/raise/**/*'
    - if: '$CI_COMMIT_BRANCH == "stack/prod" && $APP_NAMES =~ /\btmra-raise\b/'

'trigger deploy tmra-tender-pwa to dev':
  stage: deploy
  needs:
    - job: prepare version
    - job: build tmra-tender-pwa dev
      artifacts: false
    - job: publish tmra-tender-pwa to dev
  variables:
    APP_NAME: tmra-tender-pwa
    APP_ENV: dev
  cache: []
  image: node:lts
  script:
    - echo "Deploying '$APP_NAME' version '$APP_VERSION' to environment '$APP_ENV' ..."
    - >-
      curl --fail --request POST
      --form token=$CI_JOB_TOKEN
      --form ref=main
      --form "variables[APP_NAMES]=$APP_NAME"
      --form "variables[APP_ENV]=$APP_ENV"
      --form "variables[APP_VERSION]=$APP_VERSION"
      "https://gitlab.com/api/v4/projects/$DEVSECOPS_PROJECT_ID/trigger/pipeline"
  environment:
    name: $APP_NAME-$APP_ENV
    url: https://app-${APP_ENV}.tmra.io/
  rules:
    - if: '$CI_COMMIT_BRANCH == "stack/dev" && ($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event")'
      changes:
        - 'apps/pwa/**/*'
    - if: '$CI_COMMIT_BRANCH == "stack/dev" && $APP_NAMES =~ /\b${APP_NAME}\b/'
