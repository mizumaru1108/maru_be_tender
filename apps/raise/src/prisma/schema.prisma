generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model bank_information {
  user_id                                              String
  bank_account_name                                    String?                    @db.VarChar
  bank_account_number                                  String?                    @db.VarChar
  bank_name                                            String?                    @db.VarChar
  proposal_id                                          String?
  id                                                   String                     @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  card_image                                           Json?
  proposal                                             proposal?                  @relation(fields: [proposal_id], references: [id], onDelete: Cascade)
  user                                                 user                       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  proposal_bank_informationToproposal_proposal_bank_id proposal[]                 @relation("bank_informationToproposal_proposal_bank_id")
  propsal_bank_information                             propsal_bank_information[]
}

model client_data {
  id                       String       @id(map: "users_pkey")
  entity                   String?      @db.VarChar
  authority                String?      @db.VarChar
  headquarters             String?      @db.VarChar
  date_of_esthablistmen    DateTime?    @db.Date
  num_of_beneficiaries     Int?
  num_of_employed_facility Int?
  governorate              String?
  region                   String?      @db.VarChar
  entity_mobile            String?      @db.VarChar
  center_administration    String?      @db.VarChar
  twitter_acount           String?      @db.VarChar
  phone                    String?      @db.VarChar
  website                  String?      @db.VarChar
  password                 String?      @db.VarChar
  license_number           String       @db.VarChar
  license_expired          DateTime?    @db.Date
  license_issue_date       DateTime?    @db.Date
  ceo_mobile               String?      @db.VarChar
  ceo_name                 String?      @db.VarChar
  data_entry_mobile        String?      @db.VarChar
  data_entry_name          String?      @db.VarChar
  data_entry_mail          String?      @db.VarChar
  created_at               DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at               DateTime?    @default(now()) @db.Timestamptz(6)
  client_field             String?      @db.VarChar
  user_id                  String       @unique
  vat                      Boolean?
  license_file             Json?
  board_ofdec_file         Json?
  user                     user         @relation("client_data_user_idTouser", fields: [user_id], references: [id], onDelete: Cascade)
  client_log               client_log[]
}

model employees_permissions {
  organization_id                    String?
  user_id                            String
  director_of_baptisms_department    Boolean? @default(false)
  director_of_initiatives_department Boolean? @default(false)
  director_of_mosque_administration  Boolean? @default(false)
  director_of_charity_department     Boolean? @default(false)
  president                          Boolean? @default(false)
  reports                            Boolean? @default(false)
  sorting_officer                    Boolean? @default(false)
  relationship_officer               Boolean? @default(false)
  treasurer                          Boolean? @default(false)
  acountant                          Boolean? @default(false)
  edit_drop_down_menus               Boolean? @default(false)
  entering_the_anual_plan            Boolean? @default(false)
  user_and_permision                 Boolean? @default(false)
  correspondence                     Boolean? @default(false)
  advisors_committee                 Boolean? @default(false)
  project_supervisor                 Boolean? @default(false)
  id                                 String   @id @unique(map: "employees_permissions_idd_key") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user                               user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict)
}

model inquiry_type {
  id         String       @id
  tittle     String
  contact_us contact_us[]
}

model message {
  message_id       String     @id
  room_id          String?
  message_owner_id String?
  content          String?
  read_status      Boolean?
  created_at       DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?  @default(now()) @db.Timestamptz(6)
  user             user?      @relation(fields: [message_owner_id], references: [id], onDelete: Cascade)
  room_chat        room_chat? @relation(fields: [room_id], references: [room_id], onDelete: NoAction, onUpdate: NoAction)
}

model organization {
  id           String @id
  organization String @db.Char(1)
}

model payment {
  id                 String          @id
  payment_amount     Decimal?        @db.Decimal
  proposal_id        String
  payment_date       DateTime?       @db.Date
  status             String?         @default("SET_BY_SUPERVISOR")
  number_of_payments Decimal?        @db.Decimal
  order              Decimal?        @db.Decimal
  created_at         DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?       @default(now()) @db.Timestamptz(6)
  proposal           proposal        @relation(fields: [proposal_id], references: [id], onDelete: Cascade)
  payment_status     payment_status? @relation(fields: [status], references: [id], onDelete: NoAction, onUpdate: NoAction)
  cheque             cheque[]
}

model proposal {
  id                                                           String                     @id
  project_name                                                 String                     @db.VarChar
  submitter_user_id                                            String
  created_at                                                   DateTime                   @default(now()) @db.Timestamptz(6)
  updated_at                                                   DateTime                   @default(now()) @db.Timestamptz(6)
  project_track                                                String                     @default("DEFAULT_TRACK")
  project_idea                                                 String?
  project_implement_date                                       DateTime?                  @db.Date
  project_location                                             String?
  execution_time                                               String?                    @db.VarChar
  num_ofproject_binicficiaries                                 Int?
  project_goals                                                String?
  project_outputs                                              String?
  project_strengths                                            String?
  project_risks                                                String?
  pm_name                                                      String?                    @db.VarChar
  pm_email                                                     String?                    @db.VarChar
  pm_mobile                                                    String?                    @db.VarChar
  governorate                                                  String?
  region                                                       String?                    @db.VarChar
  amount_required_fsupport                                     Decimal?                   @db.Decimal
  need_consultant                                              Boolean?                   @default(false)
  step                                                         String?                    @default("ZERO")
  whole_budget                                                 Decimal?                   @db.Decimal
  state                                                        String?                    @default("MODERATOR")
  inner_status                                                 String?                    @default("CREATED_BY_CLIENT")
  previously_add_bank                                          String[]
  outter_status                                                String?                    @default("PENDING")
  project_beneficiaries                                        String?                    @db.VarChar
  number_of_payments                                           Decimal?                   @db.Decimal
  finance_id                                                   String?                    @default("null")
  cashier_id                                                   String?                    @default("null")
  project_manager_id                                           String?                    @default("null")
  supervisor_id                                                String?                    @default("null")
  project_attachments                                          Json?
  letter_ofsupport_req                                         Json?
  on_revision                                                  Boolean?                   @default(false)
  on_consulting                                                Boolean?                   @default(false)
  proposal_bank_id                                             String?                    @db.Uuid
  partial_support_amount                                       Decimal?                   @db.Decimal
  project_beneficiaries_specific_type                          String?
  proposal_beneficiaries                                       proposal_beneficiaries?    @relation(fields: [project_beneficiaries], references: [id], onDelete: Cascade)
  project_tracks                                               project_tracks             @relation(fields: [project_track], references: [id], onUpdate: Restrict, map: "proposal_project_kind_id_fkey")
  bank_information_bank_informationToproposal_proposal_bank_id bank_information?          @relation("bank_informationToproposal_proposal_bank_id", fields: [proposal_bank_id], references: [id], onDelete: Cascade)
  proposal_request                                             proposal_request?          @relation(fields: [outter_status], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "proposal_requested_fkey")
  user_type                                                    user_type?                 @relation(fields: [state], references: [id], onDelete: NoAction, onUpdate: NoAction)
  proposal_status                                              proposal_status?           @relation(fields: [inner_status], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "proposal_status_fkey")
  proposal_step                                                proposal_step?             @relation(fields: [step], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                                                         user                       @relation(fields: [submitter_user_id], references: [id], onDelete: Cascade)
  bank_information                                             bank_information[]
  consultant_form                                              consultant_form?
  consultation_commite                                         consultation_commite[]
  payment                                                      payment[]
  proposal_assign                                              proposal_assign[]
  proposal_comment                                             proposal_comment[]
  proposal_follow_up                                           proposal_follow_up[]
  proposal_item_budget                                         proposal_item_budget[]
  proposal_log                                                 proposal_log[]
  propsal_bank_information                                     propsal_bank_information[]
  supervisor                                                   supervisor[]
}

model proposal_comment {
  id          String    @id @unique
  proposal_id String
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  comment     String?
  user_id     String?
  proposal    proposal  @relation(fields: [proposal_id], references: [id], onUpdate: Restrict)
}

model proposal_item_budget {
  id          String   @id(map: "detail_project_budget_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  amount      Decimal  @db.Decimal
  explanation String
  clause      String   @db.Char(255)
  proposal_id String
  proposal    proposal @relation(fields: [proposal_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "detail_project_budget_proposal_id_fkey")
}

model proposal_log {
  id               String           @id
  proposal_id      String
  created_at       DateTime         @default(now()) @db.Timestamptz(6)
  updated_at       DateTime         @default(now()) @db.Timestamptz(6)
  reviewer_id      String
  inner_status     String?
  state            String
  client_user_id   String
  moderators       String?          @db.Char
  path             String?          @db.Char
  notes            String?
  procedures       String?
  send_amandement  Json?
  outter_status    String?
  project_kind     String?
  user_type        user_type        @relation(fields: [state], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "proposal_log_assign_fkey")
  client_user_data user             @relation("proposal_log_client_user_idTouser", fields: [client_user_id], references: [id], onDelete: Cascade)
  proposal_state   proposal_state?  @relation(fields: [outter_status], references: [id], onDelete: NoAction, onUpdate: NoAction)
  track            project_tracks?  @relation(fields: [project_kind], references: [id], onDelete: NoAction, onUpdate: NoAction)
  proposal         proposal         @relation(fields: [proposal_id], references: [id], onDelete: Cascade)
  proposal_status  proposal_status? @relation(fields: [inner_status], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "proposal_log_status_fkey")
  reviewer         user             @relation(fields: [reviewer_id], references: [id], onUpdate: Restrict, map: "proposal_log_user_id_fkey")
}

model proposal_state {
  id           String         @id
  title        String         @unique
  proposal_log proposal_log[]
}

model region {
  id     String @id
  region String @db.Char(255)
}

model user {
  id                                                      String                  @id @unique
  employee_name                                           String?                 @db.VarChar
  mobile_number                                           String?                 @db.VarChar
  email                                                   String                  @unique @db.VarChar
  updated_at                                              DateTime?               @default(now()) @db.Timestamptz(6)
  created_at                                              DateTime?               @default(now()) @db.Timestamptz(6)
  employee_path                                           String?                 @db.VarChar
  last_login                                              DateTime?               @default(now()) @db.Timestamptz(6)
  user_role                                               String[]
  user_status_id                                          String
  employee_track                                          project_tracks?         @relation(fields: [employee_path], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_status                                             user_status             @relation(fields: [user_status_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  appointment_appointment_employee_idTouser               appointment[]           @relation("appointment_employee_idTouser")
  appointment_appointment_user_idTouser                   appointment[]           @relation("appointment_user_idTouser")
  bank_information                                        bank_information[]
  client_data                                             client_data?            @relation("client_data_user_idTouser")
  client_log                                              client_log[]
  consultant_form                                         consultant_form[]
  contact_us_contact_us_receiver_idTouser                 contact_us[]            @relation("contact_us_receiver_idTouser")
  contact_us_contact_us_sender_idTouser                   contact_us[]            @relation("contact_us_sender_idTouser")
  email_record_email_record_receiver_idTouser             email_record[]          @relation("email_record_receiver_idTouser")
  email_record_email_record_sender_idTouser               email_record[]          @relation("email_record_sender_idTouser")
  employees_permissions_employees_permissionsTouser       employees_permissions[]
  message                                                 message[]
  proposal                                                proposal[]
  proposal_follow_up_proposal_follow_up_employee_idTouser proposal_follow_up[]    @relation("proposal_follow_up_employee_idTouser")
  proposal_follow_up_proposal_follow_up_user_idTouser     proposal_follow_up[]    @relation("proposal_follow_up_user_idTouser")
  proposal_log_proposal_log_client_user_idTouser          proposal_log[]          @relation("proposal_log_client_user_idTouser")
  proposal_log                                            proposal_log[]
  room_chat_room_chat_participant1Touser                  room_chat[]             @relation("room_chat_participant1Touser")
  room_chat_room_chat_participant2Touser                  room_chat[]             @relation("room_chat_participant2Touser")
  schedule                                                schedule[]
}

model user_type {
  id                                                             String                @id
  title                                                          String                @unique(map: "user_type_user_type_tittle_key")
  project_track_flows_project_track_flows_assigned_toTouser_type project_track_flows[] @relation("project_track_flows_assigned_toTouser_type")
  proposal                                                       proposal[]
  proposal_assign                                                proposal_assign[]
  proposal_log                                                   proposal_log[]
}

model proposal_assign {
  id          Int       @id @default(autoincrement())
  proposal_id String
  user_id     String
  assign      String
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  user_type   user_type @relation(fields: [assign], references: [id], onDelete: NoAction, onUpdate: NoAction)
  proposal    proposal  @relation(fields: [proposal_id], references: [id], onDelete: Cascade)
}

model proposal_follow_up {
  id                                        String    @id
  proposal_id                               String
  created_at                                DateTime? @default(now()) @db.Timestamptz(6)
  updated_at                                DateTime? @default(now()) @db.Timestamptz(6)
  file                                      Json?
  action                                    String?
  user_id                                   String?
  employee_id                               String?
  user_proposal_follow_up_employee_idTouser user?     @relation("proposal_follow_up_employee_idTouser", fields: [employee_id], references: [id], onDelete: Cascade)
  proposal                                  proposal  @relation(fields: [proposal_id], references: [id], onDelete: Cascade)
  user_proposal_follow_up_user_idTouser     user?     @relation("proposal_follow_up_user_idTouser", fields: [user_id], references: [id], onDelete: Cascade)
}

model proposal_status {
  id           String         @id
  title        String         @unique
  proposal     proposal[]
  proposal_log proposal_log[]
}

model client_log {
  id                       String      @id
  reviewer_id              String
  organization_id          String
  note_account_information String
  created_at               DateTime    @default(now()) @db.Timestamptz(6)
  updated_at               DateTime    @default(now()) @db.Timestamptz(6)
  status                   String
  client_data              client_data @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  user                     user        @relation(fields: [reviewer_id], references: [id], onDelete: Cascade)
  user_status              user_status @relation(fields: [status], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model proposal_request {
  id       String     @id
  title    String     @unique
  proposal proposal[]
}

model supervisor {
  id                  String   @id
  user_id             String
  proposal_id         String
  clasification_field String   @db.Char
  closing_report      Boolean
  support_type        Boolean
  does_an_agreement   Boolean
  need_picture        Boolean
  number_of_payments  Decimal  @db.Decimal
  support_amount      Decimal  @db.Decimal
  procedures          String
  notes               String
  support_outputs     String?
  clause              String?
  vat                 Boolean?
  vat_percentage      Int?
  inclu_or_exclu      Boolean?
  proposal            proposal @relation(fields: [proposal_id], references: [id], onDelete: Cascade)
}

model proposal_beneficiaries {
  id       String     @id
  title    String     @unique
  proposal proposal[]
}

model proposal_step {
  id       String     @id
  title    String     @unique
  proposal proposal[]
}

model cheque {
  id               String   @id
  payment_id       String
  deposit_date     DateTime @db.Date
  number           String   @db.VarChar
  transfer_receipt Json
  payment          payment  @relation(fields: [payment_id], references: [id], onDelete: Cascade)
}

model consultation_commite {
  id                         String                       @id(map: "supervisor_copy1_pkey")
  user_id                    String
  proposal_id                String
  entity_name                String?                      @db.VarChar
  governorate                String?
  region                     String?
  chairman_of_director       String?
  establishment_date         DateTime?                    @db.Date
  project_manager            String?                      @db.VarChar
  executive_director         String?                      @db.VarChar
  the_most_promiment         String?
  proviously_supported       Boolean?
  num_of_benefiaries         Int?
  project_name               String?                      @db.VarChar
  project_idea               String?
  project_goals              String?
  add_val_project            String?
  total_cost                 Decimal?                     @db.Decimal
  project_beneficiaries      String?
  project_sup_rationale      String?
  their_type                 String?
  their_age                  String?                      @db.VarChar
  their_number               String?                      @db.VarChar
  duration_of_project        String?
  project_start_date         DateTime?                    @db.Date
  has_estabilish             Boolean?
  project_plc_residence      String?
  remote_or_in_attendace     Boolean?
  total_amount               Decimal?                     @db.Decimal
  type_of_support            String?
  clause                     String?
  objectives                 String?
  type_of_acreditation       String?
  proposal                   proposal                     @relation(fields: [proposal_id], references: [id], onDelete: Cascade, map: "supervisor_copy1_proposal_id_fkey")
  consultation_item_budget   consultation_item_budget[]
  consultation_reccom_budget consultation_reccom_budget[]
}

model consultation_item_budget {
  id                   String               @id(map: "supervisor_item_budget_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  consultation_id      String
  amount               Decimal              @db.Decimal
  explanation          String
  clause               String
  consultation_commite consultation_commite @relation(fields: [consultation_id], references: [id], onDelete: Cascade)
}

model consultation_reccom_budget {
  id                   String               @id(map: "supervisor_reccom_budget_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  consultation_id      String
  amount               Decimal              @db.Decimal
  explanation          String
  clause               String
  consultation_commite consultation_commite @relation(fields: [consultation_id], references: [id], onDelete: Cascade)
}

model payment_status {
  id      String    @id
  title   String?
  payment payment[]
}

model propsal_bank_information {
  id                  String           @id
  bank_information_id String           @db.Uuid
  proposal_id         String
  bank_information    bank_information @relation(fields: [bank_information_id], references: [id], onDelete: Cascade)
  proposal            proposal         @relation(fields: [proposal_id], references: [id], onDelete: Cascade)
}

model correspondance_category {
  id        String      @id
  title     String      @unique
  room_chat room_chat[]
}

model edit_request {
  id                  String              @id
  field_name          String              @db.VarChar
  approval_status     String              @default("WAITING_FOR_APPROVAL")
  old_value           String?             @db.VarChar
  new_value           String              @db.VarChar
  user_id             String
  edit_request_status edit_request_status @relation(fields: [approval_status], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model edit_request_status {
  id           String         @id
  title        String         @unique
  edit_request edit_request[]
}

model project_track_flows {
  id                                                   String          @id(map: "proposal_track_flows_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  assigned_to                                          String
  step_position                                        Int?
  belongs_to_track                                     String?
  is_final_step                                        Boolean?        @default(false)
  action                                               String?         @db.VarChar
  project_tracks                                       project_tracks? @relation(fields: [belongs_to_track], references: [id], onDelete: Cascade)
  user_type_project_track_flows_assigned_toTouser_type user_type       @relation("project_track_flows_assigned_toTouser_type", fields: [assigned_to], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "proposal_track_flows_assigned_to_fkey")
}

model project_tracks {
  id                  String                @id(map: "project_kind_pkey") @unique(map: "project_kind_id_key")
  title               String                @unique(map: "project_kind_title_key")
  project_track_flows project_track_flows[]
  proposal            proposal[]
  proposal_log        proposal_log[]
  user                user[]
}

model room_chat {
  room_id                                                    String                  @id
  correspondance_category                                    String
  participant1                                               String                  @db.Char
  participant2                                               String                  @db.Char
  created_at                                                 DateTime                @default(now()) @db.Timestamptz(6)
  updated_at                                                 DateTime                @default(now()) @db.Timestamptz(6)
  correspondance_category_correspondance_categoryToroom_chat correspondance_category @relation(fields: [correspondance_category], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_room_chat_participant1Touser                          user                    @relation("room_chat_participant1Touser", fields: [participant1], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_room_chat_participant2Touser                          user                    @relation("room_chat_participant2Touser", fields: [participant2], references: [id], onDelete: NoAction, onUpdate: NoAction)
  message                                                    message[]
}

model contact_us {
  id                                    String        @id(map: "contcatus_pkey")
  sender_id                             String
  receiver_id                           String
  inquiry_type                          String?       @db.VarChar
  title                                 String?       @db.VarChar
  project_name                          String?       @db.VarChar
  message                               String?
  date_of_visit                         DateTime?     @db.Date
  reason_visit                          String?
  created_at                            DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at                            DateTime?     @default(now()) @db.Timestamptz(6)
  inquiry_type_contact_usToinquiry_type inquiry_type? @relation(fields: [inquiry_type], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "message_inquiry_type_fkey")
  user_contact_us_receiver_idTouser     user          @relation("contact_us_receiver_idTouser", fields: [receiver_id], references: [id], onUpdate: Restrict, map: "message_receiver_id_fkey")
  user_contact_us_sender_idTouser       user          @relation("contact_us_sender_idTouser", fields: [sender_id], references: [id], onUpdate: Restrict, map: "message_sender_id_fkey")
}

model appointment {
  id                                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date                               DateTime @db.Date
  employee_id                        String
  user_id                            String
  reject_reason                      String
  is_fixed                           Boolean
  start_time                         String?  @db.VarChar
  end_time                           String?  @db.VarChar
  meeting_url                        String?  @db.VarChar
  user_appointment_employee_idTouser user     @relation("appointment_employee_idTouser", fields: [employee_id], references: [id], onDelete: Cascade)
  user_appointment_user_idTouser     user     @relation("appointment_user_idTouser", fields: [user_id], references: [id], onDelete: Cascade)
}

model schedule {
  id         String @id
  user_id    String
  day        String @db.VarChar
  start_time String @db.VarChar
  end_time   String @db.VarChar
  user       user   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model email_record {
  id          String    @id(map: "email_history_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String    @db.VarChar
  content     String
  sender_id   String
  receiver_id String
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  receiver    user      @relation("email_record_receiver_idTouser", fields: [receiver_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "email_datas_receiver_id_fkey")
  sender      user      @relation("email_record_sender_idTouser", fields: [sender_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "email_datas_sender_id_fkey")
}

model authority {
  id    String @id
  title String @db.VarChar
}

model banks {
  id    String @id
  title String @db.VarChar
}

model beneficiaries {
  id    String @id
  title String @db.VarChar
}

model consultant_form {
  chairman_of_board_of_directors String
  been_supported_before          Boolean
  most_clents_projects           String
  added_value                    String
  reasons_to_accept              String
  target_group_num               Int
  target_group_type              String
  target_group_age               Int
  been_made_before               Boolean
  remote_or_insite               Boolean
  clause                         String
  proposal_id                    String                           @unique
  supervisor_id                  String
  id                             String                           @id
  proposal                       proposal                         @relation(fields: [proposal_id], references: [id], onUpdate: Restrict)
  user                           user                             @relation(fields: [supervisor_id], references: [id], onUpdate: Restrict)
  recommended_support_consultant recommended_support_consultant[]
}

model recommended_support_consultant {
  clause             String
  explanation        String
  amount             Int
  id                 String           @id
  consultant_form_id String?
  consultant_form    consultant_form? @relation(fields: [consultant_form_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
}

model track {
  name          String          @unique @db.VarChar
  budget        Float           @db.Real
  id            String          @id @db.VarChar
  track_section track_section[]
}

model track_section {
  id                  String          @id @db.VarChar
  name                String          @unique @db.VarChar
  budget              Float           @db.Real
  track_id            String          @db.VarChar
  section_id          String?         @db.VarChar
  track_section       track_section?  @relation("track_sectionTotrack_section", fields: [section_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  track               track           @relation(fields: [track_id], references: [id], onUpdate: Restrict)
  other_track_section track_section[] @relation("track_sectionTotrack_section")
}

model user_status {
  id         String       @id(map: "client_status_pkey")
  title      String       @unique(map: "client_status_title_key")
  client_log client_log[]
  user       user[]
}
