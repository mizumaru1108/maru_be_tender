# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
stages:
  - pre-publish
  - build
  - test
  - publish
  - post-publish
  - deploy

image: node:lts

# Cache modules in between jobs
cache:
  key: $CI_COMMIT_REF_SLUG
  paths:
    - $HOME/.npm/
    - node_modules/
    - .yarn/cache/
    - .next/cache/

# Semgrep - https://www.notion.so/hendyirawan/How-To-Add-Semgrep-To-A-GitLab-Project-0c98345d99c24d64876eb53ae6ed27e9
# Hendy's note: disable Semgrep temporarily due to js dangerouslyset bug
# FIXME: re-enable when semgrep is fixed
.semgrep:
  image: returntocorp/semgrep-agent:v1
  script: semgrep-agent
  variables: {}
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# ------------------------------------- pre-publish ------------------------------------------

# "prepare version other":
#   stage: pre-publish
#   needs: []
#   variables:
#     APP_ENV: dev
#   cache: []
#   script:
#     - export APP_VERSION=$(date +%Y.%m.%d)-${APP_ENV}_${CI_COMMIT_SHORT_SHA}
#     - echo "APP_ENV=$APP_ENV APP_VERSION=$APP_VERSION"
#     - echo "APP_ENV=$APP_ENV" > build.env
#     - echo "APP_VERSION=$APP_VERSION" >> build.env
#   artifacts:
#     reports:
#       dotenv: build.env
#     expire_in: 1 week
#   rules:
#     - if: '($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event") && $CI_COMMIT_BRANCH != "stack/dev" && $CI_COMMIT_BRANCH != "stack/qc" && $CI_COMMIT_BRANCH != "stack/staging" && $CI_COMMIT_BRANCH != "stack/prod"'

"prepare version":
  stage: pre-publish
  needs: []
  cache: []
  script:
    - export APP_ENV=${CI_COMMIT_BRANCH/stack\//}
    - export APP_VERSION=$(date +%Y.%m.%d)-${APP_ENV}_${CI_COMMIT_SHORT_SHA}
    - echo "APP_ENV=$APP_ENV APP_VERSION=$APP_VERSION"
    - echo "APP_ENV=$APP_ENV" > build.env
    - echo "APP_VERSION=$APP_VERSION" >> build.env
  artifacts:
    reports:
      dotenv: build.env
    expire_in: 1 week

# sonarqube-check:
#   stage: build
#   image:
#     name: sonarsource/sonar-scanner-cli:latest
#     entrypoint: [""]
#   variables:
#     SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
#     GIT_DEPTH: "0" # Tells git to fetch all the branches of the project, required by the analysis task
#   cache:
#     key: "${CI_JOB_NAME}"
#     paths:
#       - .sonar/cache
#   script:
#     - sonar-scanner
#   allow_failure: true
#   only:
#     - main # or the name of your main branch

.dev_rules:
  rules:
    - if: '$CI_COMMIT_BRANCH == "stack/dev" && ($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event")'

.qc_rules:
  rules:
    - if: '$CI_COMMIT_BRANCH == "stack/qc" && ($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event")'

.staging_rules:
  rules:
    - if: '$CI_COMMIT_BRANCH == "stack/staging" && ($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event")'

.prod_rules:
  rules:
    - if: '$CI_COMMIT_BRANCH == "stack/prod" && ($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event")'

    # # You can manually trigger the pipeline with BUILD_PACKAGE=tmra-raise
    # - if: '$CI_COMMIT_BRANCH == "stack/dev" && $BUILD_PACKAGE == "tmra-raise"'

include:
  # - local: "/apps/raise/.gitlab-ci.yml"
  - local: "/apps/pwa/.gitlab-ci.yml"
